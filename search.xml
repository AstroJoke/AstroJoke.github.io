<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>洛谷官方提单——线性表题解</title>
      <link href="/2020/05/02/luo-gu-guan-fang-ti-dan-xian-xing-biao-ti-jie/"/>
      <url>/2020/05/02/luo-gu-guan-fang-ti-dan-xian-xing-biao-ti-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="题目0：询问学号"><a href="#题目0：询问学号" class="headerlink" title="题目0：询问学号"></a>题目0：询问学号</h2><p>简单到不能简单的题目，无解释。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> memo<span class="token punctuation">[</span><span class="token number">2000001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>x<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> cin<span class="token operator">>></span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin<span class="token operator">>></span>x<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>memo<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目1：寄包柜"><a href="#题目1：寄包柜" class="headerlink" title="题目1：寄包柜"></a>题目1：寄包柜</h2><p>由于我们存储的的大小不确定，所以应该使用链表的/vector（如果你是用数组那么你就等着MLE吧哈哈哈哈）</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> num<span class="token punctuation">,</span> w<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>memo<span class="token punctuation">[</span><span class="token number">100050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> q<span class="token punctuation">,</span> kind<span class="token punctuation">,</span> cabinet<span class="token punctuation">,</span> lattice<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> q<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin <span class="token operator">>></span> kind<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>kind <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin <span class="token operator">>></span> cabinet <span class="token operator">>></span> lattice <span class="token operator">>></span> k<span class="token punctuation">;</span>            memo<span class="token punctuation">[</span>cabinet<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>             memo<span class="token punctuation">[</span>cabinet<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lattice<span class="token punctuation">)</span><span class="token punctuation">;</span>            memo<span class="token punctuation">[</span>cabinet<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            cin <span class="token operator">>></span> cabinet <span class="token operator">>></span> lattice<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> memo<span class="token punctuation">[</span>cabinet<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>cabinet<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> lattice<span class="token punctuation">)</span><span class="token punctuation">{</span>                    cout <span class="token operator">&lt;&lt;</span> memo<span class="token punctuation">[</span>cabinet<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目2：后缀表达式"><a href="#题目2：后缀表达式" class="headerlink" title="题目2：后缀表达式"></a>题目2：后缀表达式</h2><p>这里提前介绍下栈的几种题目，包括但不限于括号匹配，栈混洗问题，汉诺依塔问题等，这个后缀表达式就是最直接的栈的问题。</p><p>题目做法如下，创建一个数字栈，当其出现数字则全部存入数字栈，当出现符号的时候，取数字栈的最上面两个元素进行运算再放入数字栈，直至栈元素为最后一个元素的时候，即为答案。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span>using namespace std<span class="token punctuation">;</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span><span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> first<span class="token punctuation">,</span> second<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            second <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>first <span class="token operator">+</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             second <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>second <span class="token operator">-</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             second <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>first <span class="token operator">*</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            first <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            second <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>second <span class="token operator">/</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token string">'.'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> ch <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目3：约瑟夫问题"><a href="#题目3：约瑟夫问题" class="headerlink" title="题目3：约瑟夫问题"></a>题目3：约瑟夫问题</h2><p>队列或者链表的基本问题，或者也可以使用公式法（《具体数学》第一章就有阐述）</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//模拟做法</span><span class="token comment" spellcheck="true">//12行可以取模，但是我懒的想</span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>using namespace std<span class="token punctuation">;</span>bool book<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>s <span class="token operator">></span> n<span class="token punctuation">)</span> s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">)</span> i<span class="token operator">--</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>         book<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目4：队列安排"><a href="#题目4：队列安排" class="headerlink" title="题目4：队列安排"></a>题目4：队列安排</h2><p>emmm题目叫做队列安排，实际上应该链表类的问题i，你可以使用STL的list文件，也可以手写list。手写list的方法也很多，可以使用数组用游标模拟，也可以使用指针写法。但是如果使用指针写法会被TLE掉- -我也很绝望，因此使用数组模拟。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">100050</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">,</span> out_num<span class="token punctuation">,</span> st <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    memo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> temp_k<span class="token punctuation">,</span> temp_p<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp_k<span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp_p<span class="token punctuation">)</span><span class="token punctuation">;</span>        memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp_p <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            memo<span class="token punctuation">[</span>memo<span class="token punctuation">[</span>temp_k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>             memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp_k<span class="token punctuation">;</span>            memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> memo<span class="token punctuation">[</span>temp_k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            memo<span class="token punctuation">[</span>temp_k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp_k <span class="token operator">==</span> st<span class="token punctuation">)</span> st <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> memo<span class="token punctuation">[</span>temp_k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            memo<span class="token punctuation">[</span>memo<span class="token punctuation">[</span>temp_k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            memo<span class="token punctuation">[</span>temp_k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>             memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp_k<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>out_num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> out_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> temp_out<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp_out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>temp_out<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            memo<span class="token punctuation">[</span>temp_out<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            memo<span class="token punctuation">[</span>memo<span class="token punctuation">[</span>temp_out<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> memo<span class="token punctuation">[</span>temp_out<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            memo<span class="token punctuation">[</span>memo<span class="token punctuation">[</span>temp_out<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> memo<span class="token punctuation">[</span>temp_out<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            num<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp_out <span class="token operator">==</span> st<span class="token punctuation">)</span> st <span class="token operator">=</span> memo<span class="token punctuation">[</span>temp_out<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> memo<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st <span class="token operator">=</span> memo<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目5：机械翻译"><a href="#题目5：机械翻译" class="headerlink" title="题目5：机械翻译"></a>题目5：机械翻译</h2><p>题目的含义就是队列的赤果果的解释鸭（另外实际上这道题就是典型的在CO中的cache，OS中的快表）。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span>using namespace std<span class="token punctuation">;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Q<span class="token punctuation">;</span><span class="token keyword">int</span> book<span class="token punctuation">[</span><span class="token number">1200</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> M<span class="token punctuation">,</span>N<span class="token punctuation">,</span>ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>M<span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> M<span class="token punctuation">)</span> <span class="token punctuation">{</span>                book<span class="token punctuation">[</span>Q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                Q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            book<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目6：海港"><a href="#题目6：海港" class="headerlink" title="题目6：海港"></a>题目6：海港</h2><h2 id="题目7：括号序列"><a href="#题目7：括号序列" class="headerlink" title="题目7：括号序列"></a>题目7：括号序列</h2><h2 id="题目8：验证栈序列"><a href="#题目8：验证栈序列" class="headerlink" title="题目8：验证栈序列"></a>题目8：验证栈序列</h2><h2 id="题目9：营业额统计（蓝题警告）"><a href="#题目9：营业额统计（蓝题警告）" class="headerlink" title="题目9：营业额统计（蓝题警告）"></a>题目9：营业额统计（蓝题警告）</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法和程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程算法题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Overview-of-Computer-Graphics</title>
      <link href="/2020/05/02/overview-of-computer-graphics/"/>
      <url>/2020/05/02/overview-of-computer-graphics/</url>
      
        <content type="html"><![CDATA[<p>GAMES101是闫令琪老师的现代图形学入门，本文是二刷这个mooc的小总结，（flag）拟<del>三天</del>五天内完成。</p><p>另：封面图取自“MapleStory”（国服为“冒险岛”）的Arcana主城区的游戏内截图，若涉嫌侵权，请联系本人更换封面图。</p><h2 id="0-Overview-of-Computer-Graphics"><a href="#0-Overview-of-Computer-Graphics" class="headerlink" title="0. Overview of Computer Graphics"></a>0. Overview of Computer Graphics</h2><h3 id="What-is-Computer-Graphics"><a href="#What-is-Computer-Graphics" class="headerlink" title="What is Computer Graphics?"></a>What is Computer Graphics?</h3><p>The use of computers to synthesize and manipulate visual information.</p><h3 id="Why-Study-Computer-Graphics"><a href="#Why-Study-Computer-Graphics" class="headerlink" title="Why Study Computer Graphics?"></a>Why Study Computer Graphics?</h3><h4 id="Applications"><a href="#Applications" class="headerlink" title="Applications"></a>Applications</h4><ol start="0"><li><p>Video Games: e.g. “<em>SEKIRO: Shadows Die Twice</em>“,  “<em>Borderlands 3</em>“;</p></li><li><p>Movies: e.g. “<em>The Matrix（1999）</em>“,”<em>Avatar（2009）</em>“;</p></li><li><p>Animations: e.g. “<em>Zootopia（2016）</em>“,”<em>Frozen 2（2019）</em>“;</p></li><li><p>Design: e.g. CAD , CAM ;</p></li><li><p>Visualization: e.g Science, Engineering, Medicin, Journalism, etc. ;</p></li><li><p>Virtual Reality &amp; Augemented Reality;</p></li><li><p>Digital Illustration: e.g. PhotoShop;</p></li><li><p>Simulation: “<em>Black hole</em>“（simulate the light/ray）,”<em>Dust Bowl phenomena</em>“;</p></li><li><p>GUI: Graphical User Interfaces;</p></li><li><p>Typography: Font（about vector or lattice） ;</p><p>Rmk: “<em>The Quick Brown Fox Jumps Over The Lazy Dog.</em>“ usually be used in this application because it contain 26 alphabets.</p></li></ol><h4 id="Fundamental-Intellectual-Challenges"><a href="#Fundamental-Intellectual-Challenges" class="headerlink" title="Fundamental Intellectual Challenges"></a>Fundamental Intellectual Challenges</h4><ol start="0"><li><p>Creates and interacts with realistic virtual world</p></li><li><p>Requires understanding of all aspects of physical world</p></li><li><p>New computing methods, displays, technologies</p></li></ol><h4 id="Technical-Challenges"><a href="#Technical-Challenges" class="headerlink" title="Technical Challenges"></a>Technical Challenges</h4><ol start="0"><li><p>Math of （perspective） projections, curves,surfaces</p></li><li><p>Physics of lighting and shading</p></li><li><p>Repressenting/ operating shapes in 3D</p></li></ol><h3 id="Course-Topics"><a href="#Course-Topics" class="headerlink" title="Course Topics"></a>Course Topics</h3><h4 id="Rasterization"><a href="#Rasterization" class="headerlink" title="Rasterization"></a>Rasterization</h4><ol start="0"><li><p>Project <font color="red">geometry  primitives</font> （3D triangles / polygons） onto the screen;</p></li><li><p>Break projected primitives into <font color="red">fragments（pixels）</font> ;</p></li><li><p>Gold standard in Video Games（Real-time Application）.</p><p>p.s : Real-time Application: biger than 30 fps.</p></li></ol><h4 id="Curves-and-Meshes"><a href="#Curves-and-Meshes" class="headerlink" title="Curves and Meshes"></a>Curves and Meshes</h4><p>​    How to represent geometry in Computer Graphics</p><h4 id="Ray-Tracing"><a href="#Ray-Tracing" class="headerlink" title="Ray Tracing"></a>Ray Tracing</h4><ol start="0"><li><p>Shoot rays from the camera though each pixel;</p><ol start="0"><li>Calculate <font color="red">intersection</font> and <font color="red">shading</font>;</li><li><font color="red">Continue to Bounce</font> the rays till they hit light sources.</li></ol></li><li><p>Gold standard in Animations/ Movies（Offline Applications）.</p></li></ol><h4 id="Animation-Simulation"><a href="#Animation-Simulation" class="headerlink" title="Animation / Simulation"></a>Animation / Simulation</h4><ol start="0"><li><p>Key frame Animation;</p></li><li><p>Mass-spring System.（弹簧振子系统）</p></li></ol><h3 id="Differences-between-CV-and-CG"><a href="#Differences-between-CV-and-CG" class="headerlink" title="Differences between CV and CG"></a>Differences between CV and CG</h3><p>Everything that needs to be guessed belongs to Computer Verson, and in this MOOC, we don’t introduce it.</p><p>“MODEL” use CG（rendering） to “IMAGE”, and “IMAGE” use CV to “MODEL”.”MODEL” usually uesd in CG like modeling, simulation; “IMAGE” usually uesd in CV,like Image Processing.</p><p>But CV and CG have not clear boundaries.</p><h2 id="1-Linear-Algebra"><a href="#1-Linear-Algebra" class="headerlink" title="1. Linear Algebra"></a>1. Linear Algebra</h2><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><ol start="0"><li><p>Usually written as $\vec a$ or in bold $\bold a$;</p></li><li><p>Or using start and end points $\vec {AB}=B-A$;</p></li><li><p>The vector contain direcition and length;</p></li><li><p>Vector have no absolute starting position（we can see this property in homogeneous coordinate）;</p></li><li><p>Magnitude（length） of a vector written as $||\vec a||$（二范数，模长等中文名）;</p></li><li><p>Unit vector （Vector Normalization）</p><ol start="0"><li><p>A vector with Magnitude（length） of 1;</p></li><li><p>Finding the unit vector of a vector（normalization）:<br>$$<br>\hat a=\frac{\vec a}{||\vec a||}<br>$$<br>$\hat a$ read as “<em>a hat</em>“.</p></li><li><p>Used to represent directions.</p></li></ol></li><li><p>Vector Addition</p><ol start="0"><li><p>Geometrically: Parallelogram la or Triangle law;</p></li><li><p>Algebraically: Simply add coordinates.</p></li></ol></li><li><p>Cartesian Coordinates —笛卡尔坐标系</p><p>p.s. The defination of Cartesian Coordinates should get some basic in Set Theorey, Cartesian product. So we pass this defination.</p><p>X and Y can be any （usually orthogonal unit ） vectors:<br>$$<br>A=\left(<br>\begin{matrix}<br>x\\<br>y<br>\end{matrix}<br>\right),A^T=(x,y), ||A||=\sqrt{x^2+y^2}<br>$$<br>the symbol $T$  represent the transposition, it is also used in Matrix.</p></li><li><p>Dot（scalar：标量） Product<br>$$<br>{\vec a} \cdot {\vec b}=||\vec a||||\vec b||cos\theta,cos\theta=\frac{\vec a \cdot\vec b}{||\vec a||||\vec b||}<br>$$</p><ol start="0"><li><p>For unit vector $cos\theta=\hat a\cdot\hat b$.</p></li><li><p>properties:</p><ol start="0"><li><p>$\vec a \cdot\vec b=\vec b \cdot\vec a$;</p></li><li><p>$\vec a \cdot （\vec b+\vec c）=\vec a \cdot \vec b+\vec a \cdot \vec c$;</p></li><li><p>$（k\vec a）\cdot \vec b=\vec a\cdot （k\vec b）=k（\vec a\cdot \vec b ）$;</p></li><li><p>In artesian Coordinates: Component-wise multiplication ,then adding up（$\vec a=（x_1,x_2,…,x_n）^T,\vec b=（y_1,<br>y_2,…,y_n）^T$）<br>$$<br>\vec a \cdot \vec b=\displaystyle\sum_{i=1}^nx_iy_i<br>$$</p></li><li><p>Usage: </p><ol start="0"><li><p>Find angle between two vectors:</p></li><li><p>Finding  <font color="red">projection</font>  of one vector on another:</p><p>$\vec b_{\perp}$:projection of $\vec b$ onto $\vec a$.</p><ol><li>$\vec b_{\perp}=k\hat a$;</li><li>$k=||\vec b_{\perp}||=||\vec b||cos\theta$.</li></ol></li><li><p>Measure how close two directions are;</p></li><li><p>Decompose a vector;</p></li><li><p>Determine forward（clockwise） / backword（anticlockwise）;</p></li></ol></li></ol></li></ol></li><li><p>Cross（vector） product</p><ol start="0"><li><p>Cross product is orthogonal to two initial vectors;</p></li><li><p>Direction determined by right-hand rule;</p></li><li><p>Useful in constructing coordinate systems（later）.</p></li><li><p>properties </p><ol start="0"><li><p>$\vec a  \times \vec b=-\vec b \times \vec a$;</p></li><li><p>$\vec a \times \vec a= \vec 0$;</p></li><li><p>$\vec a\times （\vec b+\vec c）=\vec a\times \vec b+\vec a\times \vec  c$;</p></li><li><p>$\vec a\times（k\vec b）=k（\vec a\times\vec b）$.</p></li></ol></li><li><p>Cartsesian Formula<br>$$<br>\vec a\times \vec b=\left(\begin{matrix}y_az_b-y_bz_a\\z_ax_b-x_az_b\\x_ay_b-y_ax_b\end{matrix}\right)<br>$$<br>Later<br>$$<br>\vec a\times \vec b=A^*b=\left(\begin{matrix}0&amp;-z_a&amp;y_a\\z_a&amp;0&amp;-x_a\\-y_a&amp;x_a&amp;0\end{matrix}\right)\left(\begin{matrix}x_b\\y_b\\z_b\end{matrix}\right)<br>$$</p></li><li><p>Usage</p><ol start="0"><li><p>Determine <strong>left / right</strong>;</p></li><li><p>Determine <strong>inside / outside</strong> ;</p></li></ol></li></ol></li><li><p>Orthonormal bases and coordinate frames</p><p>it is important for representing points, positions, locations, and many sets of coordinate systems such as Clobal, local ,world, etc. And critical issue is transforming between these systems/bases.</p><p>Any set of 3 vectors （in 3D） that （$\vec p$ is projection）<br>$$<br>||\vec u||=||\vec v||=||\vec w||=1\\<br>\vec u \cdot \vec v=\vec v\cdot \vec w=\vec  u \cdot \vec w=0\\<br>\vec w=\vec u \times \vec v（right\space handed）\\<br>\vec p=(\vec p \cdot \vec u)\vec u+(\vec p \cdot \vec v)\vec v+(\vec p \cdot \vec w)\vec w<br>$$</p></li></ol><h3 id="Matrices"><a href="#Matrices" class="headerlink" title="Matrices"></a>Matrices</h3><p>In Graphics, pervasively used to represent transformations （include Translation, Rotation, Shear, Scale）.</p><ol start="0"><li><p>What is a matrix</p><ol start="0"><li>Array of numbers（$m\times n=m\space rows,n\space columns$）</li></ol><p>$$<br>\left(<br>\begin{matrix}1&amp;3\\5&amp;2\\0&amp;4\end{matrix}\right)<br>$$</p><ol><li>Addition and multiplication by a scalar are trivial: element by element.</li></ol></li><li><p>Matrix-Matrix Multiplication</p><p>if$A\times B$, then the columns in A must =rows in B, namely $（M\times N）（N\times P）=（M\times P）$.</p><ol start="0"><li><p>Element $（i,j）$ in the product is the dot product of row i from A and column j from B.</p></li><li><p>propertise:</p><ol start="0"><li><p>Generally speaking, the Multiplication is <strong>non-commutative</strong>, namely AB and BA are different <strong>in general</strong>;</p></li><li><p>Associative and distributive</p><ol start="0"><li><p>$（AB）C=A（BC）$;（can accelarate the speed by dp）</p></li><li><p>$A（B+C）=AB+AC$;</p></li><li><p>$（A+B）C=AC+BC$.</p></li></ol></li></ol></li></ol></li><li><p>Matrix-VectorMultiplication</p><ol start="0"><li><p>Treat vector as a column matrix（$m\times 1$）</p></li><li><p>Key for transforming points.</p></li><li><p>Official spoiler: 2D reflection about y=axis<br>$$<br>\left(\begin{matrix}-1&amp;0\\0&amp;1\end{matrix}\right)<br>\left(\begin{matrix}x\\y\end{matrix}\right)<br>=\left(\begin{matrix}-x\\y\end{matrix}\right)<br>$$</p></li></ol></li><li><p>Transpose of a Matrix</p><ol start="0"><li><p>Switch rows and columns（$（i,j）\rightarrow（j,i）$）;</p></li><li><p>$（AB）^T=B^TA^T$.</p></li></ol></li><li><p>Identity Matrix and Inverses</p><ol start="0"><li>Identity Matrix:</li></ol><p>$$<br>I_{3\times3}=\left(\begin{matrix}1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\end{matrix}\right)<br>$$</p><ol><li><p>Inverses:</p><ol start="0"><li><p>$AA^{-1}=A^{-1}A=I$;</p></li><li><p>$（AB）^{-1}=B^{-1}A^{-1}$.</p></li></ol></li></ol></li></ol><h3 id="Transformation"><a href="#Transformation" class="headerlink" title="Transformation"></a>Transformation</h3><ol start="0"><li><p>Why study transformation</p><ol start="0"><li>Modeling </li><li>Viewing</li></ol></li><li><p>2D transformations: rotation, scale, shear</p><ol start="0"><li><p>Representing transformations using matrices</p></li><li><p>The matrix</p><ol start="0"><li><p>Rotation：Suppose rotate about the origin $（0,0）$ ,  anticlockwise by default and rotate angel is $\theta$.So the matrix is :<br>$$<br>R_{\theta}=\left[ \begin {matrix} cos\theta&amp;-sin\theta\\sin\theta&amp;cos\theta\end{matrix}\right]<br>$$<br>$proof:$</p><p>​    Get a Cartesian Coordinates $Oxy$, all the vectors, begin from origin, write as $V$.</p><p>​    Suppose  we want $\vec {OP}=（x,y）$ rotate to $\vec {OP’}=（x’,y’）$, and $\angle {xOP}=\alpha, \angle{POP’}=\theta$ and $||\vec OP||=r$, we can get the following equations<br>$$<br>\begin{cases}<br>x=rcos\alpha\\<br>y=rsin\alpha\\<br>x’=rcos(\alpha+\theta)\\<br>y’=rsin(\alpha+\theta)<br>\end{cases}<br>$$<br>and then we can get<br>$$<br>\begin{cases}<br>x’=xcos\theta-ysin\theta\\<br>y’=xsin\theta+xcos\theta<br>\end {cases}<br>$$<br>and get the coefficient to the matrix is $R_{\theta}$.</p><p>And we can get the<br>$$<br>R_{-\theta}=\left[ \begin {matrix} cos\theta&amp;sin\theta\\-sin\theta&amp;cos\theta\end{matrix}\right]=R_\theta^T<br>$$<br>Infact, if the $detM=1or-1$, we called $M$ is *<em>Orthogonality Matrix *</em>, and $M^{-1}=M^t$</p></li><li><p>Scale（Non uniform）：Suppose $k_{axis}$ is the scale ratio, so the scale matrix is<br>$$<br>\left[ \begin {matrix}x’\\y’ \end{matrix}\right]=<br>\left[ \begin {matrix} k_x&amp;0\\0&amp;k_y\end{matrix}\right]<br>\left[ \begin {matrix} x\\y\end{matrix}\right]<br>$$</p></li><li><p>Shear：Suppose horizontal shift is $0$ at $y=0$, horizontal shift is $a$ at $y=1$ and vertical shift is always $0$, so the shear matrix is<br>$$<br>\left[ \begin {matrix}x’\\y’ \end{matrix}\right]=<br>\left[ \begin {matrix} 1&amp;a\\0&amp;1\end{matrix}\right]<br>\left[ \begin {matrix} x\\1\end{matrix}\right]<br>$$</p></li><li><p>Reflection: To mirror y-axis.<br>$$<br>\left[ \begin {matrix}x’\\y’ \end{matrix}\right]=<br>\left[ \begin {matrix} -1&amp;0\\0&amp;1\end{matrix}\right]<br>\left[ \begin {matrix} x\\y\end{matrix}\right]<br>$$</p></li></ol></li></ol></li><li><p><strong>Linear Transforms = Matrices （of the same dimension）</strong></p></li><li><p>Homogeneous coordinates</p><ol start="0"><li><p>Why homogeneous coordinates : </p><ol start="0"><li><p>To represent the translation by <strong>linear transforms</strong>;</p><ol start="0"><li><p>The equations of translation<br>$$<br>\begin{cases}<br>x’=x+t_x\\<br>y’=y+t_y<br>\end{cases}<br>$$</p></li><li><p>If keep the dimension, we only represent it in matrix form<br>$$<br>\left[ \begin {matrix}x’\\y’ \end{matrix}\right]=<br>\left[ \begin {matrix} a&amp;b\\c&amp;d\end{matrix}\right]<br>\left[ \begin {matrix} x\\y\end{matrix}\right]+<br>\left[ \begin {matrix} t_x\\t_y\end{matrix}\right]<br>$$</p></li><li><p>But we don’t want to be this special case. So we import the homogeneous coordinates</p><ol start="0"><li><p>Add an extra coodinate （w-coordinate）: 2D point =$（x,y,1）^T$ and 2D vector =$（x,y,0）^T$</p></li><li><p>the the Matrix Representation of translations is<br>$$<br>\left[ \begin {matrix}x’\\y’\\w’ \end{matrix}\right]=<br>\left[ \begin {matrix} 1&amp;0&amp;t_x\\0&amp;1&amp;t_y\\0&amp;0&amp;1\end{matrix}\right]<br>\left[ \begin {matrix} x\\y\\1\end{matrix}\right]=<br>\left[ \begin {matrix} x+t_x\\y+t_y\\1\end{matrix}\right]<br>$$</p></li></ol></li><li><p><strong>Tradeoff</strong>: We should consider the extra cost by importing the homogeneous coordinates, because <strong>there is no free lunch in the world</strong>.</p></li></ol></li><li><p>To distinguish the vector and the point（ coordinate ）.</p><p>we have introduced the homogeneous coordinates, but why we should put the extra dimension to $1$ （in point） or $0$ （in vector）?</p><p>Because the vector have the property — translation invariance. So we want, after the transformation, the vector won’t be change.</p><p>And the Valid operation if w-coordinate of result is 1 or 0</p><ol start="0"><li><p>vector + vector = vector;</p></li><li><p>point - point = vector;</p></li><li><p>point + vector = point ;</p></li><li><p>point + point = Special Case</p></li><li><p>Special Case: if the w-coordinate is not both 0 or 1, we let the point normalization. After the normalization, we can get a point. （In the Num 3 operation, we will get the mid point between 2 points）.<br>$$<br>\left[ \begin {matrix}x\\y\\w \end{matrix}\right]=\left[ \begin {matrix}\frac xw\\ \frac yw\\1 \end{matrix}\right],w\neq0<br>$$</p></li></ol></li></ol></li><li><p>Affine transformation（仿射变换）</p><ol start="0"><li>Affine map = linear map + translation. So using homogeneous coordinates, we can get</li></ol><p>$$<br>\left[ \begin {matrix}x’\\y’\\w’ \end{matrix}\right]=<br>\left[ \begin {matrix} a&amp;b&amp;t_x\\c&amp;d&amp;t_y\\0&amp;0&amp;1\end{matrix}\right]<br>\left[ \begin {matrix} x\\y\\1\end{matrix}\right]<br>$$</p><ol><li>Transformation by homogeneous coordinates：Add another column and let the column assignment $（0,0,…,0,1）$</li><li>Invers Transform $M^-1$, it map to the inverse matrix</li></ol></li></ol></li><li><p>Composing Transforms</p><ol start="0"><li><p>Suppose we want to rotate and translate the picture, we can get the 2 ways: The first is translation then rotation, the other is rotation then translation. <strong>But</strong> compare the two picture, we get the difference picture. So we should know that the transformation sequence/ordering is <strong>matters</strong>.</p><p>Associate the matrix multiple and we can easily understand it. But note that martices are applied <strong>right to left</strong>.</p></li><li><p>We can pre-multiply $n$ matrixs to obtain a single matrix representing combined transform, wich are important for performance （pre-multiply is faster）.</p></li></ol></li><li><p>Decomposing Complex Transforms</p></li><li><p>3D Transformation</p><ol start="0"><li><p>Use homogeneous coordinates: 3D point =$（x,y,z,1）^T$ and 3D vector =$（x,y,z,0）^T$</p></li><li><p>In general $（x,y,z,w）,w\neq0$ is the 3D point<br>$$<br>(\frac xw,\frac yw,\frac zw)<br>$$</p></li><li><p>And use $4\times4$ matrices for affine transformations（Other transformation is simliar to this case）<br>$$<br>\cdot \left[ \begin {matrix} x’\\y’\\z’\\1\end{matrix}\right]=<br>\left[ \begin {matrix} a&amp;b&amp;c&amp;t_x\\d&amp;e&amp;f&amp;t_y\\g&amp;h&amp;i&amp;t_z\\0&amp;0&amp;0&amp;1\end{matrix}\right]<br>\cdot \left[ \begin {matrix} x\\y\\z\\1\end{matrix}\right]<br>$$</p></li><li><p>Be careful this transformation is linear transformation then translation.</p></li><li><p>Rotate matrices around $x-$, $y-$ or $z-axis$  are<br>$$<br>R_x(\theta)=\left[<br>\begin {matrix}<br>1&amp;0&amp;0&amp;0<br>\\0&amp;cos\theta&amp;-sin\theta&amp;0<br>\\0&amp;sin\theta&amp;cos\theta&amp;0<br>\\0&amp;0&amp;0&amp;1<br>\end{matrix}\right]<br>\\<br>R_y(\theta)=\left[<br>\begin {matrix} cos\theta&amp;0&amp;sin\theta&amp;0<br>\\0&amp;1&amp;0&amp;0<br>\\-sin\theta&amp;0&amp;cos\theta&amp;0<br>\\0&amp;0&amp;0&amp;1<br>\end{matrix}\right]<br>\\<br>R_z(\theta)=\left[<br>\begin {matrix} cos\theta&amp;-sin\theta&amp;0&amp;0<br>\\sin\theta&amp;cos\theta&amp;0&amp;0<br>\\0&amp;0&amp;1&amp;0<br>\\0&amp;0&amp;0&amp;1<br>\end{matrix}\right]<br>$$<br>We can notice a fact that the $R_y（\theta）$ is special, if you want to know more, review the “<em>coss product</em>“ and you will know why this phenomenon will occur. </p></li><li><p>Euler angles: To compose any 3D rotation from $R_x,R_y,R_z$<br>$$<br>R_{xyz}(\alpha,\beta,\gamma)=R_x（\alpha）R_y（\beta）R_z（\gamma）<br>$$<br>And we often used in flight simulators : roll, pitch, yaw.（中文：偏航、俯仰和滚转）</p><p>Althou the Euler angles can’t avoid the Gimbal Lock（ a kind of deadlock ）, and it can’t finish the smooth interpolation of sphere, but it can easily sovle the 3D rotation problem. So we omit it. （If you want to know more, you can google it） .</p><ol start="0"><li><p><strong>Rodrigues’ Rotation Formula</strong>: By angle $\alpha$ round axis $n$, $I$ is <strong>Identity matrix</strong>, and the last matrix we called <strong>dual matrix</strong><br>$$<br>R(\vec n,\alpha)=cos(\alpha)I+(1-cos\alpha)\vec n \vec n^T+sin(\alpha)<br>\left[<br>\begin {matrix} 0&amp;-n_z&amp;n_y<br>\\n_z&amp;0&amp;-n_x<br>\\-n_y&amp;n_x&amp;0<br>\end{matrix}\right]<br>$$</p></li><li><p>The method of <strong>Quaternions（四元数）</strong>is to solve the interpolation of the rotation. And we omis it in this Blog.</p></li></ol></li></ol></li></ol><h3 id="Viewing-Transformaton"><a href="#Viewing-Transformaton" class="headerlink" title="Viewing Transformaton"></a>Viewing Transformaton</h3><ol start="0"><li><p>View（视图）/ Camera transformation</p><ol start="0"><li><p>What is view transformation — associate the photo when we take.</p><p>Generally, when we take a photo, we always do as follows:</p><ol start="0"><li>Find a good place and arrange the elments（Model transformation）</li><li>Find a good <em>angle</em> to put the camera（View transformation）</li><li>Cheese（Projection transformation）</li></ol></li><li><p>How to perform view transformation?</p><ol start="0"><li><p>Define the camera: mark $\vec e$ as position, $\hat g$ as look-at/gaze direction and $\hat t$ as up direction（assuming perp. to look at）</p></li><li><p>Key observation: If the camera and all objects move together, the photo will be the same. So we always transform the camera to the origin, up at $Y$, look at the $-Z$, and transform the objects along with the camera.</p></li><li><p>Transform the camera by $M_{view}$, so it’s located a the origin, up at $Y$, look at $-Z$. In math descibe, we called </p><ol start="0"><li><p>Translates $\vec e$ to origin;</p></li><li><p>Rotates $\hat g$ to $-Z$;</p></li><li><p>Rotates $\hat t$ to $Y$;</p></li><li><p>Rotatse $\hat g \times \hat t$ to $X$</p></li><li><p>And we write $M_{view}=R_{view}T_{view}$, then translate $\vec e$ to origin<br>$$<br>T_{view}=\left[\begin{matrix}<br>1&amp;0&amp;0&amp;-x_e<br>\\<br>0&amp;1&amp;0&amp;-y_e<br>\\<br>0&amp;0&amp;1&amp;-z_e<br>\\<br>0&amp;0&amp;0&amp;1<br>\end{matrix}\right]<br>$$<br>Then rotate $\hat g$  to $-Z$, $\hat t$ to $Y$, $（g\times t）$ to $X$, we find that it hard to caculate, consider the Orthogonality Matrix, we can find the $R_{view}^{-1}$ is easy to caculate.</p><p>Just inverse the rotation $X$ to $（g\times t）$, $Y$ to $\hat t$ and $Z$ to $-\hat g$, then<br>$$<br>R_{view}^{-1}=\left[\begin{matrix}<br>x_{\hat g\times \hat t}&amp;x_t&amp;x_{-g}&amp;0<br>\\<br>y_{\hat g\times \hat t}&amp;y_t&amp;y_{-g}&amp;0<br>\\<br>z_{\hat g\times \hat t}&amp;z_t&amp;z_{-g}&amp;0<br>\\<br>0&amp;0&amp;0&amp;1<br>\end{matrix}\right]<br>$$<br>Because of the property $M^{-1}=M^t$, we can get<br>$$<br>R_{view}=<br>\left[\begin{matrix}<br>x_{\hat g\times \hat t}&amp;y_{\hat g\times \hat t}&amp;z_{\hat g\times \hat t}&amp;0<br>\\<br>x_t&amp;y_t&amp;z_t&amp;0<br>\\<br>x_{-g}&amp;y_{-g}&amp;z_{-g}&amp;0<br>\\<br>0&amp;0&amp;0&amp;1<br>\end{matrix}\right]<br>$$<br>So this is View Transformation Matrix.</p></li></ol></li><li><p>Summery </p><ol start="0"><li>Transform objects together with the camera</li><li>Until camera’s at the origin, up at $Y$, look at $-Z$</li></ol></li><li><p>Also known as Model/View Transformation</p></li></ol></li></ol></li><li><p>Projection transformation: 3D to 2D</p><p>We can identity orthographic projection and perspective projection by the property: Orthographic projection don’t change parallel lines to intersect, but perspective will.  For example, I know the truth, but why are pigeons so big. </p><ol start="0"><li><p>Orthographic projection</p><ol start="0"><li><p>A simple way of at orgin, looking at $-Z$, up at $Y$ ; <font color="red">Drop $Z$ coordinate</font> and Translate and scale the resultig rectangle to $[-1,1]^2$. （In fact ,the “<em>CGPP</em>“ have the similar descaibe in Chapter 3. But it illustrate the “<em>Durer Image</em>“）;</p></li><li><p>But in general, we want to map a cubioid $[l,r]\times[b,t]\times[f,n]$ to the “canonical（正则、规范，标准）” cube in $\mathbb R^3$ or $[-1,1]^3$;</p></li><li><p>Slightly different orders, we center cuboid by translating then scale into “canonical” cube;</p></li><li><p>And we can get the transformation matrix by （we use right-hand system, if use left-hand system, the forth cow of the second matrix are positive）<br>$$<br>M_{ortho}=<br>\left[\begin{matrix}<br>\frac 2{r-l}&amp;0&amp;0&amp;0<br>\\<br>0&amp;\frac 2{t-b}&amp;0&amp;0<br>\\<br>0&amp;0&amp;\frac 2{n-f}&amp;0<br>\\<br>0&amp;0&amp;0&amp;1<br>\end{matrix}\right]<br>\left[\begin{matrix}<br>1&amp;0&amp;0&amp;-\frac {r+l}2<br>\\<br>0&amp;1&amp;0&amp;-\frac {t+b}2<br>\\<br>0&amp;0&amp;1&amp;-\frac {n+f}2<br>\\<br>0&amp;0&amp;0&amp;1<br>\end{matrix}\right]<br>$$</p></li></ol></li></ol></li></ol><ol><li><p>Perspective（透视） projection</p><ol start="0"><li><p>Some preview</p><ol start="0"><li>It is the most common in CG, art, visual system and etc. </li><li>The further objects are smaller</li><li>And parallel lines not parallel, it will converge to single point</li></ol></li><li><p>How to do perspective projection </p><ol start="0"><li><p>First “squish” the frustum into a cuboid （$n\rightarrow n,f\rightarrow f$）（$M_{persp\rightarrow ortho}$）（In fact, if you get some Topology knowledge, you will easy to understand it,  just see the  $persp$ </p><p>homeomorphic $ortho$）</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/pers_to_ortho.png" alt="pers_to_ortho" style="zoom:50%;"></li><li><p>Do orthographic projection （Because we have known the $M_{ortho}$）</p><ol start="0"><li><p>In order to find a transformation, we should find the relationship betwwn transformed points $（x’,y’,z’）$ and the original points $（x,y,z）$</p> <img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/similar.png" alt="similar" style="zoom:50%;"><p> And acording to the similar triangle we will get<br> $$<br> y’=\frac nz y，x’=\frac nz x<br> $$<br> So in homogeneous coordinatse<br> $$<br> \left(\begin{matrix}x\\y\\z\\1\end{matrix}\right)\rightarrow<br> \left(\begin{matrix}\frac {nx}z\\\frac {ny}z\\unkown\\1\end{matrix}\right)==<br>\left(\begin{matrix} nx\\ ny\\unkown\\z\end{matrix}\right)<br> $$</p></li><li><p>So the “squish” projection （ persp to ortho） does this<br>$$<br>M_{persp\rightarrow ortho}^{(4\times 4)}\left(\begin{matrix}x\\y\\z\\1\end{matrix}\right)<br>=\left(\begin{matrix} nx\\ ny\\unkown\\z\end{matrix}\right)<br>$$<br>Already good enought to figure out part of $M_{persp \rightarrow ortho}$, and（By using matrices multyple）<br>$$<br>M_{persp \rightarrow ortho}=<br>\left(\begin{matrix}<br>n     &amp;   0  &amp;    0  &amp;  0<br>\\<br>0     &amp;   n  &amp;    0  &amp;  0<br>\\<br>?     &amp;   ?  &amp;    ?  &amp;  ?<br>\\<br>0     &amp;   0  &amp;    1  &amp;  0<br>\end{matrix}\right)<br>$$</p></li><li><p>Observation: the third row is responsible for $z’$</p><ol start="0"><li><p>Any point on the near plane will not change<br> $$<br> M_{persp\rightarrow ortho}^{(4\times 4)}\left(\begin{matrix}x\\y\\z\\1\end{matrix}\right)<br> =\left(\begin{matrix} nx\\ ny\\unkown\\z\end{matrix}\right)<br> by\space replace \space z \space with \space n\space<br> \left(\begin{matrix}x\\y\\z\\1\end{matrix}\right)\rightarrow<br> \left(\begin{matrix}x\\y\\n\\1\end{matrix}\right)==<br> \left(\begin{matrix} nx\\ ny\\n^2\\n\end{matrix}\right)<br> $$<br> So the third row must be of the form $（0\space 0\space A\space B）$ and<br> $$<br> （0\space 0\space A\space B）<br> \left(\begin{matrix}x\\y\\z\\1\end{matrix}\right)=n^2​<br> $$<br> $n^2$ has nothing to do with $x$ and $y$ . Then we will get the equation $An+B=n^2$</p><p> Any point’s $z$ on the far plane will not change: We will know that<br>$$<br>\left(\begin{matrix}0\\0\\f\\1\end{matrix}\right)\rightarrow\left(\begin{matrix}0\\0\\f\\1\end{matrix}\right)==\left(\begin{matrix}0\\0\\f^2\\f\end{matrix}\right)<br>$$</p><p>Then we will get the equation $Af+B=f^2$ .</p></li><li><p>We will get a linear equations, by Cramer method ,we will solve this equations, and the answer are $A=n+f\space ,\space B=-nf$</p></li><li><p>Finally, every coefficient we will know the matrix $M_{persp\rightarrow ortho}$ </p></li></ol></li></ol></li><li><p>What’s near plane’s $l,r,b,t$ then </p><ol start="0"><li><p>If explicitily specified, good</p></li><li><p>Sometimes perople prefer: vertical <strong>field-of-view</strong> （fov$Y$）and <strong>aspect ratio</strong>（Assume symmetry）</p></li><li><p>How to convert from fov$Y$ and aspect $l,r,b,t$？— Trivial</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/fovY.png" alt="fovY"><br>$$<br>tan\frac {fovY}2=\frac t{|n|},aspect=\frac rt<br>$$</p></li></ol></li></ol></li></ol></li></ol><h2 id="2-Rasterization"><a href="#2-Rasterization" class="headerlink" title="2. Rasterization"></a>2. Rasterization</h2><h3 id="What’s-after-MVP"><a href="#What’s-after-MVP" class="headerlink" title="What’s after MVP?"></a>What’s after <strong>MVP</strong>?</h3><p><strong>M</strong>odel transformation to place objects</p><p><strong>V</strong>iew transformation to place camera</p><p><strong>P</strong>rojection transformation by Orthograpihc projection（cuboid to “canonical” cube $[-1,1]^3$ ）and Perspective projection （ frustum to “ canonical “ cube）</p><ol start="0"><li><p>we should put Canonical Cube to Screen</p><ol start="0"><li><p>What is a screen?</p><ol start="0"><li><p>An array of pixels</p></li><li><p>Size of the array: resolution</p></li><li><p>A typical kind of raster display</p></li></ol></li><li><p>Raster == Screen in German</p><p>Rasterize == drawing onto the screen</p></li><li><p>Pixel（FYI, short for “picture element”）</p><ol start="0"><li><p>For now: A pixel is a little square with uniform color</p></li><li><p>Color is a mixture of （<font color="red">red</font>, <font color="green">green</font>, <font color="blue">blue</font>）</p></li></ol></li><li><p>Defining the screen: Slightly different from the text “Tiger book”</p><ol start="0"><li><p>Pixels’ indices are in the form of $（x,y）$ where both $x$ and $y$ are integers</p></li><li><p>Pixels’ indices are from $（0,0）$ to $（width-1,height-1）$</p></li><li><p>But for every pixel （x,y）, the center of them are at $（x+0.5,y+0.5）$</p></li><li><p>The screen covers range $（0,0）$ to $（width,height）$</p></li><li><p>Irrelevant to $Z$</p></li><li><p>Transform in $xy$ plane: $[-1,1]^2$ to $[0,width]\times [0,height]$, by using viewport transform<br>$$<br>M_{viewport}=<br>\left(\begin{matrix}<br>\frac {width}2     &amp;   0  &amp;    0  &amp;\frac  {width}2<br>\\<br>0     &amp;   \frac {height}2  &amp;    0  &amp;  \frac{height}2<br>\\<br>0    &amp;   0  &amp;   1  &amp;  0<br>\\<br>0     &amp;   0  &amp;    0  &amp;  1<br>\end{matrix}\right)<br>$$</p></li></ol></li></ol></li></ol><h3 id="Rasterizing-Triangles-into-Pixels"><a href="#Rasterizing-Triangles-into-Pixels" class="headerlink" title="Rasterizing Triangles into Pixels"></a>Rasterizing Triangles into Pixels</h3><ol start="0"><li><p>Some Drawing Machine and Different Raster Displays</p><ol start="0"><li><p>CNC sharpie Drawing Machine</p></li><li><p>Oscilloscope（示波器）</p><ol start="0"><li>The principle: Cathode Ray Tube（阴极射线管）</li><li>Televison: Raster Scan to get the image</li><li>And it have some treat: Raster Scan Pattern of Interlaced Display（隔行扫描）</li></ol></li><li><p>Frame Buffer: Memory for a Raster Display</p></li><li><p>Flat Panel Displays</p><ol start="0"><li><p>LCD（Liquid Crystal Display） Pixel</p><p>Principle : </p><ol start="0"><li>block or transmit light by twisting polarization </li><li>Illumination from backlight</li><li>Intermediate intensity levels by partial twist</li></ol></li><li><p>LED（Light emitting diode）</p></li><li><p>Electrophoretic（Electronic ink）Display</p></li></ol></li></ol></li><li><p>Rasterization: Drawing to Raster Displays</p><p><strong>Triangles - Fundamental Shape Primitives.</strong></p><ol start="0"><li><p>Why Triangles? </p><ol start="0"><li>Most basic polygon —— Break up other polygons</li><li>Unique properties —— Guaranteed to be plannar, well-defined interior and well-defined method for interpolation values at vertices over triangle （Barycentric interpolation）</li></ol></li><li><p>What Pixel Values Approximate a Triangle?</p><p>Input position of triangle vertices projected on screen, how to outpoot?</p><ol start="0"><li><p>Sampling a Function: Evaluating a function at a point is sampling. We can discretize a function by sampling</p><pre class="line-numbers language-c"><code class="language-c"> <span class="token keyword">for</span> （<span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>xmax<span class="token punctuation">;</span>x<span class="token operator">++</span>）      output<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span> f（x）<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li><li><p>Samplng is a core idea in graphics: We sample time（1D）, area（2D）, direction（2D）,volume（3D）and etc.</p><ol start="2"><li><p>Sample if Each Pixel Center is Inside Triangle - Define binary function </p><pre class="line-numbers language-c"><code class="language-c">bool inside（tri t<span class="token punctuation">,</span> Point p）<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//struct Point {</span><span class="token comment" spellcheck="true">//    Elementtype x, y;</span><span class="token comment" spellcheck="true">//};</span><span class="token comment" spellcheck="true">//x,y not necessarily integers</span><span class="token comment" spellcheck="true">//if Point p（x,y） in the t,return true</span><span class="token comment" spellcheck="true">//else return false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Rasterization = Sampling A 2D Indicator Function（The main code as follow）</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">for</span> （<span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> xmax<span class="token punctuation">;</span> <span class="token operator">++</span>x）    <span class="token keyword">for</span>（<span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y<span class="token operator">&lt;</span> ymax<span class="token punctuation">;</span> <span class="token operator">++</span>y）        image<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>inside（tri<span class="token punctuation">,</span>                           x <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span>                           y <span class="token operator">+</span> <span class="token number">0.5</span>）<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Another way to judge a point whether in the triangle: Use <strong>Cross Product</strong>:</p><p>Suppose $3$ points $A,B,C$,  the point $Q$ we want to judge</p><p>We can get $3$ vectors $\vec {AQ},\vec {BQ},\vec {CQ}$</p><p>If all the $\vec {AB}\times \vec {AQ},\vec {CA} \times \vec {CQ},\vec {BC}\times \vec {BQ}$  are positive or negative, the point in the triangle.</p><p>Else not in the triangle.</p></li><li><p>Edge Cases : We omit it. But if you want to make some special check, you should treatment it special.</p></li><li><p>We can take some method to decrease some calculate like bounding box and etc. </p></li></ol></li></ol></li><li><p>Rasterization on Real Displays</p><ol start="0"><li><p>Example: Real LCD Screen Pixels （Closeup）（The second called Bayer Pattern）</p></li><li><p>Real_LCD</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/Real_LCD(closeup).png" style="zoom:50%;"><p>We can see that the <font color="green">green</font> part more than <font color="red">red</font> and <font color="blue">blue</font>, because of  the more sensitive to green for our eyes.</p></li><li><p>Other Display Methods</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/other_method.png" alt="other_method" style="zoom:50%;"></li></ol></li><li><p>Assume Display Pixels Emit Square of Light</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/LCD_pixel.png" alt="LCD_pixel" style="zoom:50%;"></li></ol><h3 id="Antialiasing"><a href="#Antialiasing" class="headerlink" title="Antialiasing"></a>Antialiasing</h3><ol start="0"><li><p>Sampling theory</p><p>   <strong>Sampling is Ubiquitous in CG</strong></p><ol start="0"><li><p>Rasterization = Sample 2D Positions</p></li><li><p>Photograph = Sample Image Sensor Plane</p></li><li><p>Video = Sample Time</p></li></ol><p>   <strong>Sampling <font color="red">Artifacts</font>（Erros / Mistakes / Inaccuracies ） in CG</strong></p><ol start="0"><li><p>Jaggies （Stair case Pattern）</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/Jaggies.png" alt="Jaggies" style="zoom:50%;"></li><li><p>Moire Patterns in Imaging</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/Moire_Patterns.png" alt="Moire_Patterns" style="zoom:50%;"></li><li><p>Wagon Wheel Illusion （False Motion）</p></li><li><p>And Many More</p><p>Behind the Aliasing Artifacts: </p></li></ol><p>   <strong>Signals are <font color="blue">changing too fast</font> （ high frequency ）but <font color="red"> sampled too slowly</font>.</strong></p></li><li><p>Antialiasing Idea: Blurring （Pre - Filtering） Before Sampling</p><ol start="0"><li>Rasterization: Point Sampling in Space</li></ol><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/tri_sample.png" alt="tri_sample" style="zoom:67%;"><p>This is <strong>Regular Samping</strong>, Note jaggies in rasterized triangle where pixel value are <strong>pure red or white</strong></p><ol><li><p>Pre-Filter</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/pre_filter_tri_sample.png" alt="pre_filter_tri_sample" style="zoom:67%;"><p>This is *<em>Antialiased Sampling *</em>. Note antialiased edges in rasterized triangle wher pixel values take intermediate values.</p></li><li><p>But we can’t sample then filter will lead to “<em>Blurred Aliasing</em>“</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/sample_then_filter.png" alt="sample_then_filter" style="zoom:50%;"><p>The first is sample then filter, the second is right.</p><ol start="0"><li><p>Why undersampling introduces aliasing and why pre-filtering then sampling can do antialiasing?</p><ol start="0"><li><p>Frequency Domain</p><ol start="0"><li><p>$sin\omega x$ and $cos\omega x$： well-know periodic functions, the periodic, $f$ is frequency.<br>$$<br>f=\frac \omega {2\pi}<br>$$</p></li><li><p>Fourier Series Expansion: For every periodic functions, it can be written as a linear combination of sine and cosine.</p></li><li><p>Fourier Transform: spatial domain function $f（x）$ can be transform by Fourier transform $F（\omega）=\int_{-\infty}^{\infty}f（x）e^{-2\pi i\omega x}dx$ to frequency domain $F（\omega）$, and according to Euler Formular $e^{ix}=cosx+isinx$.</p></li><li><p>Inverse transform: From $F（\omega）$ by  $f（x）=\int_{-\infty}^{\infty}F（\omega）e^{2\pi i \omega x}d\omega$ to $f（x）$</p></li></ol></li><li><p>Sampling emulation: Higher Frequencies Need Faster Sampling </p><p>Undersampling Creates Frequency Aliases: High-frequency signal is insufficiently sampled: samples erroneously appear to be from a low-frequency signal.</p><p>Two frequencies that are indistinguishable at a given sampling  $f$ are called “aliases”（混叠）</p></li><li><p>Filtering = Getting rid of certain frequency contents</p><ol start="0"><li><p>Example: Visualizing Image Frequency Content</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/Fourio_Trans.png" alt="Fourio_Trans"></p><p>We can know that the lowest frequency information are gathered in the center of the image, and the brighter the color, the more information there is. So this image has many low frequency information. The frequency around are the detail of the image.（Many natural picture like this.）</p></li><li><p>Filter out Low Frequencies Only（Edges）</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/filt_low_f.png" alt="filt_low_f"></p></li><li><p>Filter Out High Frequencies（Blur）</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/filt_high_f.png" alt="filt_high_f"></p></li><li><p>Filter Out Low and High Frequencies</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/filt_high_and_low.png" alt="filt_high_and_low"></p></li></ol></li><li><p>Filtering = Convolution = Average</p><p>In a word, convolution can see it as <strong>the “<em>average</em>“ in frequency domain</strong> and the average can see it as <strong>the average in spatial domain</strong></p><ol start="0"><li><p>Convolution</p><p>Given a signal sequence $S=[1,3,5,3,7,1,3,8,6,4$ , and a filter $F=[\frac 14,\frac 12,\frac 14]$, the result of the convolution about signal and filter can get a sequence $R$. The $i-th$ element in the result sequence can be caculate by<br>$$<br>R[i]=S[i-1]\times F[1]+S[i]\times F[2]+S[i+1]\times F[3]<br>$$<br>The procesion of it is convolution.</p></li><li><p>Convolution Theorem: Convolution in the spatial domain is equal to mulitiplication in the frequency domain , and vice versa</p><ol start="0"><li><p>Filter by convolution in the spatial domain</p></li><li><p>Thansform to frequency domain（Fourier tansform）, multiply by Fourier transform of convolution kernel and Transform back to spatial domain（Inverse Fourier）</p></li><li><p>Example: </p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/convolution.png" alt="convolution"></p></li><li><p>Box Filter = “Low Pass Filter”<br>$$<br>\frac 19 \left[ \begin{matrix}1&amp;1&amp;1\\1&amp;1&amp;1\\1&amp;1&amp;1\end{matrix}\right]<br>$$</p></li><li><p>Wider Filter Kernel = Lower Frequencies</p></li></ol></li></ol></li><li><p>Sampling = Repeating Frequency Contents</p></li><li><p>Aliasing = Mixed Frequency Contents</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/alias.png" alt="alias" style="zoom:67%;"></li></ol></li></ol></li><li><p>Reduce Aliasing Error</p><ol start="0"><li><p>Increase sampling rate</p><ol start="0"><li><p>Essentially increasing the distance Essentially increasing the distance between replicas in the Fourier domain</p></li><li><p>Higher resolution displays, sensors, framebuffers…</p></li><li><p>But: costly &amp; may need very high resolution</p></li></ol></li><li><p>Antialiasing: making Fourier contents “narrower” brfore repeating</p><ol start="0"><li><p>Antialiasing = Limiting then repeating </p></li><li><p>Antialiasing By Averaging Values in Pixel Area</p><p>Solution: <font color="red">Convolve</font> $f（x,y）$ by a $1$-pixel box-blur, <font color="red">Then sample</font> at every pixel’s center</p></li><li><p>Example: Antialiasing by Computing Average Pixel Value</p><p>In rasterizing one triangle, the average value inside a pixel area of $f（x,y）= $inside（triangle,point） is equal to the area of the pixel covered by the triangle.</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/an_triangle.png" alt="an_triangle"></p></li></ol></li><li><p>Antialiasing By Supersampling （MSAA）</p><ol start="0"><li><p>Supersampling</p><p>Approximate the effect of the 1-pixel box filter by sampling multiple locations within a pixel and averaging their values</p></li><li><p>Example</p><ol start="0"><li><p>Beginning</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/begin.png" alt="begin" style="zoom:33%;"></li><li><p>First Step: Take $N\times N$ samples in each pixel</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/first.png" alt="first" style="zoom:50%;"></li><li><p>Second Step: Average the $N\times N$ samples “inside” each pixel</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/second.png" alt="second" style="zoom:50%;"></li><li><p>then</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/last.png" alt="last" style="zoom:50%;"></li><li><p>Result: This is the corresponding signal emitted by the display, but MSAA doesn’t increase the dpi</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/Result.png" alt="Result" style="zoom:50%;"></li></ol></li><li><p>No free lunch!</p><p>What’s the cost of MSAA? More calculate and more buffer.</p></li><li><p>Milestones</p><ol start="0"><li><p>FXAA（Fast Approximate AA）（快速近似反走样）</p><p>No relationship with add more sample, it is the post-processing of the image. It changes the edge with jaggies to non-jaggy edge . It is quickly.</p></li><li><p>TAA（Temporal AA） /tem’pərəl/ </p><p>To get the post frame information and change some of this frame’s value.</p></li></ol></li><li><p>Super resolution（超分辨率） / super sampling </p><ol start="0"><li>From low resolution to high resolution</li><li>Essentially still “not enough samples” problem</li><li>DLSS（Deep Learning Super Sampling）</li></ol></li></ol></li></ol></li></ol></li></ol><h3 id="Visibility-occlusion-Z-Buffer"><a href="#Visibility-occlusion-Z-Buffer" class="headerlink" title="Visibility / occlusion - Z-Buffer"></a>Visibility / occlusion - Z-Buffer</h3><ol start="0"><li><p>Painter’s Algorithm - Inspired by how painters paint.</p><p>Paint from back to front, <font color="red">overwrite</font> in the framebuffer. It requires sorting in depth （$O(nlogn)$） for n triangles. But it can have unresolvable depth order, for example</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/paiting_exception.png" alt="paiting_exception" style="zoom:67%;"></li></ol><ol><li><p>Z-Buffer- This is the algorithm that eventually won,</p><ol start="0"><li><p>Idea:</p><ol start="0"><li>Store current min.z-value <font color="red">for each sample（pixel）</font></li><li>Needs an additional buffer for depth values<ol start="0"><li>Frame buffer stores color values</li><li>Depth buffer（z-buffer）stores depth</li></ol></li></ol></li><li><p>IMPORTANT: </p><p>For simplicity we suppose, <font color="red">z is always positive</font>（smaller z$\rightarrow$closer, larger z$\rightarrow$further）</p></li><li><p>Example</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/z_buffer_eg.png" alt="z_buffer_eg" style="zoom:67%;"></li><li><p>Pseudocode</p><p>Initialize depth buffer to $\infty$, and during rasterization</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span>each triangle T<span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>each <span class="token function">sample</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> in T<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>z <span class="token operator">&lt;</span> zbuffer<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// closest sample so far</span>            framebuffer<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> rgb<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// update color</span>            zbuffer<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> z<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// update depth</span>        <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">// do nothing, this sample is occluded</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Complexity</p><ol start="0"><li>$O(n)$ for $n$ triangles (assuming constant coverage).</li><li>“Sort” $n$ triangles in linear times, because we just find the minimum value, </li></ol></li><li><p>Triangles in different orders, it will have same appearance.</p></li><li><p>Most important visibility algorithm - Implemented in hardware for all GPUs</p></li></ol></li></ol><h2 id="3-Shading"><a href="#3-Shading" class="headerlink" title="3. Shading"></a>3. Shading</h2><p>The <strong>definition</strong> of the shading in Merriam-Webster Dictionary is that <strong>the darkening or coloring of an illustration or diagram with parallel lines or a block of color</strong>. </p><p>In this course, the process of <font color="red">applying a meterial</font> to an object is shading </p><h3 id="A-Simple-Shading-Model-Blinn-Phong-Reflectance-Model"><a href="#A-Simple-Shading-Model-Blinn-Phong-Reflectance-Model" class="headerlink" title="A Simple Shading Model - Blinn-Phong Reflectance Model"></a>A Simple Shading Model - Blinn-Phong Reflectance Model</h3><ol start="0"><li><p>Perceptual Observation</p></li><li><p>Shading in Local: </p><p>Compute light reflected toward camera at a specific <font color="red">shading point</font></p><ol start="0"><li><p>Inputs:</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/shang_poit_im.png" alt="shang_poit_im" style="zoom: 67%;"><ol start="0"><li>Viewer direction $\vec v$</li><li>Surface normal $\vec n$</li><li>Light directions $\vec L_i$</li><li>Surface parameters such as color, shininess and etc</li></ol></li><li><p><font color="red">No shadows</font> will be generated!（ <strong>shading  $\neq$ shadow</strong> ）</p></li><li><p>Diffuse Reflection（Blinn-Phong）</p><ol start="0"><li><p>Light is scattered uniformly in all directions - Surface color is the same for all viewing directions</p></li><li><p>Lambert’s cosine law</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/Lamberts_cosine_law.png" alt="Lamberts_cosine_law" style="zoom: 50%;"></li><li><p>Light Falloff</p><p>Assume there is a loop with $r=1$,  the light source in the center, then the intensity here is $I$.</p><p>If when suppose the distance of the center and a point is $r$, then the intensity here is<br>$$<br>\frac I{r^2}<br>$$</p></li><li><p>Lambertian（Diffuse）Shading</p><p>Shading independent of view direction, we will have<br>$$<br>L_d=k_d\frac I{r^2} max(0,\vec n \cdot \vec l)<br>$$<br>where </p><p>​    $L_d$ is diffusely reflected light</p><p>​    $k_d$ is diffuse coefficient（color）</p><p>​    $max(0,\vec n \cdot \vec l)$ is energy received by the shading point, 0 can avoid the negative value</p></li></ol></li><li><p>Specular Term（Blinn-Phong）</p><ol start="0"><li><p>Intensity <font color="red">depends</font> on view direction - Bright near mirror reflection direction</p></li><li><p>$V$ close to mirror direction == <font color="red"><strong>half vector</strong> near normal</font></p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/sular_term.png" alt="sular_term" style="zoom:50%;"><p>Measure “near” by dot product of unit vectors, and we get this vector<br>$$<br>\vec h = bisector(\vec v, \vec l)=\frac{\vec v + \vec l}{||\vec v + \vec l||}\\<br>L_s=k_s\frac I{r^2}max(0,\vec n \cdot\vec h)^p<br>$$<br>Where </p><p>​    $L_s$ is secularly reflected light</p><p>​    $k_s$ is specular coefficient</p><p>Be care for that $max(0,\vec n \cdot\vec h)^p$ have pow $p$, because the cosine function have a property that increasing p narrows the refection lobe.</p></li></ol></li><li><p>Ambient Term</p><p>Shading that does not depend on anything</p><ol start="0"><li><p>Add constant color to account for disregarded illumination and fill in black shadows</p></li><li><p>This is approximate / fake<br>$$<br>L_a=k_aI_a<br>$$<br>Where </p><p>​    $L_a$ is reflected ambient light </p><p>​    $k_a$ is ambient coefficient</p></li></ol></li><li><p>Blinn-Phong Reflection Model</p><p><img src="C:%5CUsers%5CY%5CDesktop%5Cblog_pic%5COOCG%5CB_P_M.png" alt="B_P_M"><br>$$<br>L=L_a+L_d+L_s<br>=k_aI_a+L_d=k_d\frac I{r^2} max(0,\vec n \cdot \vec l)+k_s\frac I{r^2}max(0,\vec n \cdot\vec h)^p<br>$$</p></li></ol></li></ol><h3 id="Shading-Frequencies"><a href="#Shading-Frequencies" class="headerlink" title="Shading Frequencies"></a>Shading Frequencies</h3><ol start="0"><li><p>Shade each triangle（<strong>Flat</strong> shading）</p><ol start="0"><li>Triangle face is flat - one normal vector</li><li>Not good for smooth surfaces</li></ol></li><li><p>Shade each vertex（<strong>Gouraud</strong> shading）</p><ol start="0"><li><font color="red">Interpolate</font> colors from vertices across triangle</li><li>Each vertex has a normal vector</li></ol></li><li><p>Shade each pixel（Phong shading）</p><ol start="0"><li>Interpolate normal vectors across each triangle</li><li>Compute full shading model at each pixel </li><li><font color="red">Not the <strong>Blinn-Phong Reflectance Model</strong></font></li></ol></li><li><p>Defining Per-Vertex Normal Vectors</p><ol start="0"><li><p>Best to get vertex normals from the underlying geometry.</p></li><li><p>Otherwise have to infer vertex normals from triangle faces, such like<br>$$<br>N_v=\frac {\sum _iN_i}{||\sum_iN_i||}<br>$$</p><img src="C:\Users\Y\Desktop\blog_pic\OOCG\vertex_normal.png" alt="vertex_normal" style="zoom:50%;"></li><li><p><font color="red">Barycentric interpolation</font> of vertex normals</p><img src="C:\Users\Y\Desktop\blog_pic\OOCG\BC_VP.png" alt="BC_VP" style="zoom:50%;"></li><li><p>Don’t forget to <font color="red">normalize</font> the interpolated directions</p></li></ol></li></ol><h3 id="Barycentric-Coordinates-Interpolation-Across-Triangles"><a href="#Barycentric-Coordinates-Interpolation-Across-Triangles" class="headerlink" title="Barycentric Coordinates - Interpolation Across Triangles"></a>Barycentric Coordinates - Interpolation Across Triangles</h3><ol start="0"><li><p>Some Problems</p><ol start="0"><li><p>Why do we want to inerpolate</p><p>Specify values <strong>at vertices</strong> and Obtain smoothly varying values <strong>across triangles</strong></p></li><li><p>Wahat do we want to interpolate</p><p>Texture coordinates, colors, normal vectors. …</p></li><li><p>How do we interpolation</p></li></ol></li><li><p>Barycentric Coordinates</p><p>A coordinate system for triangles $(\alpha, \beta,\gamma)$. For any triangle $ABC$ , assume there is a point $p(x,y)$, then we will get this equation（<font color="red"><strong>Inside the triangle if all three condinates are non-negative</strong></font>）<br>$$<br>(x,y)=\alpha A+\beta B+ \gamma C\\<br>\alpha +\beta +\gamma = 1<br>$$<br>And in the formula, we can get follows accoding to the picture</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/B_C_T_T.png" alt="B_C_T_T" style="zoom: 33%;"><p>Then<br>$$<br>\alpha =\frac {A_A}{A_A+A_B+A_C}<br>\\<br>\beta =\frac {A_B}{A_A+A_B+A_C}<br>\\<br>\gamma=\frac {A_C}{A_A+A_B+A_C}<br>$$</p></li><li><p>Barycentric Coordinates：$\alpha =\beta =\gamma = \frac 13$</p></li><li><p>Barycentric Coordinates： Fomulas<br>$$<br>\alpha=\frac{-(x-x_B)(y_C-y_B)+(y-y_B)(x_C-x_B)}{-(x_A-x_B)(y_C-y_B)+(y_A-y_B)(x_C-x_B)}<br>\\<br>\beta=\frac{-(x-x_C)(y_A-y_C)+(y-y_C)(x_A-x_C)}{-(x_B-x_C)(y_A-y_C)+(y_B-y_C)(x_A-x_C)}<br>\\<br>\gamma=1-\alpha -\beta<br>$$</p></li><li><p>Using interpolate values at vertices<br>$$<br>V=\alpha V_A+\beta V_B+\gamma V_C<br>$$<br>where $V_A,V_B,V_C$ can be positions, texture coordinates, color, normal, depth, material attributes…</p><p>But <strong>barycentric coordinates are not invariant under projection!</strong></p></li></ol><h3 id="Graphics-（Real-time-Rendering）Pipeline"><a href="#Graphics-（Real-time-Rendering）Pipeline" class="headerlink" title="Graphics （Real-time Rendering）Pipeline"></a>Graphics （Real-time Rendering）Pipeline</h3><p>A picture can conclude it briefly。</p><p><img src="C:%5CUsers%5CY%5CDesktop%5Cblog_pic%5COOCG%5Cpipeline_CG.png" alt="pipeline_CG"></p><p>Shader Programs</p><ol start="0"><li><p>Program vertex and fragment processing stages</p></li><li><p>Describe operation on a single vertex（or fragment）</p></li><li><p>Example GLSL fragment shader program</p><pre class="line-numbers language-c"><code class="language-c">uniform sampler2D myTexture<span class="token punctuation">;</span>uniform vec3 lightDir<span class="token punctuation">;</span>varying vec2 uv<span class="token punctuation">;</span>varying vec3 norm<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">diffuseShader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    vec3 kd<span class="token punctuation">;</span>    kd <span class="token operator">=</span> <span class="token function">texture2d</span><span class="token punctuation">(</span>myTexture<span class="token punctuation">,</span> uv<span class="token punctuation">)</span><span class="token punctuation">;</span>    kd <span class="token operator">*</span><span class="token operator">=</span> <span class="token function">clamp</span><span class="token punctuation">(</span><span class="token function">dot</span><span class="token punctuation">(</span><span class="token operator">-</span>lightDir<span class="token punctuation">,</span> norm<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gl_FragColor <span class="token operator">=</span> <span class="token function">vec4</span><span class="token punctuation">(</span>kd<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Some tips</p><ol start="0"><li>Shader function executes once per fragment</li><li>Output color of surface at the current fragements screen sample position</li><li>This shader perform a texture lookup to abtain the surface’s material color at this point, then performs a diffuse lighting calculation</li></ol></li></ol><h3 id="Texture-Mapping"><a href="#Texture-Mapping" class="headerlink" title="Texture Mapping"></a>Texture Mapping</h3><ol start="0"><li><p>Surfaces are 2D</p><p>Surface lives in 3D world space, but every 3D surface point also has a place where it goes in the 2D image（<strong>Texture</strong>）</p></li><li><p>Visualization of Texture Coordinates</p><p>Each triangle vertex is assigned a texture coordinate $（u,v）,u,v\in [0,1]$</p></li><li><p>Apllying Textures</p><ol start="0"><li><p>Simple Texture Mapping - Diffuse Color</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">for</span> each raterized screen <span class="token function">sample</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">//Usually a pixel's center</span>    <span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token operator">=</span> evaluate texture coordinate <span class="token function">at</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//using barycentric coordinates</span>     texcolor <span class="token operator">=</span> texture<span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>     set sample's color to texcolor<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//Usually the diffuse albedo Kd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Texture Magnification</p><ol start="0"><li><p>Easy Case</p><p>Generally don’t want this — insufficient texture resolution, a pixel on a texture — a texel（纹理元素), and look at the picture</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/T_M_EG.png" alt="T_M_EG"></p></li><li><p>Bilinear Interpolation</p><p>If we want to sample textture value $f(x,y)$ at a point. and there are some points ${P_{blacki}}$ indicate texture sample locations.</p><p>We can take 4 nearest sample locations, with texture valus as labeled ${u_{0i}}$, and fractional offsets $(s,t)$ as $(distance(u_{00},x),distance(u_{00},y))$</p><p><strong>Linear interpolation（1D）</strong><br>$$<br>lerp(x,v_0,v_1)=v_0+x(v_1-v_0)<br>$$<br><strong>Two helper lerps</strong><br>$$<br>u_0=lerp(s,u_{00},u_{10})<br>\\<br>u_1=lerp(s,u_{01},u_{11})<br>$$<br><strong>Find vertical lerp, to get result:</strong><br>$$<br>f(x,y)=lep(t,u_0,u_1)<br>$$<br>Bilinear interpolation usually gives pretty good results at reasonable costs.</p></li><li><p>Hard Case</p><p>![hard_case_in _tm](<a href="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/hard_case_in" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/hard_case_in</a> _tm.png)</p><ol start="0"><li><p>Screen Pixel “Foortprint” in Texture</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/F_i_T_sp.png" alt="F_i_T_sp" style="zoom:50%;"></li><li><p>Will supersampling Do Antialiasing? </p><p><strong>Yes! But costly</strong></p><ol start="0"><li>When highly minified, many texels in pixel footprint</li><li>Signal frequency too large in a pixel</li><li>Need even higher sampling frequency</li></ol></li><li><p>So what if we don’t sample?</p><p> Just need to <strong>get the average value within a range</strong>！</p></li></ol></li><li><p>Mipmap</p><ol start="0"><li><p>Mipmap - Allowing （<font color="red">fast, approx., square</font>）range queries</p><p>“Mip” comes from the Latin “Multum in parvo”, meaning a multitude in a small space, for example</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/mipmap.png" alt="mipmap"></p><p>and we will get “Mip hierarchy（level = D）”</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/Mip_hierarchy.png" alt="Mip_hierarchy"></p><p>The buffer we need is about 1.33 times than before.</p></li><li><p>Computing Mipmap Level D</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/compure_mipmap.png" alt="compure_mipmap"></p><p>then </p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/mip_map_step_2.png" alt="mip_map_step_2"></p><p>We will get<br>$$<br>D=log_2L\\L=max\left(\sqrt{(\frac {du}{dx})^2+(\frac {dv}{dx})^2}, \sqrt{(\frac {du}{dy})^2+(\frac {dv}{dy})^2}\right)<br>$$<br>and then use square approximate the origin area</p><p><img src="C:%5CUsers%5CY%5CDesktop%5Cblog_pic%5COOCG%5Capproximate_the_area.png" alt="approximate_the_area"></p></li><li><p><strong>Trilinear Interpolation = Bilinear result（in the same level）+Bilinear result（In the adjacent level）</strong></p></li><li><p>Mipmap Limitations - Overblur </p><p>Anisotropic Filtering: Ripmaps and summed area tables</p><ol start="0"><li>Can look up axis-aligned rectangulare zones</li><li>Diagonal footprintfs still a problem</li></ol><p>EWA filtering</p><ol start="0"><li>Use multiple lookups</li><li>Weighted average</li><li>Mipmap hierarchy still helps</li><li>Can handle irregular footprints</li></ol></li></ol></li></ol></li></ol></li></ol><h3 id="Applications-of-textures"><a href="#Applications-of-textures" class="headerlink" title="Applications of textures"></a>Applications of textures</h3><p>In modern GPUs, texture = memory + range query（Filtering）. And General method to bring data to fragment calculations.</p><p>So it have many usages</p><ol start="0"><li><p>Environment lighting: Spherical Map then Cube Map</p></li><li><p>Store microgeometry: <strong>Fake</strong> the detailed gemoetry by bump / normal mapping</p><ol start="0"><li><p>Bump Mapping: Adding surface detail without adding more triangles</p><p>Note that this is in <strong>local coordinate!</strong> </p><ol start="0"><li><p>Perturb surface normal per pixel（For shading computations only）</p><p>Original surface normal $n(p)=(0,1)$</p><p>Derivative at $p$ is $dp=c\times [ h(p+1)-h(p)]$</p><p>Pertubed normal is then $n(p)=(-dp,1).normalized()$</p></li><li><p>In 3D</p><p>Original surface normal $n(p)=(0,0,1)$</p><p>Derivative at $p$ are $\frac {dp}{du}=c_1\times [ h(u+1)-h(u)]$; $\frac {dp}{dv}=c_1\times [ h(v+1)-h(v)]$</p><p>Pertubed normal is then $n(p)=(-\frac {dp}{du},-\frac {dp}{dv},1).normalized()$</p></li><li><p>“Height shift” per texel defined by a texture</p></li><li><p>Modify normal vector</p></li></ol></li><li><p>Displacement mapping - a more advanced approach</p><p>Uses the same texture as in bumping mapping</p><p>Acturally move the vertices</p></li></ol></li><li><p>Procedural textures</p></li><li><p>Solid modeling</p><p>Example: 3D Procedural Nosie + Solid Modeling (Perlin Noise)</p></li><li><p>Volume rendering </p></li><li><p>Provide Precomputed Shading</p></li><li><p>And etc.</p></li></ol><h2 id="4-Geometry"><a href="#4-Geometry" class="headerlink" title="4. Geometry"></a>4. Geometry</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><ol start="0"><li><p>Examples of Geometry</p></li><li><p>Rresent Geometry</p><ol start="0"><li><p>Implicit: Based on lassifying points</p><ol start="0"><li><p>method: </p><ol start="0"><li><p>Algebraic surfaces,</p></li><li><p>Level sets</p><ol start="0"><li>Closed-form equations are hard to describe complex shapes </li><li>Alternative: store a grid of values approximating function</li><li>Surface is found where interpolated values equal zero</li><li>Provides much more explicit control over shape (like a texture)</li></ol></li><li><p>Distance functions</p><p>Giving minimum distance （could be distance） from anywhere to object</p></li><li><p>Constructive Solid Geometry</p><p>Bool operate among some geometry.</p></li><li><p>Fractals（分形）</p></li><li><p>and etc</p></li></ol></li><li><p>Points satisfy some specified relationshp, example $x^2+y^2+z^2=1$ is a ball. More generally, $f(x,y,z)=0$</p></li><li><p>Disadvantage is sampling can be hard</p></li><li><p>Advantage is easy to judge a point inside/outside </p></li></ol></li><li><p>Explicit: All points are <strong>given directly</strong> or <strong>via parameter mapping</strong></p><ol start="0"><li><p>method: </p><ol start="0"><li><p>point cloud: Easiest representation: list of points $(x,y,z)$, it can easily represent any kind of geometry. It usually useful for large datasets, often converted into polygon mesh and difficult to draw in undersampled regions.</p></li><li><p>polygon mesh: Store vertices &amp; polygons （often triangles or quads）. It is easier to do processing / simulation, adaptive sampling, more complicated data structures. Perhaps most common representation in graphic.</p><p>The Wavefront Object File (.obj) Format, a commonly used in Graphics research.  Just a text file that specifies vertices, normals, texture coordinates and their connectivities. </p></li><li><p>subdivision, NURBS </p></li><li><p>and etc</p></li></ol></li><li><p>Example: $f: \mathbb R^2 \rightarrow \mathbb R^3；(u,v)\mapsto (x,y,z) $</p></li><li><p>Disadvantage is hard to judge a point inside/outside</p></li><li><p>Advantage is sampling is easy</p></li></ol></li><li><p>Each choice best suited to a different task / type of geometry</p></li><li><p>Best Representation Depends on the Task</p></li></ol></li><li><p>Implicit Representations</p><ol start="0"><li>Pro<ol start="0"><li>compact description （ such like a function）</li><li>certain queries easy （inside object, distance to surface）</li><li>good for ray-to-surface intersection（more later）</li><li>for simple shapes, exact description / no sampling error</li><li>easy to handle changes in topology (e.g. fluid)</li></ol></li><li>Cons<ol start="0"><li>difficult to model complex shapes</li></ol></li></ol></li></ol><h3 id="curves"><a href="#curves" class="headerlink" title="curves"></a>curves</h3><ol start="0"><li><p>Bezier Curves： Defining Cubic Bezier Curve With Tangents</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/Bezier_curv.png" alt="Bezier_curv"></p><p>We can easy know that the beginning and ending is $p_0$ and $p_3$.</p></li><li><p>Evaluating Bezier Curves（de Casteljau Algorithm）</p><p>Consider three points（quadratic Bezier）, insert a point using linear interpolation and recursively.</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/B_C_D_C_ALOG.png" alt="B_C_D_C_ALOG" style="zoom:67%;"><p>and then link the point smoothly and you will get</p><p><img src="C:%5CUsers%5CY%5CDesktop%5Cblog_pic%5COOCG%5Cb_c_c_d_a_r_a.png" alt="b_c_c_d_a_r_a"></p><p>It can be use in more points.</p></li><li><p>Evaluating Bezier Curves Alegbraic Formula</p><ol start="0"><li><p>de Casteljau algorithm gives a pyramid of coefficients</p><img src="C:\Users\Y\Desktop\blog_pic\OOCG\pyirmid_coefficient.png" alt="pyirmid_coefficient" style="zoom:50%;"><p>then we will get some formulas<br>$$<br>b_0^1(t)=(1-t)b_0+tb_1\\<br>b_1^1(t)=(1-t)b_1+tb_2\\<br>b_0^2(t)=(1-t)b_0^1+tn_1^1<br>=(1-t)^2b_0+2t(1-t)b_1+t^2b_2<br>$$<br>It is Bernstei form of a Bezier cureve of order n:<br>$$<br>b^n(t)=b_0^n(t)=\displaystyle\sum_{j=0}^nb_jB_j^n(t)<br>$$<br>where</p><p>​    $b^n(t)$ is bezier curve order $n$（vector polynomial of degree $n$）</p><p>​    $b_j$ is Bezier control points（vector in $\mathbb R^n$）</p><p>​    $B_j^n(t)$ is Bernsterin polynomial（scalar polynomial of degree $n$）</p><p>And Bernstein polynomials<br>$$<br>B_i^n(t)= {n\choose i}t^i(1-t)^{n-i}<br>$$<br>So the Bernstein form of a Bezier curve of order $n$<br>$$<br>b^n(t)=\displaystyle\sum_{j=0}^nb_jB_j^n(t)<br>$$<br>For example, in $\mathbb R^3$ and $n=3$, $b_0=(0,2,3), b_1=(2,3,5), b_2=(6,7,9),b_3=(3,4,5)$</p><p>These points define a Bezier curve in 3D that is a cubic polynomial in $t$<br>$$<br>b^n(t)=b_0(1-t)^3+b_13t(1-t)^2+b_23t^2(1-t)+b_3t^3<br>$$</p></li><li><p>Bernstein Polynomials</p><p><img src="C:%5CUsers%5CY%5CDesktop%5Cblog_pic%5COOCG%5CBernstein_Poly.png" alt="Bernstein_Poly"></p></li><li><p>Properties of Bezier Curves</p><ol start="0"><li><p>Interpolates endpoints</p><p>$b(0)=b_0,b(1)=b_{end}$</p></li><li><p>Tangent to end segments</p><p>$b’(0)=k(b_1-b_0);b’(1)=k(b_{end}-b_{end-1})$</p></li><li><p>Affine transformation property</p><p>Transform curve by transforming contro points</p></li><li><p>Convex hull property</p><p>Curve is within convex hull of control points</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/convex.png" alt="convex"></p></li></ol></li></ol></li><li><p>Piecewise Bezier Curves</p><p>If $n$ is big, it will very hard to control. Instead, chain many low-order Bezier curve.</p><p><strong>Piecewise cubic Bezier</strong> the most common technique</p><ol start="0"><li><p>Continuity</p><p><img src="C:%5CUsers%5CY%5CDesktop%5Cblog_pic%5COOCG%5CTB_CSA.png" alt="TB_CSA"></p><p>$C^0$ continuity: $a_n=b_0$</p><p>$C^1$ continuity:$a_n=b_0=\frac 12(a_{n-1}+b_1)$</p></li></ol></li><li><p>Spline </p><p>A continuous curve constructed so as to pass through a given set of points and have a certain number of continuous derivatives. In short, a curve under control </p></li><li><p>B-splines</p><p>Short for basis splines</p><p>Require more information than Bezier curves</p><p>Satisfy all important properties that Bezier curves have (i.e. superset)</p><p>It’s hard to explain, if you want to know more, you can see my article “清华MOOC图形学基础：几何造型”</p></li></ol><h3 id="surfaces"><a href="#surfaces" class="headerlink" title="surfaces"></a>surfaces</h3><ol start="0"><li><p>Bezier Surfaces</p><ol start="0"><li><p>Bicubic Bezier Surface Patch : Use Bezier Curve in two direction.</p></li><li><p>Evaluating Bezier Surfaces: </p><p>For bicubic Bezier surface patch</p><p>​    Input ：$4\times 4$ control points</p><p>​    Output：2D surface parameterized by $(u,v)$ in $[0,1]^2$</p><p>​    Goal: Evaluate surface position corresponding to $(u,v)$</p><p>​    $(u,v)$-separable application of de Casteljau algorithm</p><ol start="0"><li>Use de Casteljau to evaluate point u on each of the 4 Bezier curves in $u$. This gives 4 control points for the “moving” Bezier curve.</li><li>Use 1D de Casteljau to evaluate point $v$ on the “moving” curve</li></ol></li></ol></li><li><p>Mesh Operations：Geometry Processing</p><ol start="0"><li><p>Mesh subdivision - Increase resolution</p><p> <img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/subdivision_triansge.png" alt="subdivision_triansge"></p><ol start="0"><li><p>Loop Subdivision（Loop is a person）</p><p>Common subdivision rule <font color="red">for triangle meshs</font>.</p><p>First, create more triangles（vertices）, second, tune their positions</p><p>Split each triangle into four, then assign new vertex positions according to weights（New / old vertices updated differently）</p></li><li><p>Loop subdivision - Update</p><p>For new vertices: we name 2 equilateral triangles’ vertices as $A,B,C$ and $A,B,D$. Then, we find a new vertex in $AB$, and the position should follow $\frac 38\times(A+B)+\frac 18\times (C+D)$</p><p>For old vertices: the point in the center of the degree 6 vertices will update to the point which follow the rule ($u$ is the old vertices )$(1-n\times u)\times original_position+u\times neighbor_position_sum$</p></li><li><p><font color="red">Catmull</font>-Clark Subdivision（<font color="red">General Mesh</font>）</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/MesH_CCSUB.png" alt="MesH_CCSUB" style="zoom:50%;"><p>Each subdivision step: Add vertex in each face. Add midpoint on each edge and connect all new vertices. </p><p>After one subdivision: There have 4 extraordinary vertices, and their degrees are 3（new） or 5（old）and there have no non-quad faces.</p><p><strong>FYI</strong>： Catmull-Clark Vertex Update Rules（Quad Mesh）</p><p>Face point：<br>$$<br>f=\frac {v_1+v_2+v_3+v_4}4<br>$$<br>Edge point:<br>$$<br>e=\frac {v_1+v_2+f_1+f_2}4<br>$$<br>Vertex point<br>$$<br>e=\frac {f_1+f_2+f_3+f_4+2(m_1+m_2+m_3+m_4)+4p}{16}<br>$$<br>The convergence of Catmull-Clark Subdivition can overall shape and creases.</p></li></ol></li><li><p>Mesh simplification - Decrease resolution; try to preserve shape / appearance</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/simlication_tiangle.png" alt="simlication_tiangle"></p><ol start="0"><li>Gold：Reduce number of mesh elements while maintaing the overall shape</li><li>Method：Collapsing An Edge - Suppose we simplify a mesh using <font colo="red">edge collapsing</font><ol start="0"><li>Quadric Error Metrices: New vertex ahould minimize its <font color="red">sum of square distance（L2 distance）</font> to previously related triangle planes.</li><li>How ie cost to collapse an edge: computing edge midpoint, measure quadric error</li><li>Simplification via Quadric Error：Iteratively collapse edges<ol start="0"><li>approximate distance to surface as sum of distances to planes containing tricangles.</li><li>iteratively collapse edge <font color="red">with smallest score</font></li><li>use priority queue and some greedy algorithm</li></ol></li></ol></li></ol></li><li><p>Mesh regularization - modify sample distribution to improve quality</p><p><img src="C:%5CUsers%5CY%5CDesktop%5Cblog_pic%5COOCG%5Cmesh_regularization.png" alt="mesh_regularization"></p></li></ol></li><li><p>Shadow mapping </p><ol start="0"><li><p>An Image-space Algorithm</p><ol start="0"><li><p>no knowledge of scene’s gfeometry during shadow computation</p></li><li><p>must deal with aliasing artifacts</p></li></ol></li><li><p>Key idea</p><p>The points Not in shadow must be seen both <strong>by the light</strong> and <strong>by the camera</strong></p></li><li><p>Step 1：Render from Light：Depth image from light source</p></li><li><p>Step 2A：Render from eye：standard image （with depth） from eye </p></li><li><p>Step 2B：Project to light：Project visible points in eye vie back to light source</p><p><font color="red">Note: Reprojected depths from light and eye may not the same, so in some cases, we should BLOCKED it</font></p></li><li><p>The example you can see the BV1X7411F744?t=1323&amp;p=12 beginning with 60’10’’</p></li><li><p>Problem with shadow maps</p><ol start="0"><li><p>Hard shadows（points lights only）</p><p>Be care for that if the light source have volume, it can be generate soft shadows by other methods, but if it is a point ,it can only generate hard shadows</p></li><li><p>Quality depends on shadow map resolution（general problm with image-based techniques）</p></li><li><p>Involves equality comparison of floating point depth values means issues of scale, bias, tolerance</p></li></ol></li></ol></li></ol><h2 id="5-Ray-Tracing"><a href="#5-Ray-Tracing" class="headerlink" title="5. Ray Tracing"></a>5. Ray Tracing</h2><p>Why Ray Tracing?</p><ol start="0"><li><p>Becase rasterization couldn’t handle global effects well, like（soft） shadows and especially when the light bounces more than once</p></li><li><p>Rasterization is fast, but quality is relatively low</p></li><li><p>Ray tracing is accurate, but is <font color="red">very slow</font></p><p>Rasterization：<font color="red">real-time</font>, but ray tracing is <font color="blue">offline</font>, and it will use about 10K CPU core hours to render <font color="red">one frame</font> in production.</p></li></ol><p>Light Rays - Three ideas about light rays</p><ol start="0"><li>Light travels in straight lines（though this is wrong）</li><li>Light rays do not “collide” with each other if they cross（though this is still wrong）</li><li>Light rays travel from the light sources to the eye （but the physics is invariant under path reversal - reciprocity）</li></ol><p>Ray casting</p><ol start="0"><li>Generate an image by casting one ray per pixel</li><li>Check for shadows by sending a ray to the light（《CGPP》chapter3 have some illustrate about it）</li></ol><h3 id="Whitted-Style（Recursive）-Ray-Tracing"><a href="#Whitted-Style（Recursive）-Ray-Tracing" class="headerlink" title="Whitted-Style（Recursive） Ray Tracing"></a>Whitted-Style（Recursive） Ray Tracing</h3><p>A picture <strong>may</strong> illustrate it clearly</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/whited_ray_tracing.png" alt="whited_ray_tracing"></p><ol start="0"><li><p>Ray-Surface Intersection </p><ol start="0"><li><p>Ray Equatiom </p><p> Ray is defined by its origin and a direction vector<br>$$<br>r(t)=O+t\vec d,0\leq t &lt;\infty<br>$$<br>where $r$ is int, along ray, $t$ is “time”, $O$ is origin and $\vec t$ is normalized direction.</p></li><li><p>Ray Intersection With Sphere</p><p>Suppose the equation of sphere is $p:(p-c)^2-R^2=0$， <font color="red">the intersection $p$ must satisfy both equations（ray and sphere）</font></p><p>Solve for intersection $(O+t\vec d - c)^2-R^2=0$, by using the quadratic formula ,we can get<br>$$<br>t=\frac {-b\pm \sqrt{b^2-4ac}}{2a}<br>$$</p></li><li><p>Ray Intersection With Implicit Surface</p><p>Firstly, we get a generay implicit surface $p:f(p)=0$</p><p>then substitute ray equation: $f(O+t\vec d)=0$</p><p>Solve the <strong>real,postive</strong> roots</p></li><li><p>Ray Intersection With Triangle Mesh（Be careful that the genus should be $0$）</p><ol start="0"><li><p>Why?</p><ol start="0"><li>Rendering: visibility, shadows, lighting …</li><li>Geometry: inside/outside test</li></ol></li><li><p>How?</p><ol start="0"><li>Simple idea：just intersect ray with each triangle. But it slow.</li><li>Note：Can have 0, 1 intersections（ignoring multiple intersections）</li></ol><p>Triangle is a plane, Ray-plane intersection. Test if hit point is inside triangle</p></li><li><p>Plane Equation</p><p>Plane is defined by normal vector and a point on plane：a normal, $\vec N$, and a point, $p’$, not in the normal. So the equation is<br>$$<br>p:(p-p’)\cdot \vec N=0 , or \space ax+by+cz+d=0<br>$$</p></li><li><p>Solve for intersection<br>$$<br>Set\space r=r(t)\\<br>(p-p’)\cdot \vec N=(O+td-p’)\cdot \vec N=0\\<br>t=\frac {(p’-O)\cdot \vec N}{\vec d \cdot \vec N}\space and \space Check:0\leq t\leq \infty<br>$$</p></li></ol></li><li><p>Moller Trumbore Algorithm</p><p>A faster approach, giving barycentric coordinate directyly.</p><p>Derivation in the discussion section!（By cramer）<br>$$<br>\vec O+t\vec D=(1-b_1-b_2)\vec P_0+b_1\vec P_1+b_2\vec P_2\\<br>\left[\begin{matrix} t\\b_1\\b_2 \end{matrix}\right]=\frac 1{\vec S_1 \cdot \vec E_1}\left[\begin{matrix} \vec S_2\cdot \vec E_2\\\vec S_1\cdot \vec S\\\vec S_2\cdot \vec D \end{matrix}\right]<br>$$<br>where<br>$$<br>\vec E_1=\vec P_1 - \vec P_0\\<br>\vec E_2=\vec P_2 - \vec P_0\\<br>\vec S=\vec O -\vec P_0\\<br>\vec S_1=\vec D \times \vec E_2\\<br>\vec S_2=\vec S \times \vec E_1<br>$$</p></li><li><p>Accelerating Ray-Surface Intersection</p><ol start="0"><li><p>Simple ray-scene intersection</p><p>Exhaustively test ray-intersection with every objecy and should find the closet hit（with minimum $t$）. The problem：Naive algorithem =  pixels $\times$ objects（$\times$ bounces） and it  is very slow</p></li></ol></li><li><p>Bounding Volume</p><p>Quick way to avoid intersections：bound complex object with a simple volume, which object is fully contained in the volum. It can be easy know that the ray doesn’t hit the volume, it doesn’t hit the object. So test BVol first, then test object if it hits</p><ol start="0"><li><p>Ray-Intersection With Box</p><p>Understanding：<strong>box is the itersection of 3 pairs of slabs</strong></p><p>Specifically：We often use an <strong>Axis-Aligned Bounding Box（AABB）</strong></p></li><li><p>Ray Intersection with Axis-Aligned Box</p><p>2D example; 3D is the same.</p><p>We compute intersections with slabs and take intersection of $t_{min}/t_{max}$ intervals</p><p>The following picture showed the Intersection with $x$ plane</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/AABB_RA.png" alt="AABB_RA" style="zoom:67%;"><p>The following picture showed the Intersection with $y$ plane</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/AABB_RAY.png" alt="AABB_RAY" style="zoom:50%;"><p>The following picture showed the Final Intersection result</p><img src="C:\Users\Y\Desktop\blog_pic\OOCG\AABB_RA_FINAL.png" alt="AABB_RA_FINAL" style="zoom:50%;"></li><li><p>Recall：a box（3D）= three pairs of infintely large slabs</p><ol start="0"><li><p>Key ideas：The ray enters the box <font color="blue"><strong>only when</strong></font> it enters all pairs of slabs and exits the box <font color="red"><strong>as long as</strong></font> it exits any pair of slabs.</p><p>For each pair, caculate the $t_{min}$ and $t_{max}$（negative is fine）So, for the 3D box, $t_{enter}=max(t_{min}),t_{exit}=min(t_{max})$</p></li><li><p>If $t_{enter}&lt;t_{exit}$, we know the ray <font color="Orange"> stays a while</font> in the box（So they must intersect！）（not done yet, see the next slide）</p></li><li><p>However, ray is not a line, it should check whether $t$ is   negative for physical coreectness</p></li><li><p>What if $t_{exit}&lt;0$? It means that the box is “behind” the ray  - no inersection！</p></li><li><p>What if $t_{exit}\geq 0$ and $t_{enter}&lt; 0$? It means the rays orgin is inside the box - have intersection</p></li><li><p>In a nutshell, ray and AABB intersect if and only if<br>$$<br>t_{enter}&lt;t_{exit} &amp;&amp; \space t_{exit}\geq 0<br>$$</p></li></ol></li><li><p>Why Axis-Aligned?</p><p>General model, the $t$ we should have 3 subtractions, 6 multiplies and i division; but the slabs perpendicular to x-axis just need 1 subtraction and 1 division（recall the fomula from the foregoing)</p></li><li><p>Using AABBs to accelerate ray tracing </p><ol start="0"><li><p>Uniform grids</p><ol start="0"><li>Preprocess - Build Acceleration Grid<ol start="0"><li>Find bounding box</li><li>Create grid</li><li>Store each object in overlapping cells</li><li>Step through grid in ray traversal order - For each grid cell：Test intersection with all objects stored at that cell</li></ol></li><li>Grid Resolution<ol start="0"><li>One cell - no spped up</li><li>Too many cells - Inefficiency due to extraneous grid traversal</li><li>Heuristic - cells = $C\times objs$ ,$C\approx 27$ in 3D</li></ol></li><li>When They Work Well on large collection of objects that are distributed evenly in size and space</li><li>When they Fail that “Teapot in a stadium”  problem</li></ol></li><li><p>Spatial Partitions - example by KD-Tree</p><img src="C:\Users\Y\Desktop\blog_pic\OOCG\spacetial_pation.jpg" alt="spacetial_pation" style="zoom: 67%;"><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/KD_TREE1.png" alt="KD_TREE1"></p><ol start="0"><li><p>Bilud: Internal nodes store</p><ol start="0"><li>Split axis: $x,y$ or $z$ axis</li><li>Split position: coordinate of split plane along axis</li><li>childrenL pointers to child nodes</li><li><strong>No ovjects are stored in internal nodes</strong></li><li>Leaf nodes store list of objects</li></ol></li><li><p>Traversing a KD-Tree</p><p>If the ray have intersect with the <strong>leaf</strong> node, the program will check whether the ray intersect with all objects. </p></li></ol></li><li><p>Object Partitions - Volume Hierarchy（BVH）</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/BVH_EXAMPLE.png" alt="BVH_EXAMPLE"></p><p>Find bounding box, then recursively split set of objects in two subsets. Then <strong>recompute</strong> the bounding box of the subsets.</p><p>Stop when necessary and store objects in each leaf node</p><ol start="0"><li><p>Building</p><ol start="0"><li><p>Choose a dimension to split</p></li><li><p>Heuristic #1： Always choose the longest axis in node</p><p>​                 #2：Split node at location of <font color="red">median</font> object（keep balance）</p><p>Be careful that in a random sequence, if you want to find the $n-th$ number, it just need $O(n)$</p></li><li><p>Termination criteria: stop when node contains few elements</p></li></ol></li><li><p>BVH Traversal’s’ pseudocode</p><pre class="line-numbers language-pseudocode"><code class="language-pseudocode">Intersect(Ray ray, BVH node){    if (ray misses node.bbox) return;    if (node is a leaf node)        test intersection with all objs;        return closeest intersection;    hit1 = Intersect(ray, node.childl);    hit2 = Intersect(ray, node.childr);    return the closer of hit1, hit2;} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>Spatial vs Object Partions</p><ol start="0"><li>Spatial<ol start="0"><li>Partition space into non-overlapping regions</li><li>An  object can be contained in multiple regions</li></ol></li><li>Object partition<ol start="0"><li>Partition set of objects into disjoint subsets</li><li>Bounding boxes fore each set may overlap in space</li></ol></li></ol></li></ol></li></ol></li></ol></li></ol><h3 id="Basic-radiometry"><a href="#Basic-radiometry" class="headerlink" title="Basic radiometry"></a>Basic radiometry</h3><p>Advertisement：new topic from now on, scarcely covered in other graphics courses</p><ol start="0"><li><p>Motivation</p><p>In assignment 3, we implement the Blinn-Phong model. The light intensity $I=10$ for example, but what is $10$? But the Whitted style ray tracing doesn’t give you CORRECT results if just “$I=10$”</p><p>All the answers can be found in radiometry</p></li><li><p>Radiometry</p><p>Measurement system and units for illumination. And it can accurately measure the spatial properties of light. The radiometry can perform lighting calculations in a physically correct manner</p><ol start="0"><li><p>Radiant flux</p><ol start="0"><li><p>Radiant Energy - the energy of electromagenetic radiation. It is measured in units of joules, and denoted by the symbol：$Q[J=Joule]$</p></li><li><p>Radiant flux（power） is the ennergy emitted, reflected, trransmitted or received, per unit time<br>$$<br>\Phi \equiv\frac {dQ}{dt}[W=Watt][lm=lumen]<br>$$</p></li></ol></li><li><p>Intensity</p><ol start="0"><li><p>The radiant （luminous） intensity is the power per unit <strong>solid angle（立体角）</strong> emitted by a point light source<br>$$<br>I(\omega)\equiv\frac {d\Phi}{d\omega}[\frac W{sr}][\frac {lm}{sr}=cd=candela]<br>$$<br>The candela is one of the seven SI base units</p></li><li><p>Angles and Solid Angles</p><ol start="0"><li><p>Angles：ratio of subtended arc length on circle to radius $\theta = \frac lr$, circle has $2 \pi$ radians</p></li><li><p>Solid angle：ratio of subtended area on sphere to radius squared $\Omega=\frac A{r^2}$, sphere has $4\pi$ steradians</p></li><li><p>Differential Solid Angles：</p><p>$dA=(rd\theta)(d\sin\theta d\phi)=r^2\sin\theta d\theta d\phi$</p><p>$d\omega=\frac {dA}{r^2}=\sin\theta d\theta d\phi$</p><p>$\Omega=\int_{S^2}d\omega=\int_0^{2\pi}\int_0^{\pi}\sin\theta d\theta d\phi=4\pi$</p></li><li><p>$\omega$ as a direction vector </p></li><li><p>Isotropic Point Source<br>$$<br>\Phi c= \int_{S^2}Id\omega=4\pi I,then\space I=\frac {\Phi}{4\pi}<br>$$</p></li></ol></li></ol></li><li><p>Irradiance</p><p>The irradiance is the power per（perpendicular/projected） unit area incident on a surface point<br>$$<br>E(x)\equiv\frac {d\Phi(x)}{dA}[\frac W{m^2}][\frac {lm}{m^2}=lux]<br>$$<br>Review Lambert’s Cosine Law, the irradiance at surface is proportional to cosine of angle between light direction and surface normal</p><p><strong>Correction：Irradiance Falloff</strong></p><p>Assume light is emitting power $\Phi$ in a uniform angular distributition, Compare irradiance st surface of two shperes:</p><ol start="0"><li>$r=1:E=\frac {\Phi}{4\pi}$</li><li>$r=x$：$E’=\frac {\Phi}{4\pi r^2}=\frac E{r^2}$</li></ol></li><li><p>Radiance</p><p>Radiance is the fundamental field quantity that describes the distribution of light in an environment</p><ol start="0"><li>Radiance is the quantity associated with a ray</li><li>Rendering is all about computin radiance</li></ol><p>The radiance （luminance）is the power emitted, reflected, transmitted or received by a surfac, <font color="red">per unit solid angle</font>, <font color="blue">per projected unit area</font></p><p><img src="C:%5CUsers%5CY%5CDesktop%5Cblog_pic%5COOCG%5Cradiance.jpg" alt="radiance"><br>$$<br>L(p,\omega)\equiv \frac {d^2\Phi(p,\omega)}{d\omega dA\cos \theta}[\frac W{sr \space m^2}][\frac {cd}{m^2}=\frac{lm}{sr\space m^2}=nit]<br>$$<br>where $\cos \theta$ account for projected surface area</p><p>Recall</p><ol start="0"><li>Irradiance ：power per projected unit area</li><li>Intensity：power per solid angle</li></ol><p>So</p><ol start="0"><li>Radiance ：Irradiance per solid angle</li><li>Radiance ：Intensity per projected unit area</li></ol></li><li><p>Irradiance vs. Radiance</p><p>Irradiance：total power received by area $dA$</p><p>Radiance：power ceceived by area $dA$ from “direction” $d\omega$</p><p>and we have $H^2$ is a unit Hemisphere<br>$$<br>dE(p,\omega)=L_i(p,\omega)\cos\theta d\omega\\<br>E(p)=\int_{H^2}L_i(p,\omega)\cos \theta d\omega<br>$$</p></li></ol></li><li><p>Bidirectional Reflectance Distribution Function（双向反射分布函数：BRDF）</p><ol start="0"><li><p>Reflection at a Point</p><img src="C:\Users\Y\Desktop\blog_pic\OOCG\reflection_at_a_point.png" alt="reflection_at_a_point" style="zoom:50%;"><p>Radiance from direction $\omega_i$ turns into the power $E$ that $dA$ receives, then power $E$ will become the radiance to any other direction $\omega_i$</p><p>The differential irradiance incoming is $dE(\omega_i)=L(\omega_i)\cos\theta_id\omega_i$, the differential radiance exiting （due to $dE(\omega_i)$）： $dL_r(\omega_r)$</p></li><li><p><strong>BRDF’s</strong> Definetion</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/BRDF.png" alt="BRDF"></p><p>The Bidirectional Reflectance Distribution Function（BRDF） represents how much light is reflected into each outgoing direction $\omega_r$ from each incoming direction<br>$$<br>f_r(\omega_i \rightarrow \omega_r)=\frac {dL_r(\omega_r)}{dE_i(\omega_i)}=\frac{dL_r(\omega_r)}{L_i(\omega_i)\cos\theta_id\omega_i }[\frac1{sr}]<br>$$<br>Emit the mathematical and physical analysis, the BRDF is illustrate the interact  object with the light,. So it can determine the material of the object.</p></li><li><p>The Reflection Equation:<br>$$<br>L_r(p,\omega_r)=\int_{H^2}f_r(p,\omega_i \rightarrow\omega_r)L_i(p,\omega_i)\cos\theta_id\omega_i<br>$$</p></li><li><p>Recursive Equation</p><p>Reflected radiance depends on incoming radiance, but incoming radiance depends on reflected radiance（at another point in the scene）</p></li><li><p>The Rendering Equation</p><p>Re-write the reflection equation<br>$$<br>L_r(p,\omega_r)=\int_{H^2}f_r(p,\omega_i \rightarrow\omega_r)L_i(p,\omega_i)\cos\theta_id\omega_i<br>$$<br>by adding an Emission term to make it general. So the Rendering Equation is<br>$$<br>L_o(p,\omega_o)=L_e(p,\omega_o)+\int_{\Omega^+}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)(n\cdot\omega_i)d\omega_i<br>$$<br>Node that we assume that all directions are pointing <font color="red">outwards</font> now</p></li><li><p>Reflection Equation</p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/Reflection_equatrion.png" alt="Reflection_equatrion" style="zoom: 67%;">$$L_r(x,\omega_r)=L_e(x,\omega_r)+L_i(x,\omega_i)f(x,\omega_i,\omega_r)(\omega_i.n)$$Where $L_r$ is Reflected Light（output image）, $L_e$ is Emiision, $L_i$ is incident light (from light source) , $(\omega_i,n)$ is cosine of incident angel and $f$ is BRDF, then we add some extra light source<img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/Reflection_equations.png" alt="Reflection_equations" style="zoom: 67%;"><p>the Equation now change to<br>$$<br>L_r(x,\omega_r)=L_e(x,\omega_r)+\sum L_i(x,\omega_i)f(x,\omega_i,\omega_r)(\omega_i.n)<br>$$<br>Then change an area to light source area </p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/Reflection_equation_area.png" alt="Reflection_equation_area" style="zoom:67%;"><p>the equation change to<br>$$<br>L_r(x,\omega_r)=L_e(x,\omega_r)+\int_{\Omega} L_i(x,\omega_i)f(x,\omega_i,\omega_r)(\omega_i.n)d\omega_i<br>$$<br>But some of light comes from other object by reflecting, so the pic would change </p><img src="C:\Users\Y\Desktop\blog_pic\OOCG\Comes_from_reflect.png" alt="Comes_from_reflect" style="zoom:67%;"><p>and the equation becomes to<br>$$<br>L_r(X,\omega_r)=L_e(X,\omega_r)+\int_{\Omega} L_r(X’,-\omega_i)f(x,\omega_i,\omega_r)(\omega_i.n)d\omega_i<br>$$<br>where $L_r$ there is reflected light.</p></li><li><p>Rendering Equation as Intergral Equation<br>$$<br>L_r(X,\omega_r)=L_e(X,\omega_r)+\int_{\Omega} L_r(X’,-\omega_i)f(x,\omega_i,\omega_r)(\omega_i.n)d\omega_i<br>$$<br>is a Fredholm Intergral Equation of second kind [extensively studied numerically] with canonical form<br>$$<br>L(u)=e (u)+\int L(v)K(u,v)dv<br>$$<br>even we can write it as linear operator equation<br>$$<br>l(u)=e(u)+\int l(v)K(u,v)dv<br>$$<br>where $K(u,v)$ is kernel of equation Light transport operator, and it can be write as<br>$$<br>L=E+KL<br>$$<br>It can be sicretized to a simple matrix equation[or system of simultaneous linear equations]（$L$,$E$ are vectors, $K$ is the light transport matrix）. Then it can general class numberucak Monte Carlo methids and approximate set of all paths of light in scene<br>$$<br>L=E+KL\\IL-KL=E\\(I-K)=E\\L=(I-K)^{-1}E<br>$$<br>According to binomia theorem（二项式定理）<br>$$<br>L=(I+K+K^2+K^3+…)E\\L=E+KE+K^2E+K^3E+…<br>$$<br>then the $E$s of last equation, from the left to right, we can illustrate them ase Emission directly from light sources, direct illumination on surfaces, indirect illumiantion（one bounce indirect[Mirrors, Refraction]） and Twoi bounce indirect illumation and etc.</p><p>We can shading in rasterization on $E$ and $KE$, but the follows are hard to shade</p></li></ol></li></ol><h3 id="Probability-Review"><a href="#Probability-Review" class="headerlink" title="Probability Review"></a>Probability Review</h3><p>Review some <strong>easy</strong> probability knowledge which will use in the following content</p><ol start="0"><li><p>Random Variables</p><p>$X$：random variable. Represents a distribution of potential values</p><p>$X\sim p(x)$：probability density function（PDF）. Describles relative probability of a random process choosing value $x$</p></li><li><p>Probabilities</p><p>n discrete value $x_i$, With probability $p_i$, Requirements of a probability distribution：$p_i\geq0$, $\sum p_i=1$</p></li><li><p>Expected Value of a Random Variable</p><p>The average value that one obtains if repeatedly drawing samples from the random distribution. $X$drawn from distribution with $n$ discrete values $x_i$ with probabilities $p_i$, the expected value of $X: E(x)=\sum x_ip_i$</p></li><li><p>Continuous Case：<font color="red"> Probability Distribution Function（PDF)</font></p><p>A random variable $X$ that can take any of a continuos set of values. where the relative probability of a particular value is given by a continuous probability density function $p(x)$.</p><p>Condition on $p(x)\geq0\ and\ \int p(x)dx=1$</p><p>Expected value of $X：E(X)=\int xp(x)dx$</p></li><li><p>Function of a Random Variable</p><p>A function $Y$ of a random variabvle $X$ is also a random variable: $X\sim p(x)$ and $Y=f(X)$, the expected value oif a function of a random variable $E(Y)=E(f(x))=\int f(x)p(x)dx$</p></li><li><p>Monte Carlo Intergration</p><p><strong>Why</strong>：We want to solve an intergral, but it can be too difficult to solve annalyticcally</p><p><strong>How</strong>：estimate the integral of a function by averraging random samples of the function’s value</p><ol start="0"><li><p>Some definetion of it</p><ol start="0"><li>Deinite integral： $\int_a^bf(x)dx$</li><li>Random variable：$X_i\sim p(x)$</li></ol><p>Then the Monte Carlo estimator is<br>$$<br>F_N=\frac 1N\displaystyle\sum_{i=1}^N\frac {f(X_i)}{p(X_i)}<br>$$</p></li><li><p>Example Uniform Monte Carlo Estimator</p><p>Assume $f(x)=C$</p><ol start="0"><li><p>Deinite integral： $\int_a^bf(x)dx$</p></li><li><p>Uniform Random variable：$X_i\sim p(x)=\frac 1{b-a}$</p></li></ol><p>Then the basic Monte Carlo estimator<br>$$<br>F_N=\frac {b-a}N\displaystyle\sum_{i=1}^Nf(X_i)<br>$$</p></li><li><p>Some notes</p><ol start="0"><li>The more samples, the less variance</li><li>Sample on $x$, intergrate on $x$</li></ol></li></ol></li></ol><h3 id="Path-Tracing"><a href="#Path-Tracing" class="headerlink" title="Path Tracing"></a>Path Tracing</h3><ol start="0"><li><p>Motibation：Whitted-Style Ray Tracing</p><ol start="0"><li><p>Whitted-style ray tracing：</p><ol start="0"><li>Always perform specular reflections / refractions</li><li>Stop bouncing at diffuse surfaces</li></ol><p>But it may not reasonable , so let’s progressively improve upon Whitted-Style Ray Tracing and lead to our path tracing algorithm!</p></li><li><p>Problem of Whitted-Style Ray Tracing</p><ol start="0"><li>Glossy reflection</li><li>Diffuse materials</li></ol></li><li><p>So it seems that Whitted-Style ray tracing is <strong>Wrong</strong>, but the rendering equation is corret</p><p>But it involves：Solving an integral over the hemisphere and recursive execution</p></li></ol></li><li><p>A Simple Monte Carlo Solution</p><p>Suppose we want to render <strong>one pixle（point）</strong>in the followingf scene for <strong>direct illumination</strong> only</p><p> <img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/EXAMPLE_IN_PATHTRA.png" alt="EXAMPLE_IN_PATHTRA"></p><p>Abuse the concept of Reflection Equation a little bit<br>$$<br>L_o(p,\omega_o)=\int_{\Omega^+}L_i(p_i,\omega_i)f_r(p,\omega_i,\omega_o)( n\cdot \omega_i)d\omega_i<br>$$<br>Note again that we assume all direction are <font color="red">pointing outwards</font>. Fancy as it is , it’s still just an integration over directions. So, of course, we can solve it using Monte Carlo integration.</p><p>We want to comput the radiance at $p$ towards the camera<br>$$<br>L_o(p,\omega_o)=\int_{\Omega^+}L_i(p_i,\omega_i)f_r(p,\omega_i,\omega_o)( n\cdot \omega_i)d\omega_i\\<br>\int_a^bf(x)dx\approx\frac 1N\displaystyle\sum_{i=1}^N\frac {f(X_i)}{pdf(X_i)}\ X_k\sim p(x)<br>$$</p><p>$$<br>f(x)=L_i(p_i,\omega_i)f_r(p,\omega_i,\omega_o)( n\cdot \omega_i)<br>$$</p><p>So, what’s our PDF?</p><p>We assume uniformly sampling the hemisphere, the PDF is $p(\omega_i)=\frac 1{2\pi}$</p><p>So, in general<br>$$<br>L_o(p,\omega_o)=\int_{\Omega^+}L_i(p_i,\omega_i)f_r(p,\omega_i,\omega_o)( n\cdot \omega_i)d\omega_i\\\approx \frac 1N\displaystyle\sum_{i=1}^N\frac{L_i(p_i,\omega_i)f_r(p,\omega_i,\omega_o)( n\cdot \omega_i)}{pdf(\omega_i)}<br>$$<br>Note abuse notation a little bit for $i$</p><p>Then we will write pseudocode</p><pre class="line-numbers language-pseudocode"><code class="language-pseudocode">shade(p, wo)    Randomly choose N direcytions wi~pdf    L0 = 0.0    For each wi        Trace a ray r(p,wi)        If ray r hit the light            Lo += ( 1 / N ) * L_i * f_r * cosine / pdf(wi)    return Lo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Introduction Global Illumination</p><ol start="0"><li><p>One more step forwad - What if a ray hits an object?</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/Questyion_in_global.png" alt="Questyion_in_global"></p><p>We can know that $Q$ also reflects light to $P$. </p><p>How much? The dir.illum. at Q</p><p>So the pseudocode can revise</p><pre class="line-numbers language-pseudocode"><code class="language-pseudocode">shade(p, wo)    Randomly choose N direcytions wi~pdf    L0 = 0.0    For each wi        Trace a ray r(p,wi)        If ray r hit the light            Lo += ( 1 / N ) * L_i * f_r * cosine / pdf(wi)        //new here        Else If ray r hit an object at q            Lo += ( 1 / N ) * shade(q, -wi) * f_r * cosine / pdf(wi)    return Lo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>But we doesn’t sovle it. Because</p><ol start="0"><li><p>Explosion of rays as bounces go up：$num_{RAY}=N^{bounces}$</p><p>We observation：rays will not explode if and only if $N=1$, So the</p><pre class="line-numbers language-pseudocode"><code class="language-pseudocode">shade(p, wo)    Randomly choose only ONE direcytions wi~pdf    Trace a ray r(p,wi)    If ray r hit the light        return L_i * f_r * cosine / pdf(wi)    Else If ray r hit an object at q        return shade(q, -wi) * f_r * cosine / pdf(wi)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This is <font color="red"> path tracing</font>! （FYI, Distributed Ray Tracing if N != $1$）</p></li><li><p>Ray Generation</p><p>Maybe some readers will think that this will be nosiy! But don’t be worry, just trace more paths through each pixel and average their radiance</p><p><img src="https://cdn.jsdelivr.net/gh/AstroJoke/Blog_Image/images/rAY_GENERATION_PATH.png" alt="rAY_GENERATION_PATH"></p><p>Then, about this ,it is very similar to ray casting in ray tracing</p><pre class="line-numbers language-pseudocode"><code class="language-pseudocode">ray_ generation (camPos, pixel)    Uniformly choose N sample positions within the pixel    pixel_ radiance = 0.0    For each sample in the pixel        Shoot a ray r(camPos, cam_ to_ sample)        If ray r hit the scene at p            pixel_ radiance += 1 / N * shade(P, sample_to cam)        Return pixel_ radiance    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Path Tracing</p><p>But their have some other problems in shade()？The recursive algorithm will never stop!</p><p>Dilemma: the light does not strop bouncing indeed</p><p>Cutting #bounces == cutting energy</p><p>Solution：Russian Roulette（RR）- all about probability</p><p>​                   With probability $0&lt;P&lt;1$, you are fine</p><p>​                   With probability $1-P$, otherwise</p></li></ol></li></ol></li></ol><h2 id="6-Materials-and-Appearances"><a href="#6-Materials-and-Appearances" class="headerlink" title="6. Materials and Appearances"></a>6. Materials and Appearances</h2><h2 id="7-Advanced-Topics-in-rendering"><a href="#7-Advanced-Topics-in-rendering" class="headerlink" title="7. Advanced Topics in rendering"></a>7. Advanced Topics in rendering</h2><h2 id="8-Cameras-Lenses-and-Light-Fields"><a href="#8-Cameras-Lenses-and-Light-Fields" class="headerlink" title="8. Cameras, Lenses and Light Fields"></a>8. Cameras, Lenses and Light Fields</h2><h2 id="9-Color-and-Perception"><a href="#9-Color-and-Perception" class="headerlink" title="9. Color and Perception"></a>9. Color and Perception</h2><h2 id="10-Animation"><a href="#10-Animation" class="headerlink" title="10. Animation"></a>10. Animation</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形学 </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清华MOOC图形学基础：真实感和非真实感</title>
      <link href="/2020/05/02/qing-hua-mooc-tu-xing-xue-ji-chu-zhen-shi-gan-he-fei-zhen-shi-gan/"/>
      <url>/2020/05/02/qing-hua-mooc-tu-xing-xue-ji-chu-zhen-shi-gan-he-fei-zhen-shi-gan/</url>
      
        <content type="html"><![CDATA[<h2 id="真实感图形学"><a href="#真实感图形学" class="headerlink" title="真实感图形学"></a>真实感图形学</h2><h3 id="纹理（Texture）"><a href="#纹理（Texture）" class="headerlink" title="纹理（Texture）"></a>纹理（Texture）</h3><p>纹理使得用户不必对模型的几何细节进行建模就可以丰富表面细节。而且绘制真实感图像的最重要的任务之一就是对表面细节进行建模。例如，如果我们想对一块砖墙进行建模，选择之一：用大量的具有恰当表面颜色和反射属性的多边形对表面细节进行建模。然而，在大多数应用中，很会去注意太多砖墙的细节。大多数是在一定距离以外观看这.面墙-在这种情况下，我们可能并不需要知道砖墙的所有细节。相反，我们可以用大的多边形平面对墙进行建模，并把一幅墙的图片贴在多边形上以使得这个多边形看起来像一面砖墙。将纹理引用于物体表面的过程为纹理映射。</p><h4 id="纹理的作用"><a href="#纹理的作用" class="headerlink" title="纹理的作用"></a>纹理的作用</h4><p>纹理图像表示表面，省时省力，不用建模所有几何/材质细节且渲染简单的多边形模型和纹理，而不是BRDF的模型几何细节，渲染过程更有效，节约计算时间和资源。</p><h4 id="纹理的使用"><a href="#纹理的使用" class="headerlink" title="纹理的使用"></a>纹理的使用</h4><ol><li><p>首先是需要纹理采集（手绘拍照合成啥的）；</p></li><li><p>纹理贴图：给定纹理图像和三维模型，需要弄清楚如何将纹理映射到模型上。可以通过给每个三维模型的顶点指定一个纹理坐标。并利用这个坐标把纹理图像上的色彩赋值给模型实现；</p></li><li><p>纹理滤波，映射后采样的方法，处理不好会有一些人为痕迹（artifacts） （信号相关）。</p></li></ol><h4 id="纹理采集"><a href="#纹理采集" class="headerlink" title="纹理采集"></a>纹理采集</h4><p>主要是针对过程纹理和纹理合成。编写特殊的程序模拟物理形成过程或者材质外观合成模拟。优点是其本身十分紧致，只需存储过程本身和参数。然后可以通过改变过程参数改变材质的外观，提供优良的可控性，但缺点过程是合成不存在普适性，且没有已知程序代码的材质无法生成。</p><h4 id="柏林噪声"><a href="#柏林噪声" class="headerlink" title="柏林噪声"></a>柏林噪声</h4><p>白噪声是一种在所有频率均具有很亮能量密度的新号，其傅里叶变换是近似平坦的，可以通过均匀随机函数产生。而柏林噪声是有限频宽函数，通过对不同频段的白噪声求和得到，再求和之前需要通过插值是的不同频带对应的不同图像大小插值（interpolation）使之图像大小相同，通过对持久度决定其权重。</p><h4 id="纹理合成"><a href="#纹理合成" class="headerlink" title="纹理合成"></a>纹理合成</h4><p>从一个特定的样本合成一个新的纹理，其对用户更友好（使用该算法只需要一个sample）。</p><p>主要分为两类，基于像素和基于块。</p><p>逐像素合成新的纹理，其值由局部邻域确定（扫描线算法）；而基于块的情况，合成区块，结合扫描线算法。（适合做一些半规则纹理）</p><h4 id="纹理映射"><a href="#纹理映射" class="headerlink" title="纹理映射"></a>纹理映射</h4><p>给定一个模型和二维纹理图像，将图像映射到图像坐标的方程来完成，方程称之为表面映射函数，在给模型店着色时，我们从二维纹理中寻找适当的像素，并用该点去影响最终的颜色。</p><p>而对函数的制定：规则图形自然参数化，复杂物体手工制定纹理坐标；</p><p>网格参数化，从三维网格模型到平面域的映射；</p><p>共形参数化与面积保持，反曲率映射——在网格上从网格边的边长到网格顶点的高斯曲率的映射称之为曲率映射，利用共形几何理论，由网格曲面的曲率映射的切映射，可以证明这个映射是可逆的；</p><h4 id="纹理滤波（filter）"><a href="#纹理滤波（filter）" class="headerlink" title="纹理滤波（filter）"></a>纹理滤波（filter）</h4><p>在映射后，若直接渲染，则会因为由信号走样引起人为痕迹。走样和反走样：走样由于信号采样频率过低，但直接提高采样率会因为屏幕分辨率导致采样频率会被限制。而存在两类滤波</p><ol><li><p>各向同性滤波：材质转换：构造一组经过预滤波和重采样图像构成的图像金字塔，其由原图在1/2,1/4,1/8等尺度对应的采样，然后在光栅化过程张，计算与情网采样率最接近的图像序号。</p></li><li><p>各向异性滤波：在材质转化中可能会导致过模糊，因为我们在建立多级纹理时，我们通常将各向同性的高分辨率纹理进行滤波，这种方法在期望的滤波器是各向异性的时候会引起模糊。而通过预计算各向异性的滤波构造一个ripmap来替代mipmap。</p></li></ol><h3 id="阴影（Shadow）"><a href="#阴影（Shadow）" class="headerlink" title="阴影（Shadow）"></a>阴影（Shadow）</h3><p>定义：在一个场景中，每个可能被照到的物体称之为接受者；</p><p>若从$P$点看不到光源的任何一部分则$P$称之为本影（umbra），看得到一部分称之为半影。</p><p>半影和本影称之为阴影：即对于任意阴影中的一点，光源中至少存在一点会被遮挡。而挡住光源到阴影区域的物体被称为遮挡物（occluders）。</p><h4 id="阴影的类型："><a href="#阴影的类型：" class="headerlink" title="阴影的类型："></a>阴影的类型：</h4><ol><li><p>附着阴影（attached shadows）：发生于接收者（receiver）的法向背离光源方向时。.</p></li><li><p>投射阴影（cast shadows）：发生于接收者（receiver） 的法向朝着光源方向，但光源被遮挡物（occluder）所遮挡时。</p></li><li><p>自阴影（self shadows）：是一类特殊的投射阴影； 对于自阴影，接收者（receiver）和遮挡物（occluder）来自于同一物体。</p></li></ol><h4 id="阴影的重要性"><a href="#阴影的重要性" class="headerlink" title="阴影的重要性"></a>阴影的重要性</h4><p>场景中物体的相对位置关系和大小关系；理解复杂的接受者的几何形状；理解遮挡物的几何形状。</p><h4 id="硬阴影（与之相对的软阴影可以视作取反）："><a href="#硬阴影（与之相对的软阴影可以视作取反）：" class="headerlink" title="硬阴影（与之相对的软阴影可以视作取反）："></a>硬阴影（与之相对的软阴影可以视作取反）：</h4><ol><li>硬阴影通常会将“阴影”理解为-一个二值的状态：每个点要么在阴影中，要么不在。这样的理解对应的其实是硬阴影（Hard shadows），硬阴影由点光源产生。然而，点光源在实际中并不存在，并且硬阴影会给图像带来一种相当不真实的感觉。注意到，即使是我们日常生活中最常见的光源——太阳，也具有很显著的角展（angular extent），产生的也并不是硬阴影。</li><li>尽管如此，由于点光源在图形学中容易被模拟：我们将会看到，对硬阴影的计算存在不少实时算法（real-time algorithms）。在有限展度（finite extent）的光源（通常是面光源）下，确定本影（umbra）和半影（penumbra）区域通常比较困难，因为这意味着需要求解3D空间中的可见关系（visiblity relationships），而这是个非常困难的问题。</li></ol><h4 id="平面阴影"><a href="#平面阴影" class="headerlink" title="平面阴影"></a>平面阴影</h4><p>当物体的阴影被投射到平的表面时，会产生平面阴影（最简单的）。</p><p>阴影投影：在阴影投影方法中，三维空间中的物体需要被绘制两次已实现阴影效果，即使用一个矩阵将遮挡物的表面的点投影到需要计算阴影的平面上，称之为Projection Matrix。为了绘制阴影，可以简单的利用之前的矩阵将三维场景中的物体投影到目标平面，然后对投影物体使用暗色并去除光照进行绘制，但是要求接受者必须是平面，且无论是否发生改变，每一帧的阴影都需要重新绘制。</p><p>曲面上的阴影：用阴影图像作为投影的纹理，从光源作为视点，之后看得到的被绘制，看不到的就是阴影。</p><p>可能产生的两种错误阴影：</p><ol><li><p>antishadow：光源位于最上方物体之下，算法会生成错误的阴影；</p><ol start="2"><li>false shadow：当物体位于接受平面背对光源的一方时，也会导致产生错误的阴影。</li></ol></li></ol><p>E.    阴影的绘制算法：阴影域，阴影图算法</p><ol><li><p>阴影域算法：</p><ol><li>将某一点想象成点光源，同时想象出一个三角形平面，将三角形平面的三个顶点和点光源相连接并无限延长，就可以得到一个无限的三棱锥；</li><li>只要任何物体的任何一部分在我们构造的三角形面和点光源之间的三棱锥内，那只要切去顶端的三棱锥，剩下的部分处于阴影区域。于是我们将这个被切去顶端的三棱锥称之为阴影域。</li><li>假设视点在所有的shadow volume之外，我们维护一个计数器，其初始值是，每当从视点射向目标像素的射线进入到一个shadow volume中，计数器$+1$，射出时计数器$-1$；这样我们只需检验当射线到达交点时计数器是否大于0，若大于0则交点位于阴影中，否则不属于阴影区域。</li><li>优缺点：<ol><li>优点：<ol><li>首先使用通用的图形学硬件实现，而且仅需要一个缓存模板；</li><li>而且他不是基于图像，故shadow volume算法并不会产生因采样和分辨率带来的各种问题，从而可以在任何地方生成正确和清晰的阴影；</li></ol></li><li>缺点：但其不足主要是体现在性能方面（因为其面片通常比较多）。</li></ol></li><li>具体实现时，我们会使用模板缓存：<ol><li>首先清空模板缓存，然后将整个场景绘制到帧缓存中，因为绘制只使用环境光分量和发光分量，并获取相应的颜色消息和深度信息；</li><li>接着关闭颜色缓存的写入和深度监测，并绘制所有shadow volume的正面。在这个过程中，如果一个像素其深度值小于之前的z-buffer，则对应模板缓存上的计数器++；</li><li>然后类似于前一步骤，按照SV的反面绘制一遍，只是每发现一个小于则-1；</li><li>最后将整个场景根据模板缓存的信息绘制漫反射分量和高光分量：缓存为0的像素才绘制，已实现阴影效果。</li></ol></li></ol></li><li><p>阴影图（shadow map）：基于$z-buffer$的通用算法，快速计算阴影；</p></li><li><p>思想：以光源作为视点位置，使用$z-buffer$算法绘制场景获得其阴影图。并将其结果用于任意场景的阴影绘制。</p></li><li><p>过程：</p><ol><li>通过使用深度缓存，获得从光源触发到任意一个方向最近点的距离，并以图像形式存储下来，称之为阴影图；</li><li>然后进行第二次绘制——在进行绘制时，沿视点向屏幕每个像素发出光线并求与场景中物体的交点，再使用阴影图判断该点是否位于阴影区域：若该交点到光源的距离大于阴影图上对应点所存储的深度值，则该点位于阴影中，否则不在阴影中。</li></ol></li><li><p>优点在于绝大部分硬件可以直接支持算法，且特别快，其可以在常数时间内完成。</p></li><li><p>缺点：</p><ol><li>但其基于图像，所以其质量会受到阴影图分辨率，$z-buffer$的数值精度影响；</li><li>且在距离比较的误差值太小时，可能在物体表面产生莫尔干涉条纹，太大的时候会产生物体漂浮的感觉。</li></ol></li></ol><h2 id="计算机动画（Animation）"><a href="#计算机动画（Animation）" class="headerlink" title="计算机动画（Animation）"></a>计算机动画（Animation）</h2><h3 id="动画和计算机动画"><a href="#动画和计算机动画" class="headerlink" title="动画和计算机动画"></a>动画和计算机动画</h3><p>动画是一门通过在连续多格的胶片上拍摄一系列单个画面，从而产生动态视觉的技术和艺术，计算机动画采用连续播放静止图像的方法产生物体运动的效果。其分类为二维动画（图形分类和形状混合）；三维动画（关键帧动画，变形物体的动画和过程动画，人体动画等）</p><h4 id="形状混合"><a href="#形状混合" class="headerlink" title="形状混合"></a>形状混合</h4><p>二维图形动画，都可以简化为多边形处理，二维形状混合，实际上是在两个关键帧的多边形之间插入中间多边形。二维形状混合需要解决的关键问题包括：顶点对应问题和对应顶点之间的插值路径问题。</p><h4 id="关键帧动画"><a href="#关键帧动画" class="headerlink" title="关键帧动画"></a>关键帧动画</h4><p>源于动画制作，关键帧为动画的关键画面。在计算机动画当中，中间帧的生成由计算机生成，插值计算代替了设计中间帧的动画师，而影响画面图像的参数都可以成为关键帧的参数。</p><p>其需要解决的问题是：给定一物体运动的轨迹，求物体在某一帧的位置。而运动轨迹可以用参数样条表示，如直接对参数空间进行等间隔采样，势必引起运动的不均匀性。故需对样条进行弧长参数化。</p><h4 id="变形物体的动画："><a href="#变形物体的动画：" class="headerlink" title="变形物体的动画："></a>变形物体的动画：</h4><p>由于刚体动画过于生硬，所以需要对物体进行形变，方法主要为$barr$变形，轴变形，面变形（参数曲面的动态自由变形），和自由体变形方法。</p><h4 id="关节动画和人体动画"><a href="#关节动画和人体动画" class="headerlink" title="关节动画和人体动画"></a>关节动画和人体动画</h4><p>因为人体运动过程中自由度高且复杂，人的肌肉表情也会变形，且涉及运动学和动力学。</p><h4 id="智能生物的行为动画"><a href="#智能生物的行为动画" class="headerlink" title="智能生物的行为动画"></a>智能生物的行为动画</h4><h3 id="图像变形"><a href="#图像变形" class="headerlink" title="图像变形"></a>图像变形</h3><p>任意给定两幅不带任何几何信息的图像$S$和$D$，将$S$自然变形为$D$的过程。其焦点问题是找到$S$和$D$之间的各像素点之间的对应关系，如何处理颜色渐变和如何使得变形更加自然和真实。</p><h4 id="直接变形法"><a href="#直接变形法" class="headerlink" title="直接变形法"></a>直接变形法</h4><p>将$S$和$D$上的像素按照空间位置关系建立对应关系，在每对像素之间对其颜色进行插值，已得到变形的中间帧图像。</p><h4 id="基于特征的图像变形关系"><a href="#基于特征的图像变形关系" class="headerlink" title="基于特征的图像变形关系"></a>基于特征的图像变形关系</h4><p>像素的对应关系是通过分析图像的特征建立起对应关系，在对应关系的基础上，将集合变形和颜色变形结合。</p><h4 id="Beier-amp-Neely算法："><a href="#Beier-amp-Neely算法：" class="headerlink" title="Beier &amp;Neely算法："></a>Beier &amp;Neely算法：</h4><p>由多个控制向量，每个控制向量线性加权求和即可（算法略）</p><h3 id="2D形状混合："><a href="#2D形状混合：" class="headerlink" title="2D形状混合："></a>2D形状混合：</h3><p>关注与如何在两个多边形之间插入中间的混合多边形，使变化尽量合理和自然。解决的问题为顶点对应问题和对应顶点之间的插值路径问题。</p><h4 id="顶点插值法"><a href="#顶点插值法" class="headerlink" title="顶点插值法"></a>顶点插值法</h4><p>给定具有相同顶点个数的两个多边形：并且顶点之间已经有了对应关系，然后就使用对应插值公式（公式略）。</p><h4 id="几何内在参数法"><a href="#几何内在参数法" class="headerlink" title="几何内在参数法"></a>几何内在参数法</h4><h4 id="边向量混合法"><a href="#边向量混合法" class="headerlink" title="边向量混合法"></a>边向量混合法</h4><p>对多边形的边向量插值：</p><ol><li>若有$a$和$b$构成的三角形的而两个底角中有一个非锐角，那么直接进行线性插值；</li><li>若两个底角均为锐角，则使用二次bezier曲线插值；并且要保证多边形的封闭性，即其和为0。</li></ol><h4 id="FFD方法"><a href="#FFD方法" class="headerlink" title="FFD方法"></a>FFD方法</h4><p>将变形物体嵌入一个简单柔软的实体中，这个包含嵌入物的实体的变形，是嵌入物发生相应的变形。</p><ol><li>主要为以下几个步骤：先构造一个足够大的三参数自由体，然后将想要变形的物体嵌入到自由体重，各点都可以对张量积bezier体求反参数，然后通过bezier体改变控制顶点作变形了最后对变形体上的各点由参数按新的控制顶点计算点变形后的位置，得到新的变形体。</li><li>直接操作FFD的算法为DFFD，在DFFD中，用户可以直接选定物体上的一点，并且给出其想要变换到的目标位置，然后算法可以自动计算出控制点需要的变换。</li><li>DFFD优点：为方便用户操作；</li><li>DFFD缺点：但是存在无法块计算控制点的目标位置，以及支持实时交互的动画变形控制。<ol><li>这里涉及到多点约束条件的分解：一个包含h点约束条件下的DFFD问题可以分解为h个单点约束条件下的DFFD问题依次串联而成。故可以得到显式解；</li><li>基于权值修改：也可以修改权值实现</li></ol></li></ol><h2 id="非真实感绘制"><a href="#非真实感绘制" class="headerlink" title="非真实感绘制"></a>非真实感绘制</h2><h3 id="非真实感图形"><a href="#非真实感图形" class="headerlink" title="非真实感图形"></a>非真实感图形</h3><p>也称风格化绘制，其主要途径为创作媒介的计算机模拟和创作方法和风格的计算机模拟，目的是为了生成和照片一样的真实图像效果，源于真实，超越真实，使用抽象的模型传达信息，重要加强无关弱化或者去除。应用在于艺术，科学成果可视化，技术产品图示教育等。</p><h3 id="创作媒介的计算机模拟："><a href="#创作媒介的计算机模拟：" class="headerlink" title="创作媒介的计算机模拟："></a>创作媒介的计算机模拟：</h3><p>研究对象：模拟笔墨纸等；方法为：模拟媒介的微观几何结构和模拟和滑键微观物理规律，构建方程或函数等。</p><h4 id="铅笔画："><a href="#铅笔画：" class="headerlink" title="铅笔画："></a>铅笔画：</h4><p>作画材料略，绘制单元为笔画</p><h4 id="水彩模拟："><a href="#水彩模拟：" class="headerlink" title="水彩模拟："></a>水彩模拟：</h4><p>研究纸对液体的流动和色素沉积效果，将纸分解为单元，使用细胞自动机（这是啥）求解，模拟效果为笔画轮廓变深、液体回流，水流扩散风格等</p><h4 id="水墨风格模拟，"><a href="#水墨风格模拟，" class="headerlink" title="水墨风格模拟，"></a>水墨风格模拟，</h4><p>建模为骨架模型和分叉模型。</p><p>总结下来，创作媒介的计算机模拟：模拟自然创作媒介，主要基于物理建模；-多使用真实参数，但有时应用虚拟的参数可以产生真实世界无法出现的增强效果；-效率非常重要：要求实时处理；可以在动漫创作中进行辅助创作，提高效率。今后可能发展方向：提高常用创作媒介的仿真程度；尝试新的创作媒介模拟。</p><h3 id="基于图像的非真实感绘制："><a href="#基于图像的非真实感绘制：" class="headerlink" title="基于图像的非真实感绘制："></a>基于图像的非真实感绘制：</h3><p>目的是模拟真实艺术创作的效果，大多数创作都是画家一笔一笔画出来的；研究思路为基于笔划绘制，笔划建模和笔划布置。点画图和马赛克图；图像类比。</p><p>总结下来：从模拟艺术风格的效果和画家艺术创作的过程入手进行研究；自动的算法可以生成形似的效果，结果可以体现出对应画种的基本特征；用户交互可以提高作品的艺术感程度：如用户输入画面布局和创意。可能发展的方向为针对画面的布局和整体艺术特征进行研究基于学习的艺术家创作特征提取与应用。</p><h3 id="基于物体模型的非真实感绘制："><a href="#基于物体模型的非真实感绘制：" class="headerlink" title="基于物体模型的非真实感绘制："></a>基于物体模型的非真实感绘制：</h3><p>主要研究的是素描，钢笔画等线条画，重点在于连续的三维模型特征提取和表现，基本思路是考察人们对三维模型的额感觉，目前应用为主曲率分析。可能发展方向为在视点变换和物体放缩时的连续性保持以及大规模三维场景的非真实感绘制</p><h3 id="基于视频的非真实感绘制："><a href="#基于视频的非真实感绘制：" class="headerlink" title="基于视频的非真实感绘制："></a>基于视频的非真实感绘制：</h3><p>是将一个真实拍摄的视频转换为某种艺术风格动画，主要研究思路为基于交互的视频高层结构信息分析和基于底层的光流算法。这个专题难点在于艺术风格绘制下的时空连续性保持是难点，且数据量过大，处理效率低，因此可能发展方向为稳定搞笑的视频结构分析和利用GPU和多核CPU并行视频处理。</p><h3 id="基于大规模数据的非真实感绘制（略）"><a href="#基于大规模数据的非真实感绘制（略）" class="headerlink" title="基于大规模数据的非真实感绘制（略）"></a>基于大规模数据的非真实感绘制（略）</h3><h2 id="基于图像的图形技术"><a href="#基于图像的图形技术" class="headerlink" title="基于图像的图形技术"></a>基于图像的图形技术</h2><h3 id="传统的图形技术"><a href="#传统的图形技术" class="headerlink" title="传统的图形技术"></a>传统的图形技术</h3><p>是几何建模-&gt;光照建模-&gt;光线跟踪或辐射度绘制，而基于图像的图形技术是从图像到图像，避开了复杂的几何建模过程。而现代是从图像到图像，避开了复杂的几何建模过程。因此出现了新的图形流水线：由场景建模、光照模型和rendering转变为了已有图像图形视频处理。即利用获取的BTF,BRDF和动态视频进行相应的处理和渲染是当前图形学的主要特征。</p><h3 id="基于图像的绘制技术："><a href="#基于图像的绘制技术：" class="headerlink" title="基于图像的绘制技术："></a>基于图像的绘制技术：</h3><h4 id="视图插值"><a href="#视图插值" class="headerlink" title="视图插值"></a>视图插值</h4><p>问题来源虚拟博物馆/Quick Time VR（三维场景采样，在采样点处生成圆柱环境映照。用离用户视点最近的采样点处的环境映照生成画面）。</p><p>通过视图插值我们可以产生非常逼真且视觉效果很好的图像，尽管其算是二维图像变化，但是其有效图像变形能体现三维世界的物体自然过度。</p><h4 id="平行视图插值"><a href="#平行视图插值" class="headerlink" title="平行视图插值"></a>平行视图插值</h4><p>通过移动相机代替以动物体来产生同样的两幅图像，称之为平行视图；若能够产生平行视图，那么线性图像插值能够生成新的投影视角，我们将这种形式的投影矩阵的相机/视点称为平行相机或平行视点，对其进行线性插值。</p><h4 id="层次图像存储"><a href="#层次图像存储" class="headerlink" title="层次图像存储"></a>层次图像存储</h4><p>考虑到离视点较远的景物，在前后帧画面，上的投影往往变化不大，一个自然的想法是将景物在前一帧画面中的投影图像存储起来，并以之为纹理映射到一-个四边形上，来近似取代该景物在后续画面上的绘制。由此可大大提高绘制效率。</p><h4 id="全景函数造型技术"><a href="#全景函数造型技术" class="headerlink" title="全景函数造型技术"></a>全景函数造型技术</h4><p>全景函数是一个参数化函数，定义空间任一一点处任意时刻的波长范围内的可见信息（函数略），这个函数事实上刻画了场景中任一一点的环境映照。基于图像绘制问题可以描述为：给定全景函数的离散样本几何，基于图像绘制技术的目标是生成全景函数的一个连续表示。后来改进为光场函数。</p><h4 id="生成投影矩阵相对应的视图："><a href="#生成投影矩阵相对应的视图：" class="headerlink" title="生成投影矩阵相对应的视图："></a>生成投影矩阵相对应的视图：</h4><p>预变形-&gt;图像变形-&gt;后变形。</p><h3 id="基于图像的漫游技术"><a href="#基于图像的漫游技术" class="headerlink" title="基于图像的漫游技术"></a>基于图像的漫游技术</h3><p>从单张照片、油画、图片作动画而非新的idea，如固定画面的北京，移动画中 的任务或动物，对图像作几何变形等。这个技术在不知道三维场景的几何结构下，从其二维图像生成计算机动画的情况下困难但有意义。其涉及到的关键是画面的尽头的确切位置很难确定，且由于缺乏三维信息，需要人工指定。</p><h3 id="色彩迁移"><a href="#色彩迁移" class="headerlink" title="色彩迁移"></a>色彩迁移</h3><p>将已有图像的色彩传递到目标图像，对灰度图像彩色化。</p><p>基于graph-cut彩色化原理：交互式操作，用户标记若干颜色，使用graph-cut进行分割（快速分离出需要着色的区域）并进行快速填充；</p><p>基于YIQ颜色空间；</p><h3 id="内容敏感的图像缩放"><a href="#内容敏感的图像缩放" class="headerlink" title="内容敏感的图像缩放"></a>内容敏感的图像缩放</h3><h4 id="基本想法"><a href="#基本想法" class="headerlink" title="基本想法"></a>基本想法</h4><p>为了适应不同大小、长宽比的显示器，图像会不可避免的被变形。而这种变形希望在缩放过程尽可能的保持图像中的重要性区域的比例</p><h4 id="相关技术"><a href="#相关技术" class="headerlink" title="相关技术"></a>相关技术</h4><p>图像中重要区域检测。接缝雕刻的不足：容易破坏物体结构，且处理速度较慢。后续由基于可伸缩性图的缩放算法。</p><h4 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h4><p>在所有方向上的处理有：</p><ol><li><p>基于网格变形，但是容易产生接近水平或垂直的网格线，不能很好地分布扭曲。</p></li><li><p>后续由基于共形能量的方法。共形能量方法优点能够更好的在各个方向上分布扭曲，采用灵活的共形约束方式，有利于更优化地分布扭曲且更好地保持整体特征且速度较快。</p></li></ol><h2 id="网格参数化和几何图像技术"><a href="#网格参数化和几何图像技术" class="headerlink" title="网格参数化和几何图像技术"></a>网格参数化和几何图像技术</h2><p>网格参数化技术包括多面体参数化，球面参数化和平面参数化。重点在于几何图像技术和复杂拓扑下的网格切割路径选取算法。</p><h4 id="参数化原因"><a href="#参数化原因" class="headerlink" title="参数化原因"></a>参数化原因</h4><p> 由于网格曲面模型灵活高效（相较于隐式曲面，参数曲面之类的），在工业界广泛使用。</p><p>网格参数化关注于如何在网格曲面和给定参数域之间建立一个映射关系，是一个基本技术。</p><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>纹理映射（需要尽量保角和均匀平面参数化）；网格重剖；几何变形；形状分析；图像矢量化。</p><h3 id="网格参数化的分类"><a href="#网格参数化的分类" class="headerlink" title="网格参数化的分类"></a>网格参数化的分类</h3><p>多面体参数化，球面参数化和平面参数化。</p><h4 id="多面体参数化"><a href="#多面体参数化" class="headerlink" title="多面体参数化"></a>多面体参数化</h4><p>方法是由将一张复杂的网格映射到一个与他同拓扑的相对简单网格上，这个简单的网格是所谓的基网格；用基网格作为参数域实际上就是将原网格曲面分割为很多面片，每个面片对应基网格上的一个面。第一步需要建立一个与原曲面同拓扑的基网格，可以通过将原网格进行化简；然后在原网格和基网格之间建立映射关系（具体方法略）。优点为变形小应用广，但是由于不同面对应不同的参数域，因此在参数域的交界（即面的交界）</p><h4 id="球面参数化"><a href="#球面参数化" class="headerlink" title="球面参数化"></a>球面参数化</h4><p>对于亏格为0的封闭网格，我们可以将网格的霉变想象成一根皮筋，若他套在塑料球外面，则可以将其包住，这样就建立了原网格到球面的映射关系。</p><p>参数化方法为边折叠操作将网格化简化为一个凸多面体，然后使用中心投影对这个凸多面体建立一个球面映射，从这个初始映射触发，通过点分裂操作将图多面体还原为原始网格，每还原一个点都计算出该点的球面参数，最终生成原网格的球面映射。</p><p>其核心问题是：如何保证参数化的网格不产生边翻转（即为一满射）。</p><p>其缺点为对网格拓扑有亏格为0的限制，否则需要切开，切割路径也很复杂，因此切割不如之后的直接映射到平面。</p><h4 id="平面参数化"><a href="#平面参数化" class="headerlink" title="平面参数化"></a>平面参数化</h4><p>与参数曲面一样，我们同样希望将网格曲面映射到平面上一个有限的区域内，如果曲面与圆盘同拓扑且有界，我们可以很容易将其拍到平面上，同时利用方法减小变形。</p><p>其方法有很多：基于顶点坐标表示的方法，基于角度表示的方法和基于圆包的方法（Circle Packing），这些方法都关注如何让参数化前后的网格扭曲尽量减小。</p><p>对于拓扑结构复杂的曲面，我就必须将曲面切开，传统方法是将曲面分割为若干与圆盘同拓扑的面片，再将么个面片映射到平面上的一个片，最后利用atlas方法把这些片合理的分布到一个指定的区域内（一般为正方形）。</p><p>这种方法主要应用在纹理映射中：分片越多变形越小，分片越少变形越大，我们需要将整个曲面映射为一片且减少变形，而理论上任何一个联通的二流形曲面都可以找到一条切割路径将其曲面展开，使之与圆盘同拓扑，继而将其映射到平面上。</p><p>其重点是切割路径的选择，而切割路径的选择分为两步：</p><ol><li>找出网格上的突起位置作为切割点；</li><li>然后找到一条连接有所有切割垫的尽量短的路径作为切割路径，若存在边界则必须与边界相连。</li></ol><h4 id="回路到骨架的收缩"><a href="#回路到骨架的收缩" class="headerlink" title="回路到骨架的收缩"></a>回路到骨架的收缩</h4><p>回路上每条边都被制定一唯一标识，往内部传播。由于在收缩过程中会出现锯齿状因此届时对steiner和terminal之间的路径用最短路径代替</p><h3 id="切割点的计算："><a href="#切割点的计算：" class="headerlink" title="切割点的计算："></a>切割点的计算：</h3><h4 id="切割点的选择"><a href="#切割点的选择" class="headerlink" title="切割点的选择"></a>切割点的选择</h4><p>可有选择所有点的局部曲率，选择大的作为切割点，或者将曲面方程划到单位圆中，再在参数域上找到变形最大最明显的一些方法。切割路径实际上就是一个网的Steiner树（在网上连接若干个给顶点的最短树），其为NP问题，只能近似求解。</p><h4 id="切割方法"><a href="#切割方法" class="headerlink" title="切割方法"></a>切割方法</h4><ol><li><p>采用增量法，每增加一个切割点，就把该点到当前切割路径的最短路径加入当前切割路径中。</p></li><li><p>另有一个通过所有短点寻找回路的启发式算法，启发策略为回路长度最短，通过对回路的收缩，得到一个端点的骨架，最后将骨架拉直进行切割路径输出，其需要进行回路自交检测。</p></li><li><p>回路的计算，我们需要构造一个完全图（由所有端点和他们之间的最短路径做为权重构成），然后求出一个MST，沿MST遍历一圈可以得到一个有向回路，回路中包含重复则去除重复端点。</p></li></ol><h3 id="几何图像技术"><a href="#几何图像技术" class="headerlink" title="几何图像技术"></a>几何图像技术</h3><h4 id="关注方向"><a href="#关注方向" class="headerlink" title="关注方向"></a>关注方向</h4><p>如何将一个二维网格流形使用均匀参数域的图像来进行表示。其目的是通过几何图像技术，使得许多图像处理技术能够直接应用到网格模型上，其技术核心是平面参数化。</p><h4 id="构造过程"><a href="#构造过程" class="headerlink" title="构造过程"></a>构造过程</h4><ol><li>先将连通的二维网格流形切割并展开成为一个与圆盘同胚的网格；</li><li>然后将展开后的圆盘进行平面参数化，参数化到个正方形区域；</li><li>最后对正方形区域进行均匀采样，计算采样点对应原网格模型上的坐标及法向量，存储为“几何图像”。</li></ol><h4 id="记录法向量的原因"><a href="#记录法向量的原因" class="headerlink" title="记录法向量的原因"></a>记录法向量的原因</h4><p>由于在没有法向量的情况下，会对几何图像进行一定程度的压缩，将会严重影响绘制网格的模型质量，故需要法向量信息；且有了法向量信息，即使几何图像进行了压缩，人可以绘制出高质量的网格模型</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形学 </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷官方题单——搜索题解</title>
      <link href="/2020/05/01/luo-gu-guan-fang-ti-dan-sou-suo-ti-jie/"/>
      <url>/2020/05/01/luo-gu-guan-fang-ti-dan-sou-suo-ti-jie/</url>
      
        <content type="html"><![CDATA[<p>搜索一般我们都分为DFS和BFS，其中设计到回溯，剪枝的技巧。</p><p>但是一般我们都将搜索视作暴力，但是比纯粹的暴力会快不少，并且可以通过搜索获得小规模问题从而帮助推导后续的问题。</p><p>最后提醒一下，DFS是存在最大值性质的，BFS是存在最小值性质的，因此除非题目挖坑，否则不要轻易的用BFS解决最小值问题。</p><h2 id="题目0：八皇后-Checker-Challenge"><a href="#题目0：八皇后-Checker-Challenge" class="headerlink" title="题目0：八皇后 Checker Challenge"></a>题目0：八皇后 Checker Challenge</h2><p>八皇后问题是学习数据结构的时候的必学问题了，实际上考察的是DFS+剪枝，因为有些方法在搜索过程中，已经违反了题目的要求，没有必要继续搜索下去了。注意回溯的时候记得恢复状态</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> ans<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> book<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>sum <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>book<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>book<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>book<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token operator">+</span> n <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//同一行，同一列，同一对角线,其中同一对角线可以考虑结合直线的一次方程</span>            ans<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            book<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> book<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> book<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token operator">+</span> n <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> book<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> book<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>x <span class="token operator">+</span> n <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目1：kkksc03考前临时抱佛脚"><a href="#题目1：kkksc03考前临时抱佛脚" class="headerlink" title="题目1：kkksc03考前临时抱佛脚"></a>题目1：kkksc03考前临时抱佛脚</h2><p>原题，略。</p><h2 id="题目2：马的遍历"><a href="#题目2：马的遍历" class="headerlink" title="题目2：马的遍历"></a>题目2：马的遍历</h2><p>BFS模板题，只需要存储马可以跑到的地方然后逐个填数字即可，注意最后需要把起点归0。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> xx<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> yy<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> map<span class="token punctuation">[</span><span class="token number">402</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">402</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Node <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>Node<span class="token operator">></span>q<span class="token punctuation">;</span>    map<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">161604</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Node t<span class="token punctuation">;</span>    t<span class="token punctuation">.</span>x <span class="token operator">=</span> a<span class="token punctuation">,</span> t<span class="token punctuation">.</span>y <span class="token operator">=</span> b<span class="token punctuation">,</span> t<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> dx <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x <span class="token operator">+</span> xx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> dy <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>y <span class="token operator">+</span> yy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dx <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> dx <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> dy <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> dy <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Node temp<span class="token punctuation">;</span>                temp<span class="token punctuation">.</span>x <span class="token operator">=</span> dx<span class="token punctuation">,</span> temp<span class="token punctuation">.</span>y <span class="token operator">=</span> dy<span class="token punctuation">,</span> temp<span class="token punctuation">.</span>s <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    map<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-5d"</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目3：奇怪的电梯"><a href="#题目3：奇怪的电梯" class="headerlink" title="题目3：奇怪的电梯"></a>题目3：奇怪的电梯</h2><p>要找最小值，首先想到使用宽搜的方法，即我们将开始的地方放入队列，然后我们得到队头元素，然后按照题目要求到达能到（上和下）的地方，并且将这个地方入队。一直循环到队列空，那么到时候ans存储的就是所需要的按钮次数。    </p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> F<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Floor <span class="token punctuation">{</span>     <span class="token keyword">int</span> id<span class="token punctuation">,</span> step<span class="token punctuation">;</span> <span class="token punctuation">}</span>ans<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>Floor<span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>F<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Floor temp<span class="token punctuation">{</span> a<span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ans <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span>id <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span>id <span class="token operator">+</span> F<span class="token punctuation">[</span>ans<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>ans<span class="token punctuation">.</span>id <span class="token operator">+</span> F<span class="token punctuation">[</span>ans<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Floor temp_1<span class="token punctuation">{</span> ans<span class="token punctuation">.</span>id <span class="token operator">+</span> F<span class="token punctuation">[</span>ans<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span>step <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp_1<span class="token punctuation">)</span><span class="token punctuation">;</span>            vis<span class="token punctuation">[</span>ans<span class="token punctuation">.</span>id <span class="token operator">+</span> F<span class="token punctuation">[</span>ans<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span>id <span class="token operator">-</span> F<span class="token punctuation">[</span>ans<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>vis<span class="token punctuation">[</span>ans<span class="token punctuation">.</span>id <span class="token operator">-</span> F<span class="token punctuation">[</span>ans<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Floor temp_2<span class="token punctuation">{</span> ans<span class="token punctuation">.</span>id <span class="token operator">-</span> F<span class="token punctuation">[</span>ans<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span>step <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp_2<span class="token punctuation">)</span><span class="token punctuation">;</span>            vis<span class="token punctuation">[</span>ans<span class="token punctuation">.</span>id <span class="token operator">-</span> F<span class="token punctuation">[</span>ans<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">.</span>id <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目4：Meteor-Shower-S"><a href="#题目4：Meteor-Shower-S" class="headerlink" title="题目4：Meteor Shower S"></a>题目4：Meteor Shower S</h2><p>最少时间，依旧需要宽搜，但是这道题是属于很多细节的题，所以看代码的注释把。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> Meteor<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> time<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">int</span> t<span class="token punctuation">[</span><span class="token number">305</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">305</span><span class="token punctuation">]</span><span class="token punctuation">,</span> book<span class="token punctuation">[</span><span class="token number">305</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">305</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span>Meteor<span class="token operator">></span>q<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> temp_x<span class="token punctuation">,</span> temp_y<span class="token punctuation">,</span> temp_t<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp_x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp_y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp_t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp_t <span class="token operator">&lt;</span> t<span class="token punctuation">[</span>temp_x<span class="token punctuation">]</span><span class="token punctuation">[</span>temp_y<span class="token punctuation">]</span> <span class="token operator">||</span> t<span class="token punctuation">[</span>temp_x<span class="token punctuation">]</span><span class="token punctuation">[</span>temp_y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            t<span class="token punctuation">[</span>temp_x<span class="token punctuation">]</span><span class="token punctuation">[</span>temp_y<span class="token punctuation">]</span> <span class="token operator">=</span> temp_t<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> nx <span class="token operator">=</span> temp_x <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ny <span class="token operator">=</span> temp_y <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> temp_t <span class="token operator">&lt;</span> t<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                t<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span> <span class="token operator">=</span> temp_t<span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    Meteor begin<span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    book<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>begin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Meteor p <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> now_x <span class="token operator">=</span> p<span class="token punctuation">.</span>x <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> now_y <span class="token operator">=</span> p<span class="token punctuation">.</span>y <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>now_x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> now_y <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> book<span class="token punctuation">[</span>now_x<span class="token punctuation">]</span><span class="token punctuation">[</span>now_y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>now_x<span class="token punctuation">]</span><span class="token punctuation">[</span>now_y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> p<span class="token punctuation">.</span>time <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> t<span class="token punctuation">[</span>now_x<span class="token punctuation">]</span><span class="token punctuation">[</span>now_y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Meteor ans<span class="token punctuation">{</span> now_x <span class="token punctuation">,</span>now_y <span class="token punctuation">,</span>p<span class="token punctuation">.</span>time <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>                book<span class="token punctuation">[</span>now_x<span class="token punctuation">]</span><span class="token punctuation">[</span>now_y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">[</span>now_x<span class="token punctuation">]</span><span class="token punctuation">[</span>now_y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目5：选数"><a href="#题目5：选数" class="headerlink" title="题目5：选数"></a>题目5：选数</h2><p>原题，略。</p><h2 id="题目6：PERKET"><a href="#题目6：PERKET" class="headerlink" title="题目6：PERKET"></a>题目6：PERKET</h2><p>原题，略。</p><h2 id="题目7：吃奶酪"><a href="#题目7：吃奶酪" class="headerlink" title="题目7：吃奶酪"></a>题目7：吃奶酪</h2><p>原题，略。</p><h2 id="题目8：迷宫"><a href="#题目8：迷宫" class="headerlink" title="题目8：迷宫"></a>题目8：迷宫</h2><p>要找到所有的通路，那么就要搜索所有的可能，找某条道路的方法是DFS，所以我们DFS后，ans++即可。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> map<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool temp<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">,</span> end_x<span class="token punctuation">,</span> end_y<span class="token punctuation">,</span> begin_x<span class="token punctuation">,</span> begin_y<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> end_x <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> end_y<span class="token punctuation">)</span><span class="token punctuation">{</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>x <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>x <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>x <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                temp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span> T<span class="token punctuation">,</span> M<span class="token punctuation">,</span> ob_x<span class="token punctuation">,</span> ob_y<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>M<span class="token punctuation">,</span> <span class="token operator">&amp;</span>T<span class="token punctuation">,</span> <span class="token operator">&amp;</span>begin_x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>begin_y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>end_x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>end_y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> T<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ob_x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ob_y<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">[</span>ob_x<span class="token punctuation">]</span><span class="token punctuation">[</span>ob_y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>begin_x<span class="token punctuation">,</span> begin_y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目9：单词接龙"><a href="#题目9：单词接龙" class="headerlink" title="题目9：单词接龙"></a>题目9：单词接龙</h2><p>找到最长的字符串，那么我们就联想到DFS。维护一个全局变量ans，然后每次进入一层DFS都直接和之前的ans和的temp_ans取最大值，最后结束即可。</p><p>难点在于重叠的处理，check函数即可。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> dic_cnt<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>string dic<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">></span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span>bool <span class="token function">check</span><span class="token punctuation">(</span>string origin<span class="token punctuation">,</span> string checked<span class="token punctuation">,</span> <span class="token keyword">int</span> check_start<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> origin<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> check_start<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">-</span> check_start <span class="token operator">+</span> i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>origin<span class="token punctuation">[</span>len <span class="token operator">-</span> check_start <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">!=</span> checked<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> origin<span class="token punctuation">,</span> string added<span class="token punctuation">,</span> <span class="token keyword">int</span> add_start<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> added<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> add_start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> origin <span class="token operator">+</span><span class="token operator">=</span> added<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>string now<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dic_cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                string temp <span class="token operator">=</span> now<span class="token punctuation">;</span>                <span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> now<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                dic_cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                dic_cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> start<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目10：单词方阵"><a href="#题目10：单词方阵" class="headerlink" title="题目10：单词方阵"></a>题目10：单词方阵</h2><p>DFS+八方向检查，DFS接口额外增加一个项确定方向，代码有坑请谨慎复制。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">struct</span> Cordinate<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span>memo<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> map<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"yizhong"</span><span class="token punctuation">;</span><span class="token keyword">int</span> book<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> direct<span class="token punctuation">,</span> <span class="token keyword">int</span> cur<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            book<span class="token punctuation">[</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> dx <span class="token operator">=</span> x <span class="token operator">+</span> d<span class="token punctuation">[</span>direct<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dy <span class="token operator">=</span> y <span class="token operator">+</span> d<span class="token punctuation">[</span>direct<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">||</span> map<span class="token punctuation">[</span>dx<span class="token punctuation">]</span><span class="token punctuation">[</span>dy<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">[</span>cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            memo<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">,</span> memo<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> direct<span class="token punctuation">,</span> cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> x <span class="token operator">=</span> i <span class="token operator">+</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">=</span> j <span class="token operator">+</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'i'</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目11：自然数拆分"><a href="#题目11：自然数拆分" class="headerlink" title="题目11：自然数拆分"></a>题目11：自然数拆分</h2><p>典型的深搜题目，粗暴的不能再粗暴了。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d+"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> ans<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">,</span> m <span class="token operator">-</span><span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">dfs</span><span class="token punctuation">(</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    m <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目12：Lake-Counting-S"><a href="#题目12：Lake-Counting-S" class="headerlink" title="题目12：Lake Counting S"></a>题目12：Lake Counting S</h2><p>连通块的典型题目，BFS和DFS均可，就看自己怎么玩。</p><p>下面是BFS，但是TLE了别怪我嗷。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> cordinate <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span>cordinate<span class="token operator">></span> q<span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> ans<span class="token punctuation">;</span><span class="token keyword">char</span> map<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'W'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cordinate temp<span class="token punctuation">{</span> i<span class="token punctuation">,</span>j <span class="token punctuation">}</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    map<span class="token punctuation">[</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> now_x <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x <span class="token operator">+</span> dx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> now_y <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>y <span class="token operator">+</span> dy<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>now_x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> now_x <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> now_y <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> now_y <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>now_x<span class="token punctuation">]</span><span class="token punctuation">[</span>now_y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'W'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            cordinate temp<span class="token punctuation">{</span> now_x<span class="token punctuation">,</span>now_y <span class="token punctuation">}</span><span class="token punctuation">;</span>                            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DFS</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> ans<span class="token punctuation">;</span><span class="token keyword">char</span> map<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> now_x<span class="token punctuation">,</span> now_y<span class="token punctuation">;</span>    map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> now_x <span class="token operator">=</span> x <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> now_y <span class="token operator">=</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>now_x<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> now_x<span class="token operator">></span>n <span class="token operator">||</span> now_y<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> now_y<span class="token operator">></span>m <span class="token operator">||</span> map<span class="token punctuation">[</span>now_x<span class="token punctuation">]</span><span class="token punctuation">[</span>now_y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        map<span class="token punctuation">[</span>now_x<span class="token punctuation">]</span><span class="token punctuation">[</span>now_y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>now_x<span class="token punctuation">,</span> now_y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            cin <span class="token operator">>></span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为了不想处理空格不择手段</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'W'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目13：填涂颜色"><a href="#题目13：填涂颜色" class="headerlink" title="题目13：填涂颜色"></a>题目13：填涂颜色</h2><p>DFS+染色，也是搜索的基本用途了。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> book<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> x<span class="token operator">></span>n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">||</span> y<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> y<span class="token operator">></span>n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">||</span> book<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    book<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目14：字串变换"><a href="#题目14：字串变换" class="headerlink" title="题目14：字串变换"></a>题目14：字串变换</h2><p>讲真他不放在这个踢单我真会认为是一个字符串写自动机的问题- -。</p><p>首先是最小步骤，因此我们应该优先想到BFS。同时由于STL=sometimes time limit，所以这个地方为了防止TLE应当手写队列。</p><p>其核心就是字符串入队看一下有无可修改方法，把修改之后的字符串入队列，记录修改的次数。</p><p>当然如果你不想用string的库函数，那么您可以手写KMP。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>using namespace std<span class="token punctuation">;</span>string a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> from<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Queue <span class="token punctuation">{</span>    string cur<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span>q<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> q_head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> q_tail <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> from<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">>></span> to<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">)</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>    cnt<span class="token operator">--</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>q_tail<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> a<span class="token punctuation">,</span> q<span class="token punctuation">[</span>q_tail<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q_head <span class="token operator">&lt;</span> q_tail<span class="token punctuation">)</span><span class="token punctuation">{</span>        q_head<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>q_head<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO ANSWER!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> change_pos <span class="token operator">=</span> q<span class="token punctuation">[</span>q_head<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>from<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>change_pos <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">else</span><span class="token punctuation">{</span>                    q_tail<span class="token operator">++</span><span class="token punctuation">;</span>                    q<span class="token punctuation">[</span>q_tail<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> q<span class="token punctuation">[</span>q_head<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">,</span> q<span class="token punctuation">[</span>q_tail<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">=</span> q<span class="token punctuation">[</span>q_head<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    q<span class="token punctuation">[</span>q_tail<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>change_pos<span class="token punctuation">,</span> from<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> to<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>q_tail<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> q<span class="token punctuation">[</span>q_tail<span class="token punctuation">]</span><span class="token punctuation">.</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>                    change_pos <span class="token operator">=</span> q<span class="token punctuation">[</span>q_head<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>from<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> change_pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目15：Corn-Maze-S"><a href="#题目15：Corn-Maze-S" class="headerlink" title="题目15：Corn Maze S"></a>题目15：Corn Maze S</h2><p>很简单细节很多的BFS（因为要找最短时间），简单来说就是：判断装置自己判断自己，导致死循环，地图的处理以及其他乱七八糟的小坑点。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> map<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span> book<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> end_x<span class="token punctuation">,</span> end_y<span class="token punctuation">,</span> trans_pair_x<span class="token punctuation">,</span> trans_pair_y<span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> time<span class="token punctuation">;</span><span class="token punctuation">}</span> ans<span class="token punctuation">[</span><span class="token number">100050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">find_trans</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i <span class="token operator">==</span> x <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    trans_pair_x <span class="token operator">=</span> i<span class="token punctuation">,</span> trans_pair_y <span class="token operator">=</span> j<span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>        head<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>ans<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>ans<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>ans<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>ans<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">find_trans</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> ans<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> trans_pair_x<span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> trans_pair_y<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> now_x <span class="token operator">=</span> ans<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> now_y <span class="token operator">=</span> ans<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>now_x<span class="token punctuation">]</span><span class="token punctuation">[</span>now_y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> book<span class="token punctuation">[</span>now_x<span class="token punctuation">]</span><span class="token punctuation">[</span>now_y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                book<span class="token punctuation">[</span>now_x<span class="token punctuation">]</span><span class="token punctuation">[</span>now_y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                tail<span class="token operator">++</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> now_x<span class="token punctuation">,</span> ans<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> now_y<span class="token punctuation">,</span> ans<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>time <span class="token operator">=</span> ans<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>time <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>now_x <span class="token operator">==</span> end_x <span class="token operator">&amp;&amp;</span> now_y <span class="token operator">==</span> end_y<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&lt;</span> tail<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> s<span class="token punctuation">;</span>    <span class="token keyword">int</span> begin_x<span class="token punctuation">,</span> begin_y<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin <span class="token operator">>></span> s<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> s <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                begin_x <span class="token operator">=</span> i<span class="token punctuation">,</span> begin_y <span class="token operator">=</span> j<span class="token punctuation">;</span>                map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                end_x <span class="token operator">=</span> i<span class="token punctuation">,</span> end_y <span class="token operator">=</span> j<span class="token punctuation">;</span>                map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    book<span class="token punctuation">[</span>begin_x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin_y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> begin_x<span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> begin_y<span class="token punctuation">;</span>    <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三位数以1开头的只剩下四个数据结构的内容了，说明入门提单快刷完了（洛谷官方题单用的国外命名方式，因此1开头是基础，2开头是进阶。水题就快刷没了（贼难受）。</p><p>下一次更新就是数据结构的线性表了，实际上这部分的题就是基本的四个线性表：数组，链表，栈，队列的应用，里面或多或少牵扯到指针和其他的细节，反正不难便是了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法和程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程算法题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷官方题单——二分搜索和二分答案题解</title>
      <link href="/2020/04/29/luo-gu-guan-fang-ti-dan-er-fen-cha-zhao-yu-er-fen-da-an-ti-jie/"/>
      <url>/2020/04/29/luo-gu-guan-fang-ti-dan-er-fen-cha-zhao-yu-er-fen-da-an-ti-jie/</url>
      
        <content type="html"><![CDATA[<p>在上一个题解中我就说过，二分的方法一定是需要找到某种单调性。因此只要能找到符合条件的单调性，那么在这一个部分一定可以考虑用二分来解决这部分的问题。</p><h2 id="题目0：查找"><a href="#题目0：查找" class="headerlink" title="题目0：查找"></a>题目0：查找</h2><p>题目的单调性很简单，单调性就是数据是递增的，那么我们直接二分就行了，注意你数组从0开始还是从1开始哦。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">1000050</span><span class="token punctuation">]</span><span class="token punctuation">,</span> query<span class="token punctuation">[</span><span class="token number">100050</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp_mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>temp_mid<span class="token punctuation">]</span> <span class="token operator">>=</span> x<span class="token punctuation">)</span> right <span class="token operator">=</span> temp_mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> left <span class="token operator">=</span> temp_mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token keyword">return</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>query<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token function">search</span><span class="token punctuation">(</span>query<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目1：A-B-数对"><a href="#题目1：A-B-数对" class="headerlink" title="题目1：A-B 数对"></a>题目1：A-B 数对</h2><p>实际上这道题在题目说法不怎么好，应该要说至少这个数据是要递增的，否则不能二分。这道题最好的办法肯定是map。</p><p>map即映射，数学的函数懂吧，就是一个映射，所以你只要map构建的时候，$map&lt;A,B&gt;$的第一个数是输入的数字$A$，第二个数字是$A-B=C$转换为$B=A-C$。注意，map实际上也是一个数组，但是你输入的是$A$，其数组存储的是$B$，但是你可以通过$A$去寻找$B$的位置。所以这样在搜索的时候，直接可以去调用$map[A]$去寻找对应的数的个数，最后累加即可。</p><p>同时注意数据范围，若需要的差为1，一半为1一半为2，则会超过int的范围= =（没错wa了一百年）</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">200050</span><span class="token punctuation">]</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> book<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"a.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"a.out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        book<span class="token punctuation">[</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> book<span class="token punctuation">[</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目2：砍树"><a href="#题目2：砍树" class="headerlink" title="题目2：砍树"></a>题目2：砍树</h2><p>首先我们了解到，就是我们每砍一棵树，那么所需要的木材会逐渐减少，因此我们的答案是具备单调性的，因此可以使用二分来解决这道题。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">long</span> <span class="token keyword">long</span> tree<span class="token punctuation">[</span><span class="token number">1000050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">></span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span>  n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> tree_mmax <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree_mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>tree_mmax<span class="token punctuation">,</span> tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> tree_mmax<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> temp_mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> tree_mmax<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> temp_mid<span class="token punctuation">)</span> sum <span class="token operator">+</span><span class="token operator">=</span> tree<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> temp_mid<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> tree_mmax <span class="token operator">=</span> temp_mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> left <span class="token operator">=</span> temp_mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，实际上你可以使用直接排序，然后从后往前砍即可，代码略。</p><h2 id="题目3：一元三次方程求解"><a href="#题目3：一元三次方程求解" class="headerlink" title="题目3：一元三次方程求解"></a>题目3：一元三次方程求解</h2><p>如果你学过卡尔丹公式或者盛金公式，那么你可以直接用，但是我觉得你没学过（毕竟和抽代相关的内容，一般人不知道也正常）那么这里就可以考虑二分。</p><p>首先科普一下一个知识，若函数在某个区间内（无所谓开区间和闭区间，在极限的引入下都是无所谓的）有根，则对于其端点值的函数值乘积一定小于0，这样可以剪掉大部分无所谓的计算。</p><p>然后我们从$[-100,100]$依次从$-100$一个区间一个区间的循环就行了。</p><p>另解：牛顿迭代法</p><p>我们知道对于一个函数来说，只要在$x$处$f(x)$值不为无穷，那么其切线一定会与$x$轴相交，那么设其交点为$x_0$，那么交点$x_0$一定会和函数与$x$轴的交点靠近，于是使用这个方法可以无限逼近跟，最后只要其两点直接差小于给定的误差值$\epsilon$即可。</p><p>此处的单调性为：靠近根的距离是单调减少的。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">double</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">+</span> b <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">+</span> c <span class="token operator">*</span> x <span class="token operator">+</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> m<span class="token punctuation">,</span> fx_left<span class="token punctuation">,</span> fx_right<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%lf%lf%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        left <span class="token operator">=</span> i<span class="token punctuation">,</span> right <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        fx_left <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> fx_right <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fx_left <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf "</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fx_left <span class="token operator">*</span> fx_right <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">>=</span> <span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                m <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">calculate</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">calculate</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> left <span class="token operator">=</span> m<span class="token punctuation">;</span>                <span class="token keyword">else</span> right <span class="token operator">=</span> m<span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf "</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目4：烦恼的高考志愿"><a href="#题目4：烦恼的高考志愿" class="headerlink" title="题目4：烦恼的高考志愿"></a>题目4：烦恼的高考志愿</h2><p>将学校排序，然后每个学生找最靠近学校分数线的位置，然后前后最差比较即可。</p><p>单调性在于学校的分数被我们认为的弄成了有序。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> school<span class="token punctuation">[</span><span class="token number">1000050</span><span class="token punctuation">]</span><span class="token punctuation">,</span> students<span class="token punctuation">[</span><span class="token number">1000050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">&lt;</span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//freopen("a.in", "r", stdin);</span>    <span class="token comment" spellcheck="true">//freopen("a.out", "w", stdout);</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>school<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sort</span><span class="token punctuation">(</span>school<span class="token punctuation">,</span> school <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> m<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>school<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> right <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> m<span class="token punctuation">)</span> left <span class="token operator">=</span> m<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//printf("%d %d %d %d %d %d\n", school[1],students[i],left,school[left - 1],school[left], ans);</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>students<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> school<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> school<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>school<span class="token punctuation">[</span>left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">abs</span><span class="token punctuation">(</span>school<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">-</span> students<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目5：木材加工"><a href="#题目5：木材加工" class="headerlink" title="题目5：木材加工"></a>题目5：木材加工</h2><p>这里我们了解到，所有的答案一定小于原木和除以需要的原木段，因此我们可以将答案二分。</p><p>这里的单调性是答案只会单调减小。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp_sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp_sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>temp_sum <span class="token operator">>=</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">binary_ans</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;=</span> left<span class="token punctuation">)</span> <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">+</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">binary_ans</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">binary_ans</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">+</span><span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> sum <span class="token operator">/</span> n<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">binary_ans</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目6：跳石头"><a href="#题目6：跳石头" class="headerlink" title="题目6：跳石头"></a>题目6：跳石头</h2><p>题目要求选手们在比赛过程中的最短跳跃距离尽可能长，说明了我们要的答案的单调性——在某种意义上是递增的（在最小值满足的情况下，逐渐增大，则到了不满足的情况下，那么在不满足之前的情况下就是答案）。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">500050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> L<span class="token punctuation">,</span> N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">+</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> memo<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> pos <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&lt;=</span> M<span class="token punctuation">)</span> ans <span class="token operator">=</span> mid<span class="token punctuation">,</span> left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目7：路标设置"><a href="#题目7：路标设置" class="headerlink" title="题目7：路标设置"></a>题目7：路标设置</h2><p>还是一道二分答案，很典型的就是空旷指数最小值一定大于等于0（全满为0），那么我们只需要找到一个最大的，然后不断的把答案二分即可。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> L<span class="token punctuation">,</span> N<span class="token punctuation">,</span> K<span class="token punctuation">;</span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cnt <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> mid<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> mid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cnt<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">></span> K<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>K<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> L <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    memo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>memo<span class="token punctuation">[</span>N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> right <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目8：数列分段-Section-II"><a href="#题目8：数列分段-Section-II" class="headerlink" title="题目8：数列分段 Section II"></a>题目8：数列分段 Section II</h2><p>分析题目，求最大值的最小化，直接二分答案，于是我们需要考虑如何check答案是否可行。</p><p>考虑贪心：</p><ol><li><p>能加的就加上，不能则新开一个序列：</p></li><li><p>对于二分的值x，我们从数列从前往后扫：</p><ol><li>若sum大于了当前x，我们便赋值当前元素到sum，并且新的序列+1；</li><li>否则就sum累加；</li></ol></li><li><p>最后只需判断序列数是否大于等于输入的m就行了。</p></li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> memo<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">></span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span>bool <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span> sum <span class="token operator">+</span><span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> sum <span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt <span class="token operator">>=</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> right <span class="token operator">+</span><span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> right <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目9：银行贷款"><a href="#题目9：银行贷款" class="headerlink" title="题目9：银行贷款"></a>题目9：银行贷款</h2><p>实际上锁定一个收益率区间然后二分答案就行了（注意存在低于1的收益率）。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%lf%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">>=</span> <span class="token number">0.0001</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">+</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> n <span class="token operator">/</span> m <span class="token operator">*</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> right <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> left <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1lf\n"</span><span class="token punctuation">,</span> left <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目10：kotori的设备（蓝题预警）"><a href="#题目10：kotori的设备（蓝题预警）" class="headerlink" title="题目10：kotori的设备（蓝题预警）"></a>题目10：kotori的设备（蓝题预警）</h2><p>二分时间：</p><ol><li><p>验证的设备使用时间，若设备已有的能量大于使用时间需要的能量，忽略该设备；</p></li><li><p>否则充电，设备已有的能量等于使用时间需要的能量，并减去移动电源里设备需要的能量；</p></li><li><p>最后比较需要的能量总和和充电器最多提供的能量。</p></li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">double</span> a_sum<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">100050</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">100050</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">double</span> temp_ans<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> temp_all <span class="token operator">=</span> temp_ans <span class="token operator">*</span> p<span class="token punctuation">,</span> temp_sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> temp_ans <span class="token operator">&lt;=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        temp_sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> temp_ans <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> temp_sum <span class="token operator">&lt;=</span> temp_all<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> left <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">1e10</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a_sum <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>a_sum <span class="token operator">&lt;=</span> p<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">>=</span> <span class="token number">1e-6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">+</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> left <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> right <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.5lf\n"</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>吐槽下最后一道题的坑，这精度卡的。</p><ol><li>在九十分卡了十来分钟的a_sum必须是double，否则你必然WA两个点；</li><li>然后二分区间1E10，少了就会95分= =。</li></ol><p>实际上二分还是很好写的，如果是二分搜索直接写，二分答案就是需要写出一个合适的check函数，然后就可以开心做好二分了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法和程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程算法题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清华MOOC图形学基础：几何造型</title>
      <link href="/2020/04/28/qing-hua-mooc-tu-xing-xue-ji-chu-ji-he-zao-xing/"/>
      <url>/2020/04/28/qing-hua-mooc-tu-xing-xue-ji-chu-ji-he-zao-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="Bezier曲线和曲面"><a href="#Bezier曲线和曲面" class="headerlink" title="Bezier曲线和曲面"></a>Bezier曲线和曲面</h2><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><ol><li>图形学中产生真实感的图像的步骤：设定场景，通过渲染方程产生具有真实感的图像。因此引入几何造型设计场景；</li><li>物体的表示方式：显式，隐式，参数（我们应该找到以t的多项式表达的参数形式）。</li></ol><h3 id="Bezier曲线"><a href="#Bezier曲线" class="headerlink" title="Bézier曲线"></a>Bézier曲线</h3><ol><li><p>Bernstein多项式：伯恩斯坦多项式(Bernstein polynomial)是逼近连续函数的一系列多项式：记其中$B_{(i,n)} (t)$是第$i$个$n$阶Bernstein多项式：<br>$$<br>B_{(i,n)} (t)=C_n^i t^i (1-t)(n-i)=\frac {n!}{i!(n-i)!}t^i(1-t)^{n-i}(i=0,1,…,n)<br>$$</p></li><li><p>Bernstein多项式的性质：</p><ol><li>若$t\in(0,1)且i=1,2,…,n-1$时，$B_{i,n} (t)&gt;0$，若$t=0或1$，则$B_{i,n} (t)=0$；</li><li>若$i=0$，则$B_{(i,n)} (0)=1$，若$i\ne0$，则$B_{(i,n)} (0)=1$；</li><li>若$i\ne n$，则$B_{(i,n)} (1)=$0，若$i=n$，则$B_{(i,n)}=1$；</li><li>Unity:  $\displaystyle\sum_{i=0}^nB_{i,n}(t)\equiv1,t\in(0,1)$ ；</li><li>Symmetry: $B_{i,n} (1-t)=B_{n-i,n} (t)$；</li><li>Recursion: $B_{i,n} (t)=(1-t) B_{i,n-1}(t)+tB_{i-1,n-1} (t)$，即$n$阶Bernsten多项式是$n-1$阶Bernsten多项式的线性组合；</li><li>Derivation：$B_{i,n}’(t) =n[B_{i-1,n-1)} (t)-B_{i,n-1}(t)]$；</li><li>Maximum: $\frac in$；</li><li>Integral: $\int_0^1B_{i,n} (t)dt=\frac 1{n+1}$</li><li>Degree raising formula:<ol><li>$(1-t)B_{i,n}(t)=(1-\frac i{n+1})B_{i,n+}$；</li><li>$tB_{i,n}(t)=\frac {i+1}{n+1}B_{i+1,n+1}(t)$；</li><li>$B_{i,n}(t)=(1-\frac i{n+1})B_{i,n+1}(t)+\frac {i+1}{n+1}B_{i+1,n+1}(t)$。</li></ol></li></ol></li><li><p>连接向量表达曲线的方法。定义，给定控制顶点${P_i}$，曲线可以被定义为<br>$$<br>P(t)=\sum_{t=0}^nP_iB_{i,n}(t),t\in[0,1]<br>$$<br>且一条Bézier曲线一定是第一次Bézier曲线的包络（或者说具备闭包性质）。</p></li><li><p>Bézier曲线的性质：</p><ol><li>端点：$P(0)=P_0，P(1)=P_n$；</li><li>切向量$P’ (0)=n(P_1-P_0 )，P’ (1)=n(P_n-P_{n-1})$，即起点和终点处的切向量方向与控制多边形第一个和最后一个边的方向一致</li><li>二阶导数公式：$P’’(t)=n(n-1)\displaystyle\sum_{i=0}^{n-2}(P_{i+2}-2P_{i+1}+P_i)B_{i,n-2}(t)$；</li><li>k阶差分形式：$P^k(t)=\frac {n!}{(n-k)!}\displaystyle\sum_{i=0}^{n-k}\triangle^kP_iB_{i,n-k}(t), t\in[0,1]$；</li><li>对称性：存在一点使得曲线保留曲线的形状，但方向相反；</li><li>凸包性，曲线在控制曲线的凸包内；</li><li>几何不变性：不随坐标系变化。</li></ol></li><li><p>De Casteljau算法：由于<br>$$<br>P(t)=\displaystyle\sum_{t=0}^nP_i B_{i,n} (t)\<br>=\displaystyle\sum_{t=0}^nP_i[(1-t)B_{i,n-1}(t)+tB_{i-1,n-1} (t)]\<br>=\displaystyle\sum_{t=0}^n[(1-t) P_i+tP_{i+1}]B_{i,n-1} (t)<br>$$<br>故可以得到其递推公式<br>$$<br>P^k=\begin{cases} P_i,    k=0\<br>(1-t)P_i^{k-1}+tP_{i+1}^{k-z}  , k=1,2,…,n;i=0,1,…,n-k<br>\end{cases}<br>$$<br>即可得到所求点。</p></li><li><p>几何连续性：算术连续性在实际运用中存在一些困难和与常识的错误，故引入几何连续性：两个分别由控制点$P_i(i=0,1,…,n)，Q_j(j=0,1,…,n)$定义的两个Bézier曲线，两条曲线共享端点，且$a_i=P_i-P_(i-1),b_j=Q_j-Q_(j-1)$，则称之为一阶几何连续（共线）（二阶要求曲率一样）；</p></li><li><p>升阶公式；<br>$$<br>P_i^*=\frac i{n+1}P_{i-1}+(1-\frac i {n+1})P_i,(i=0,1,…,n+1)<br>$$</p></li><li><p>Bezier曲面：矩形域Bézier曲面（定义暂略）与三角域的转换（数学推导暂略）</p></li></ol><h2 id="B样条曲线曲面（B-spline）"><a href="#B样条曲线曲面（B-spline）" class="headerlink" title="B样条曲线曲面（B-spline）"></a>B样条曲线曲面（B-spline）</h2><ol><li><p>动机源于Runge-Kutta现象：高阶多项式很容易产生不稳定抖动。故以分段低阶连续连接，这就是样条——分段低阶多项式。</p></li><li><p>B样条内容：样条函数插值（解三对角方程），给定区间划分（与插值计算类似）和割点去搭建的所有样条函数组成了一个线性空间，线性空间基函数叫做B样条基函数；可以像Bezier曲线使用Bernsterin基函数一样，B样条曲线使用B样条基函数。</p></li><li><p>B样条曲线及其性质：</p><ol><li>公式：$P(t)=\sum <em>{i=0}^nP_iN</em>{i,k}(t),t\in[0,1]$</li><li>$P_i(i=0,1,…,n)$是控制点；</li><li>$N_{i,k}(t)(i=0,1,…n)$是第$i$个$k$阶B样条基函数；</li><li>注意的是，B样条基函数是由节点向量唯一决定的分段$k$阶多项式，节点向量是由一组非递减的实数序列：$t_0,t_1,…,t_{k-1},t_k,…,t_n,t_n,t_{n+1},…,t_{n+k-1},t{n+k}$;</li><li>和Bézier曲线相比，B样条动一点曲线只改变部分，而Bézier一变全变。</li></ol></li><li><p>B样条基函数定义</p><ol><li>de boor-cox递归函数：<br>$$<br>N_{i,1}(t)=\begin{cases}<br>1,t_i&lt;x&lt;t_{i+1}\\<br>0,Otherwise<br>\end{cases}<br>$$</li></ol></li></ol><p>$$<br>      N_{i,k}(t)=\frac {t-t_i}{t_{i+k}-t_i}N_{i,k-1}(t)+\frac{t_{i+k}-t}{t_{i+k}-t_i+1}N_{i+1,k-1}(t)<br>      $$</p><ol start="2"><li><p>其性质为:</p></li><li><p>非负性：$N_{i,k}(t)=\begin{cases}\ge0,t\in[t_i,t_{i+k}]\\=0,otherwise\end{cases}$;</p></li><li><p>归一性：$\displaystyle\sum_{i=0}^nN_{i,k}(t)=1,t\in(t_{k-1},t_{n+1})$;</p></li><li><p>求导公式：<br>   $$<br>   N_{i,k}’(t)=\frac {k-1}{t_{i+k-1}-t_i}N_{i,k-1}(t)+\frac {k-1}{t_{i+k}-t_{i+1}.}N_{i+1,k-1}(t)<br>   $$<br>   这里有个点是为了防止公式渲染失败</p></li><li><p>局部支撑性：$N_{i,k} (t)$是$[t_i,t_{i+k} ]$上的分段非零多项式。</p></li></ol><ol start="5"><li><p>均匀B样条：节点为等差数列均匀排布节点分布对应的是均匀B样条基函数。</p></li><li><p>准均匀B样条：均匀B样条不同，准均匀B样条的起始节点和终止节点都具有k的重复度，其并不具有Bézier曲线的端点性质，即均匀B样条起点和重点并不等于第一个和最后一个控制点，但是准均匀B样条具备端点性质。</p></li><li><p>分段Bézier曲线，起始和终止节点都具有k的重复度，其他节点都具有$k-1$的重复度，这样的所有曲线都是Bézier曲线，其不同曲线段相对独立，移动控制点只会影响所在的Bézier曲线段，其关于Bézier曲线的算法都可以同样地适用于分段Bézier曲线。但是其需要更多的参数和变量来控制——即更多的控制点和更多的节点。</p></li><li><p>非均匀B样条（重点讨论）：</p><ol><li><p>定义：在满足一般B样条的条件下，起始节点和终止节点的重复度均小于$k$，且其他节点的重复度均小于$k-1$；</p></li><li><p>性质：</p><ol><li><p>局部性：区间上的曲线仅有至多$k$个控制点决定，而修改控制点$P_i$仅改变对应区间$(t_i,t_{i+k})$的曲线；</p></li><li><p>连续性：$P(t)$在重复的结点$r$有$C^{k-1-r}$连续；</p></li><li><p>凸包性：非均匀B样条被包含在控制多边形的凸包内。特别的，若$t$是不同节点段$(t_i,t_{i+1}),k-1\le i \le n$，那么$P(t)$在控制点$P_{i-k+1},…,P_i$所围成的闭包内；</p></li><li><p>分段多项式性质：任何一个相邻节点确定的区间上，$P(t)$为一个关于$t$的次数不超过$k$的多项式；</p></li><li><p>导数公式:$P’(t)=\sum_{i=0}^n P_i N’<em>{i,k}(t)\\=(k-1)\sum</em>{i=0}^n(\frac{-P_{i-1}+P_i}{t_{i+k-1}-t_i})N_{i,k-1}(t),t\in[t_{k-1},t_{n+1}]$</p></li><li><p>几何不变性：曲线形状和位置相对于控制点的位置而不是坐标系；</p></li><li><p>变差缩减性：任何一个直线与B样条曲线的交点数目不会超过该直线与该B样条曲线的控制多边形的交点数目；</p></li><li><p>仿射不变性：由于<br>$$<br>A[P(t)]=\displaystyle\sum_{i=0}^nA[P_i]N_{i,k}(t),t\in[t_{k-1},t_{n+1}]<br>$$<br>故仿射变换后依旧成立；</p></li><li><p>直线保持性：若控制多边形退化为一条直线，则B样条曲线依然在这条直线上；</p></li><li><p>灵活性：可以构造出线段，尖点，切线等。</p></li></ol></li></ol></li><li><p>De boor算法——计算B样条曲线的一点，使用直线段进行割角并不断递归，最终在一定深度后可得到曲线上的某一点（可以理解为数分的闭区间套定理）；</p></li><li><p>节点插入：在不改变一个B样条的几何形状和阶的条件下增加一个新的节点，以此来增加B样条曲线的可控程度。而在插入新的节点向量后，基函数也会改变，故需要求新的控制顶点，因此有了下述算法</p></li><li><p>Boehm给出的算法公式：<br>$$<br>\begin{cases}<br>P_j^1=P_j,j=0,1,…,i-k+1，\\<br>P_j^1=(1-\beta_j)P_{j-1}+\beta_jP_j,j=i-k+2,…,i-r，\\<br>P_j^1=P_{j-1},j=i-r+1,…,n+1，<br>\end{cases}<br>$$<br>$$<br>\beta=\frac {t-t_j}{t_{j+k-1}-t_j}<br>$$</p><p>简略来说就是$0$到$i-k+1$和$i-r+1$到$n+1$不变，而对中间部分进行改变，$r$为新插入节点在节点序列中的重复度。</p></li><li><p>B样条曲面的数学定义：给定两个节点向量处于$U$和$V$两参数轴有：<br>$$<br>U=[u_0,u_1,…,u_{m+p}],V=[v_0,v_1,…,v_{n+q}]<br>$$<br>则$p\times q$的B样条曲面被定义为：<br>$$<br>P(u,v)=\displaystyle\sum_{i=0}^m\displaystyle\sum_{j=0}^nP_{ij}N_{i,p}(u)N_{j,q}(v)<br>$$<br>其中：</p><p>​    $P_{ij}$是B样条曲面的控制网格（特征网格）</p><p>​    $N_{i,p}(u)$和$N_{j,q}(v)$是B样条的分别对于$p$和$q$的的基础函数，并且对于任意方向，都可以有Boor-    Cox公式计算得到。</p><p>由于B样条曲线和Bezier曲线不能精确表示除了抛物线外的圆锥曲线，因此有了下述的曲线/曲面。</p></li><li><p>非均匀有理B样条：NURBS</p><ol><li><p>其优点为：</p><ol><li>更一般更精确的方法来表达对曲线曲面的设计；</li><li>提供通用的数学形式表示标准的解析曲面/曲线和自由曲线/曲面；</li><li>存在稳定快速的数值计算方法；</li><li>针对非有理和有理的Bézier曲线/曲面均可以看成NURBS的一种特殊形式；</li></ol></li><li><p>其缺点为：</p><ol><li>其存储空间较大；</li><li>若权重不合适，则会产生畸变；</li><li>不适合曲线重叠。</li></ol></li><li><p>定义：NURBS是由分段有理B样条多项式基函数所定义的曲线，其函数为：<br>$$<br>P(t)=\frac {\displaystyle\sum_{i=0}^n\omega_iP_iN_{i,k}(t)}{\displaystyle\sum_{i=0}^n\omega_iN_{i,k}(t)}=\displaystyle\sum_{i=0}^nP_iR_{i,k}(t)<br>$$<br>其中：<br>$$<br>R_{i,k}(t)=\frac{\omega_iN_{i,k}(t)}{\displaystyle\sum_{i=0}^n\omega_iN_{i,k}(t)}<br>$$</p></li><li><p>曲线性质</p><ol><li><p>仍然具有B样条的性质：</p><ol><li>局部支撑性：$R_{i,k}(t)=0,t\notin[t_i,t_{i+k}]$</li><li>归一性：$\displaystyle\sum_{i=0}^nR_{i,k}(u)=1$</li><li>可微性：若t不是结点，则$P(t)$在结点中间无限可微，否则则只在$C-k+r$阶连续</li><li>若$\omega_i=0$，则$R_{i,k}(t)=0$；</li><li>若$\omega_i=+\infty$，则$R_{i,k}=1$；</li></ol></li><li><p>NURBS曲线有一些和B样条曲线相似的几何性质：</p><ol><li>局部支持性；</li><li>变差缩减性；</li><li>凸包性；</li><li>仿射不变性；</li><li>可微性；</li><li>若控制点的权重为0，则该点不会影响曲线；</li><li>若$\omega_i\rightarrow+\infty$且$t\in[t_i,t_{i+k}]$，则$P(t)=P_i$；</li><li>Non-rational/rational Bezier curves and nonrational B-Spline curves are special cases of NURBS curve.</li></ol></li><li><p>通过齐次坐标表达控制点——即在这个向量末尾增加一维：<br>$$<br>P_i^ω=(ω_i x_i,ω_i y_i,ω_i z_i,ω_i),（i=0,1,…,n)<br>$$<br>其中$\omega_i$为权重，若$P(t)$关于$ω_i$是线性关系，则可以改变图形的形状。$\omega_i$其越大越靠近控制点，越小越远离控制点；</p></li><li><p>圆锥曲线的表示方式：<br>$$<br>P(t)=\frac {(1-t^2)\omega_0P_0+2t(1-t)\omega_1P_1+t^2\omega_2P_2}{(1-t)^2\omega_0+2t(1-t)\omega_1+t^2\omega_2}<br>$$<br>注意其形状因子：<br>$$<br>C_{sf}=\frac {\omega_1^2}{\omega_0 \omega_2}<br>$$<br>其值为$1$则抛物线，大于$1$双曲线，$C_{sf}\in(0,1)$则为椭圆，为$04退化为两条直线，当趋近与正无穷时为直线。</p></li><li><p>修改NURBS曲线：</p><ol><li><p>修改方法：</p><ol><li><p>修改权重：增/减控制点的权重，曲线则会被表现为往远处推/往近处拉；假设我们想要让在曲线上的点$S$发生相对于控制点$P_i$位移距离$d$，则新的权重$\omega^*$有如下公式：<br>$$<br>\omega^i=\omega_i[1+\frac{d}{R_{i,k}(t)(P_i)S-d}]<br>$$</p></li><li><p>修改控制点：则会改变整个曲线的形状；</p></li><li><p>几何约束下的形状修改；其修改描述为计算新的控制点是的曲线上的点$S$变为指定点$T$，假设曲线等式如下：<br>$$<br>P_t=\displaystyle\sum_{i=0}^nP_iR_{i,k}(t),t_{k-1}\leq t \leq t_{n+1}<br>$$<br>其中：<br>$$<br>R_{i,k}(t)=\frac{\omega_iN_{i,k}(t)}{\displaystyle\sum_{i=0}^n\omega_iN_{i,k}(t)}<br>$$</p></li></ol></li><li><p>带约束的优化方法：</p><p>假设前$m-1$个点已经修改，给予其微小形变$ε_i=(\epsilon_i^x,\epsilon_i^y,\epsilon_i^z)^T$。</p><p>然后使用优化方法对修改量计算，则约束为$\widetilde P(t)=\sum_{i=0}^{l-1}P_iR_{i,k}(t)+\sum_{i=l}^{l+m-1}(P_i+\epsilon_i)R_{i,k}(t)+\sum_{i=l+m}^{n}P_iR_{i,k}(t)\\=\sum_{i=0}^{n}P_iR_{i,k}(t)+ \sum_{i=l}^{l+m-1}\epsilon_iR_{i,k}$ ；</p><p>其中$t_{k-1}\leq t \leq t_{n+1};$</p><p>然后令$Min=\displaystyle\sum_{i=l}^{l+m-1}||\epsilon_i||^2$</p><p>使用拉格朗日函数有$L=\displaystyle\sum_{i=l}^{l+m-1}||\epsilon_i||^2+\lambda(T- \widetilde P(t_s))$</p><p>然后我们可以得到下面的方程组<br>$$<br>\begin{cases}<br>T=S+\displaystyle\sum_{i=l}^{l+m-1}\epsilon_iR_{i,k}(t_s),\\<br>\epsilon_i=\frac \lambda2R_{i,k}(t_s),i=l,l+1,…,l+m-1<br>\end{cases}<br>$$<br>可以解得$\epsilon_i=\frac {R_{i,k}(t_s)}{\displaystyle\sum_{i=l}^{l+m-1}R_{j,k}^2(t_s)},i=l,l+1,…,l+m-1$</p><p>若只有唯一的控制点被允许修改：$\epsilon=\frac{T-S}{R_{i,k}(t_s)}$</p></li><li><p>我们也可以使用最小能量法对形状进行修改：</p><ol><li><p>曲面的限制能量<br>$$<br>E(p)=\int k^2ds=\int_0^1(\frac {|P’\times P’’|}{|P’|})^2dt\rightarrow E(p)=\int|P’’|^2dt<br>$$</p></li><li><p>薄板曲面能量<br>$$<br>E(P)=\iint(P_{uu}^2+2P_{uv}^2+P_{vv}^2)dudv<br>$$</p></li></ol></li></ol></li></ol></li></ol></li></ol><ol start="14"><li><p>NURBS曲面:</p><ol><li>定义方式：<br>$$<br>P(u,v)=<br>\frac {\displaystyle\sum_{i=0}^{m}\displaystyle\sum_{j=0}^{n}\omega_{ij}P_{ij}N_{i,p}(u)N_{j,q}(v)}<br>{\displaystyle\sum_{i=0}^{m}\displaystyle\sum_{j=0}^{n}\omega_{ij}N_{i,p}(u)N_{j,q}(v)}<br>=\displaystyle\sum_{i=0}^{m}\displaystyle\sum_{j=0}^{n}P_{ij}R_{i,p,j,q}(u,v),u,b\in[0,1]<br>$$<br>其中：<br>$$<br>R_{i,p,j,q}(u,v)=\frac {\omega_{ij}N_{i,p}(u)N_{i,q}(v)}{\displaystyle\sum_{r=0}^{m}\displaystyle\sum_{s=0}^{n}\omega_{rs}P_{ij}N_{r,p}(u)N_{s,q}(v)}<br>$$</li></ol><p>且四个角的权重$\omega_{00}，\omega_{m0}，\omega_{0n}，\omega_{mn}$均为正数，其他权重均为非负数。</p><ol start="2"><li><p>性质（和B样条曲面具有类似）</p><ol><li>局部支撑性；</li><li>局部归一;</li><li>可微：<ol><li>在$U$方向有$C-p+r+l$阶连续可微；</li><li>在$V$方向有$C-q+r+1$阶连续可微；</li></ol></li><li>局部极值：若$p,q&gt;1$，则存在局部极大值。</li></ol></li></ol></li></ol><h2 id="网格（Mesh）"><a href="#网格（Mesh）" class="headerlink" title="网格（Mesh）"></a>网格（Mesh）</h2><ol><li>网格的描述：一系列的三角形面片$F$和一系列的顶点$V$，而$F$中的每个面片是$V$中的序列组（即$F$由$V$中的元素表示）；</li><li>表示原因：<ol><li>因为图形学中需要一个统一的表示方式；</li><li>且视觉精度和处理速度需要在可接受的范围内；</li><li>再有由于图形硬件的快速发展，能快速的并行光栅化（rasterize）和三角网格的渲染（render）。</li></ol></li><li>数据来源：文件I/O、程序建模、建模软件、3D扫描仪、照片重构或以上的技术组合；</li><li>两大类的模型：<ol><li>基于实体的（实际加工过程），</li><li>基于表面的（无实体，只考虑表面，但易显示）。</li></ol></li><li>网格化（Tessellation）：<ol><li>二维网格化——多边形表示为多种不同形式并且需要分割成更易于处理的图元的过程。例如多边形分割为三角形称之为三角化（方法多样）。</li><li>基本的网格化算法：给定多边形，检验其任意两个顶点之间的线段是否与该多边形的边相交或者部分重叠，若相交则不能用来分割，若不相交则分割（不怎么好）。</li><li>割耳法：找到一个多边形，查看所有具有顶点序列$i,i+1,i+2(mod\space n)$的三角形，检查线段$i,i+2$是否与任意边相交。若是，则三角形$i+1$构成一个ear，割之，然后检验$i$和$i+2$的三角形是不是构成ear，直至遍历所有的顶点</li><li>T型顶点：当相交表面的边缘部分重合，但是不完全共点是出现（理论可行，但是精度过高很难实现）。</li></ol></li><li>简化需要的基础数学知识：<ol><li>拓扑结构：指多边形网格的连接结构；</li><li>亏格（通俗的说一个模型上面的孔洞数目）：面片、边或顶点的局部拓扑，指相邻元素的局部连接关系。</li><li>2D流形（manifold）：若局部拓扑处处等价于一个圆盘，则为一个二维流形；在三角形网格流形拓扑中，恰好仅有两个三角形共用一条边，每个三角形分别与三个相邻的三角形共用一条共边。</li><li>带边界的二维流形：确保边界的边有且仅有一个三角形。（注：这些定义和拓扑学中的定义只是类似，但是拓扑学的定义则更为严谨）</li><li>单纯复形：由顶点集合担单形非空子集构成，$0$单形为点，$1$单形为边，$2$单形面，后续可数学归纳。</li></ol></li><li>简化（simplification）：用一个相对简单的，但保持足够几何细节的网格模型近似表示。<ol><li>目的：主要是为了减少几何上的冗余，减小模型大小，提高运行性能；</li><li>方法：采样，自适应细分，剔除，顶点合并（sampling, adaptive subdivision, decimation, vertex merging）。</li></ol></li><li>采样（sampling）：通过选取模型表面上的点，简单的对模型进行几何采样，在编程存在困难和复杂，且对高频特征难以精确采样。通常在没有尖角的光滑表面上取得最好的效果。</li><li>自适应细分（adaptive subdivision）：通过寻找一个可以递归细分逼近最初模型的基网格，该算法在基模型易于获取的情况下较为适用；虽然其能够保持模型表面的拓扑细节，但对模型的大规模简化能力不足。</li><li>细分：给定一个原始网格，通过网格加细产生更光滑的效果。步骤主要为两步，<ol><li>第一部细化阶段，创建新顶点与之前的顶点相连，产生新的更小的三角形（三角形形式多样）；</li><li>第二步为平滑阶段，计算新顶点的位置（计算方式可以由不同的插值方式生成）。</li><li>方案为<ol><li>loop细分：基于三角网格的细分方案，它更新每个已有的顶点，并对每条边创建一个新的顶点,然后每个三角形被分割成四个新三角形，$4n$步后生成$4n$个三角形。</li><li>$\sqrt3$细分，他在每个三角形的中间加一个点，从而得到三个新的三角形，而为了更加均匀分布三角形，每个原始三角形的边都被翻转，使之连接两个相邻顶点的中间顶点而不是两个已经存在的旧顶点（注意这个边翻转）。</li></ol></li></ol></li><li>去除（Decimation）：迭代去掉网格的顶点或面片，并三角化每次去除后留下的空间，适用于处理共面多边形这种冗余的几何。</li><li>顶点合并（vertex merging）；将模型的两个或多个顶点合并为一个顶点，简单且易于编程，但是需要采用多个技术来确定合并点和合并次序（边坍塌算法）。</li><li>层次细节简化技术<ol><li>应用：简化采样密集的多面体网格，激光扫描测距系统扫描真实三维物体，三维场景的存储/传输/绘制；</li><li>定义：指的是在不影响画面视觉效果的条件下，通过逐次简化景物的表面细节来减少场景的几何复杂性，从而提高绘制算法的效率。近处精细远处粗糙之间插值保证光滑；</li><li>方法有顶点删除，边压缩，面片压缩等。</li></ol></li><li>长方体滤波算法，给定一多面体，记$K$为其拓扑，假设$M$已经三角化：<ol><li>首先建立$M$的长方形包围盒，将其空间均匀剖分成一系列的小长方体子空间；</li><li>然后采用各长方体子控件对景物定点进行聚类合并，位于同一长方体空间的顶点被归于同一类；</li><li>最后属于同一类的顶点被合并为一代表点。</li><li>而这些代表顶点为与暗多面体所示景物的重新采样。</li><li>基于与暗多面体的K结构和这些采样点和重新产生以多面体，其保持了一定的层次细节模型。其多面体包围盒剖分生成的子空间越小，则层次模型越逼近原多面体。（会丢失部分高频细节）</li></ol></li><li>顶点删除法：设法减少景物表面的采样点数目。删除不重要的顶点及其有关的所有面片，然后对删除后的空洞进行局部三角剖分。</li><li>渐进的网格简化技术：任一网格$M$均可表示为一个粗网格以及逐步细化的网格$M_i$的变化，一张网格定义为一个序偶$（K,V）$其中$K$为$M$的顶点，边，面的邻接关系（$K$为不包含点集的所有子集，仅包含了构造网络$M$所有面、边、顶点的子集）。$V$为顶点位置的向量集，表达$M$在$\R^3$的形状。同时引入拓扑实现：将顶点$i$看成$\R^m$的基向量，则定义$\R^m$的几何$|K|$的拓扑实现为$|K|=⋃_{s∈K}|s|$，其中$s$为$K$的一个单形，$|S|$为$s$在$\R^m$空间中顶点的凸包。</li><li>边收缩的合并原则：<ol><li>相邻点+距离小于一定值；</li><li>二次误差度量。</li></ol></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形学 </tag>
            
            <tag> 基础知识 </tag>
            
            <tag> 几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清华MOOC图形学基础：理论</title>
      <link href="/2020/04/27/qing-hua-mooc-tu-xing-xue-ji-chu-li-lun/"/>
      <url>/2020/04/27/qing-hua-mooc-tu-xing-xue-ji-chu-li-lun/</url>
      
        <content type="html"><![CDATA[<p>这个部分是在寒假学习图形学过程中自己整理的图形学知识，后续会进行精简和删改，也方便自己后续查找概念。</p><h2 id="色彩模型"><a href="#色彩模型" class="headerlink" title="色彩模型"></a>色彩模型</h2><h3 id="色彩视觉（Color-Model）"><a href="#色彩视觉（Color-Model）" class="headerlink" title="色彩视觉（Color Model）"></a>色彩视觉（Color Model）</h3><ol><li><p>色彩：对不同波长的光的能量感知：不同波长对于不同颜色，人可见光为380-760nm之间。</p></li><li><p>光的谱分布：光在各个可见波长的分量的强度分布函数称为光的谱分布函数。与光类似，色彩也可以使用谱分布函数描述，但是由于异谱同色现象，导致描述方法特别复杂且不能一一对应。</p></li><li><p>色彩颜色空间：在所有用于表示色彩的各种颜色空间，以RGB色彩空间最为广泛(存疑)：</p><ol><li><p>色彩使用三通道的RGB向量表示；</p></li><li><p>在RGB色彩空间中，有部分的常用操作可以通过对RGB三通道分别处理而进行；</p></li><li><p>r,g,b可以用规格化的的float；而使用8bit存储时，取值为[0,255]；</p></li><li><p>色彩被表示为三个基本颜色的线性组合（部分的颜色无法表示为正线性组合，(0,0,0)为黑，(1,1,1)为白）：<br>$$<br>C=rR+gG+bB<br>$$</p></li></ol></li><li><p>其他的颜色空间：</p><ol><li><p>CMY. 青+品红+黄（注意这里和印刷所用的CMYK不一样，K为黑色，这里是颜色空间而不是印刷色彩模式）。其为减色系统，[C,M,T]=[1,1,1]-[R,G,B]，即CMY分别为R,G,B的补色：(0,0,0)为白，(1,1,1)为黑。</p></li><li><p>HSV. 其为圆锥形的色彩空间，含义如下：</p><ol><li>Hue（色调/色相）指的是什么颜色；</li><li>Saturation（饱和度/纯度）值越低，颜色越白；</li><li>Value of brightness（亮度）——越低越黑。</li></ol></li><li><p>CIE XYZ-1931：可以感知所有的色彩，色彩基XYZ是色彩基RGB的线性变换。<br>$$<br>x=\frac X{(X+Y+Z)},y=\frac Y{(X+Y+Z)},z=1-x-y<br>$$</p></li></ol></li></ol><h3 id="图像和像素"><a href="#图像和像素" class="headerlink" title="图像和像素"></a>图像和像素</h3><ol><li>图像：二维离散函数$f(x,y)$，$f$的定义域为矩阵中的所有格子；</li><li>这些格子称之为像素，其值为各个像素的色彩，彩色图像可为$RGB(A)$，而灰度图像的$f$则为单值。</li></ol><h3 id="图形学的基本目标"><a href="#图形学的基本目标" class="headerlink" title="图形学的基本目标"></a>图形学的基本目标</h3><p>从虚拟的三位场景以及相机的位置信息中生成二维图像——简单图形直接使用参数描述，而复杂模型需要使用参数曲线和曲面或者更一般的网格模型，而网格模型中又以三角网格最为常用</p><ol><li><p>三角网格：由一系列欧式空间中的三维顶点以及连接这些顶点的若干三角面片组成。其中顶点集合记为$V$，面片集合记为$F$。F中的每个$f_i$为$V$中的$V_ai，V_bi，V_ci$顶点构成的空间三角形。</p></li><li><p>法向量：垂直于平面的直线所表示的<em>向量</em>为该平面的法向量，若朝外为+，朝外为-。对于连续可定向的额三角网格整体而言，相邻三角面片需要具备一致的法向量朝向；</p></li><li><p>计算法向量的方法：通过三角网格周围的所有三角面片的法向量加权叠加计算（算数平均，面积加权，角度加权等）。</p></li><li><p>简单绘制方法：每个顶点指定一个色彩属性：</p><ol><li>基于色彩绘制——模型表面的每点的色彩通过其所在三角面片的顶点色彩插值得到（插值可以用来使模型变得更光滑）；</li><li>基于光照绘制——需要指定一个虚拟的光照环境，重点问题是计算光照对色彩的影响。</li></ol></li></ol><h2 id="光照模型（illumination-Model）"><a href="#光照模型（illumination-Model）" class="headerlink" title="光照模型（illumination Model）"></a>光照模型（illumination Model）</h2><p>光照模型用于计算光的强度，其大致分为</p><ol><li>局部光照明——物体直接受到光源影响产生的光照效果；</li><li>全局光照明——阴影效果和所有不是直接与光源位置相关的光照效果（反射折射等）。</li></ol><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><p>在渲染中加入光照明效果：</p><p>1967年：光强与物体到光源距离成反比；</p><p>1970年：第一个光反射模型——Lambert漫反射光+环境光；</p><p>1971年：漫反射模型+插值的思想（Lambert diffuse + Bicentric interpolation）；</p><p>至今：Phong 模型——Diffuse（漫反射）+ ambient（环境光）+ specular（高光）（顶点法向插值）</p><h3 id="光的传播​"><a href="#光的传播​" class="headerlink" title="光的传播​"></a>光的传播​</h3><ol><li><p>反射定律：</p><ol><li>入射角=反射角入射光线；</li><li>反射光线，反射面的法向量位于同一平面。</li></ol></li><li><p>折射定律：<br>$$<br> \frac {sin{入射角}}{sin{折射角}}=c（c为相对折射系数，记为\frac {n_折}{n_入}）<br>$$</p></li><li><p>能量守恒定律<br>$$<br>I_i=I_d+I_s+I_t+I_v<br>$$<br>公式依次为入射光，漫反射光（diffuse），镜面反射光（specular），折射光（refraction）以及介质和物体吸收的能量</p></li><li><p>光的度量：</p><ol><li>立体角：衡量物体相对于某一视点$P$的视角大小，最大为$4π$；</li><li>光通量（辉度）：单位时间间内通过面元$dS$的光能量，记为$dF$（或$E$）；</li><li>发光强度——单位立体角内的光通量，记为$I$。</li></ol></li><li><p>Phong模型：支持点光源和方向光源，是局部光照模型分解为漫反射光，镜面光和环境光效果的合成。（插入的图片暂时略）具体见下列图片：其中$L$是入射光，$R$是反射光，$V$是视点方向，$N$为物体表面的法向量，$H$是$L$和$V$夹角的角平分线</p><ol><li><p>漫反射光效果：<br>$$<br>I_d=I_iK_dL_N<br>$$<br>其中$K_d$：是漫反射系数，分别由$k_{dr}$，$k_{dg}$，$k_{db}$代表R，G，B三个通道的漫反射系数，其与模型自身的色彩紧密相关。</p></li><li><p>镜面光效果：<br>$$<br>I_s=I_iK_s*(RV)^n<br>$$<br>其中：$K_s$是镜面反射系数，与物体表面的光滑程度相关，$n$是反射指数，$n$越大，高光区越集中。</p></li><li><p>环境光效果：<br>$$<br>I_a=I_iK_a<br>$$<br>其中：$K_a$是物体对环境光的反射系数。</p></li><li><p>故视角方向的发光强度为漫反射光分量、镜面反射光分量和环境反射光分量之和即：<br>$$<br>I= I_iK_dL_N+ I_iK_s*(RV)^n+I_iK_a<br>$$</p></li></ol></li></ol><h2 id="明暗处理（Shading）"><a href="#明暗处理（Shading）" class="headerlink" title="明暗处理（Shading）"></a>明暗处理（Shading）</h2><h3 id="Shading方法"><a href="#Shading方法" class="headerlink" title="Shading方法"></a>Shading方法</h3><p>由于物体表面的集合细节往往不规则，为了减缓由模型离散化导致的不光滑的色彩效果而导致的Mach Band效应（一种主观的边缘对比效应：当观察两块亮度不同的区域时，边界处亮度对比加强，使轮廓/边界表现得特别明显）。并且通常除了需要使用光照模型外，还需要使用插值的方法。</p><ol><li><p>一般的处理方式：</p><ol><li>Flat shading ：逐面片着色的方式，每个多边形都会被指定一个单一且没有变化的颜色（由于十分不真实，因此仅仅是拿来preview使用）；</li><li>Gouraud shading：对所有顶点进行着色的方式，则三角面片上顶点的色彩值按重心坐标（Barycentric Interpolation）结果赋值;</li><li>Phong shading：逐像素着色（或者说逐片元fragment）的方式，每个像素的法向量是通过顶点的法向量插值得到的。</li></ol></li><li><p>重心坐标：重心坐标是由单形顶点定义的坐标，是齐次坐标的一种。平面上的重心坐标可以如下方式表示：<br>$$<br>p=\lambda_1 t_1+\lambda_2 t_2+\lambda_3 t_3, \lambda_1+\lambda_2+\lambda_3=1<br>$$<br>其中，$t_1,t_2,t_3$分别表示他们的向径，则重心坐标为$(\lambda_1,\lambda_2,\lambda_3)$。</p></li><li><p>视点变换和视点方向：由几何模型组成的三维场景绘制成高质量的彩色图——通过变换将空间中的点$x$映射为点$x’$的函数。通过变换，可以设置和编辑3D场景光照位置和视点方向（camera）。</p></li><li><p>简单变换：平移，旋转，均衡缩放（translation，rotate，scale）。</p></li><li><p>常见变换有：</p><ol><li>刚体变换：保持物质本身的度量变换；</li><li>相似变换：保持角度的变换；</li><li>线性变换：保持线性关系$\vec l+\vec p$，$k\vec l$的变换;</li><li>仿射变换：保持直线即相互平行的直线的变换。</li></ol></li><li><p>投影变换的表示：<strong>M</strong>和$\vec t$：$\vec {p’}=$<strong>M</strong>$\vec p+\vec t$（M为二维矩阵），若使用齐次坐标：则$\vec {p’}=$<strong>M</strong>$\vec p$(由于渲染插件原因<strong>M</strong>表示的是矩阵）。</p></li><li><p>复合变换一般不能交换顺序。</p></li><li><p>在法向量（与曲面正交的单位向量）交换中，我们要通过变换切平面，再计算法向量。$\vec {v_{OS}}$变换为$\vec {v_{WS}}$，则$\vec {v_{WS}}=$<strong>M</strong>$\vec{v_{OS}}$，转换为切平面后为$\vec {v_{WS}}=（M^{-1}）^{T}\vec {v_{OS}}$，即法向量的变换矩阵是原变换矩阵的逆的转置。</p></li><li><p>视点和投影模式.</p><ol><li>视点变换与camera位置及朝向有关；</li><li>投影模式，3D变换为2D，常用正交投影（直接把第三维变0）和透视投影（使用透视投影矩阵）。</li></ol></li></ol><h2 id="材质反射属性模型——双向反射分布函数（BRDF：Bidirectional-Reflectance-Distribution-Function）"><a href="#材质反射属性模型——双向反射分布函数（BRDF：Bidirectional-Reflectance-Distribution-Function）" class="headerlink" title="材质反射属性模型——双向反射分布函数（BRDF：Bidirectional Reflectance Distribution Function）"></a>材质反射属性模型——双向反射分布函数（BRDF：Bidirectional Reflectance Distribution Function）</h2><p>BRDF是描述物体表面对光的反射性质。</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ol><li><p>光照/照明（illumination）：分为局部光照和全局光照（见光的传播的Phong模型中的叙述）；</p></li><li><p>球面坐标：利用球坐标$(r,\theta,\phi)$表示一个点 $p$ 在三维空间的位置的三维正交坐标系。球坐标的几何意义：原点到 $p$点的距离 $r$ ，原点到点 $p$ 的连线与正 z-轴之间的天顶角$\theta$以及原点到点$p$的连线，在$xy$平面的投影线，与正轴之间的方位角$\phi$；</p></li><li><p>立体角：见前文；</p></li><li><p>投影面积：$A’=Acosa$</p></li><li><p>光能：光子能量总和；</p></li><li><p>光通量：和磁通量类似；</p></li><li><p>辉度E（见P1）：单位面积上的光通量；</p></li><li><p>光强：单位立体角的光通量；</p></li><li><p>光亮度：单位投影面积和单位立体角上的光通量；</p></li><li><p>辉度和光亮度的关系：$E=\int_\Omega{L({\omega}){cos{\theta}} d{\omega}}$。其中$\Omega$是入射角形成的半球（Hemisphere），而$L({\omega})$是沿着$\omega$方向的光亮度。</p></li></ol><h3 id="BRDF"><a href="#BRDF" class="headerlink" title="BRDF"></a>BRDF</h3><ol><li><p>定义：描述物体表面将光能从任意入射方向反射到任意视点方向的反射特性，是关于入射光方向和反射光方向的四维实函数，其等于反射方向的光亮度和沿入射方向的入射光辉度之比（或入射光的光亮度）：<br>   $$<br>   f({\omega}_i-{\omega}_r)=\frac {d{L_r}({\omega}_r)}{d{E_i}}=\frac {d{L_r}({\omega}_r)}{L_i(\omega_i)cos\omega_id{\omega}_i}<br>   $$</p></li><li><p>性质：</p><ol><li><p>可逆性：由于光路可逆，故$\omega_i$和$\omega_r$不变；</p></li><li><p>能量守恒：$Q_{in}=Q_{re}+Q_{ab}+Q_{trans}$，即有：<br>$$<br>\int_\Omega{f(\omega_i\rightarrow\omega_r)L(\omega_i)cos\omega_id\omega_i}\leq1<br>$$</p></li></ol></li><li><p>用于计算环境光照下的反射光亮度可以写为：<br>   $$<br>   L_r=\int_\Omega{f(\omega_i\rightarrow\omega_r)L(\omega_i)cos\omega_id\omega_i}<br>   $$</p></li><li><p>模型：经验模型，基于物理表达，基于数据表达</p><ol><li>经验模型：<ol><li>Lambertain漫反射模型是最基本的反射模型：入射光线被均匀地反射到各个方向，不同方向的BRDF是一个常数。反射率是反射光的辉度和入射光的辉度之比；</li><li>Phong模型，在Lambert漫反射模型基础上，添加了镜面反射项，以表达镜面反射效果，但是其不具备可逆性，不准确但是简洁高效；</li><li>Blinn-Phong模型，引入入射方向和反射方向的角平分线<strong>h</strong>，使用<strong>h</strong>和法向量<strong>n</strong>的点积替代原Phong模型的$\vec r \cdot \vec v $，以简化运算。</li></ol></li><li>物理模型中：<ol><li>建立在表面粗糙度的细节几何结构上，通过微平面法向量的统计分布表达；</li><li>同时在实际应用中，单向反射性存在擦地角附近增大的性质，且入射光的反射光是由麦克斯韦方程组中得到的菲涅尔公式（Fresnel）得到；</li><li>Cook-Torrance模型，假设微平面为镜面反射，且假定为V，然后结合Lambertian漫反射项与微平面项结合同时采取Bechmannn分布来描述微平面法向的分布函数。</li></ol></li><li>数据模型（略）</li></ol></li><li><p>BRDF的动机：为了对未知反射属性的材料进行建模，并生产具有高度真实感的结果，恢复BRDF和其他场景属性的过程称之为逆渲染（inverse rendering）。</p></li><li><p>BRDF的度量和评价：由于BRDF是关于光线和视角的函数，其度量通过对2D光照空间和2D视角空间进行采样获取。故需要sample，source和detector，固定材料、固定光源或固定材料（用于已知凸几何体）和光源而移动其他的方式，</p></li></ol><h2 id="光线追踪"><a href="#光线追踪" class="headerlink" title="光线追踪"></a>光线追踪</h2><p>思路和框架：将显示缓存区看成是由空间中的像素组成的矩阵阵列，人眼透过这些像素看到场景中的物体。对于每个像素$P$计算其色彩值：计算视点链接像素$P$中心的光线演唱后所碰到的第一个物体交点，然后使用局部光照模型计算交点处的颜色值，然后沿交点处的反射和折射方向队光线进行跟踪。通过光线跟踪，可以很容易的表现出阴影反射折射之类的视觉效果，且更容易适用于复杂的物体表示方法。</p><h3 id="光线求交"><a href="#光线求交" class="headerlink" title="光线求交"></a>光线求交</h3><ol><li><p>光线的表示：<br>$$<br>P(t)=R_o+t*R_d<br>$$<br>其中$ {R_O}$是光线的原点，$\vec {R_d}$为向量，代表朝向，一般为单位向量，$t$为光线到达的位置，均为正数。</p></li><li><p>平面的表示：显式表示为$P$为平面一点和n为平面的法向量，隐式表示为<br>$$<br>H(P)=Ax+By+Cz+D=\vec n\cdot P+D=0<br>$$</p></li><li><p>点到平面的距离：$\vec n$为单位法向量时，$P$到$H$的距离就是$H(P)$；                          </p></li><li><p>光线和平面求交：联立 $\vec nP+ D=0$，$P(t)=\vec R_O+tR_d$得到<br>$$<br>t=-\frac {D+nR_o}{\vec n \cdot \vec{R_d} }<br>$$<br>最后需要验算$t$是否大于0即可。</p></li><li><p>光线和三角形求交：先验证是否在平面，再验证是否在三角形内，其作用有纹理映射，法向插值，颜色插值。转化为解线性方程组（通过Cramer法则直接求解）。</p></li><li><p>光线和多边形求交：首先计算光线与多边形所在的平面交点，若交点存在，判断是否在多边形内部——为了进行这一判断，我们将交点以及多边形的所有顶点投影到XY-,YZ-,ZX-平面中一个。</p><ol><li>法一（在不进行预处理的情况下最快）：二维情况下采用交点检测算法，基于Jordan曲线定理：平面上一个点位于一个多边形的内部，当且仅当由该点出发任何一条射线与多边形边界有奇数个交点（奇偶检测算法）。我们可以将检测点作为远点，然后用X轴正半轴作为检测焦点的射线，然后逐一比对（多边形某条边两端点同号则无交点，否则若交点在X正半轴则是交点，反之不是交点）;</li><li>法二（稳定但慢）：计算带符号的角，即转化为带符号的弧长，为0则在外，为2$π$则在内部，若为$π$则在边界;</li><li>法三（最快的方法）：以顶点符号为基础的弧长累加，将坐标原点移到被测点，各象限内点的符号对应标准象限，若顶点$p_I$的某个坐标为0，则记为+，若$x，y$均为0，则顶点为被测点，然后定义符号变化转化为弧长变化，若穿越相对（13或24）象限的时候，为$±π$，通过$f=y_{i+1}x_i-x_{i+1} y_i$若为0则穿过原点，大于0为正，小于零为负，判断点在直线的上方还是下方。</li></ol></li><li><p>光线和球面相交——代数法（存在误差和计算量）</p><ol><li>通过球面的表示：$f(P)=||P-P_C ||-r=0$，即解决$||P(t)-P_C ||-r=0$的根，解得$t=-b±\sqrt {b^2-c}$；</li><li>优化方法：<ol><li>首先计算光源指向球心的向量$\vec l =P_c-R_0$，若$\vec l ^2&lt;r^2$则在球的内部，$\vec l ^2&gt;r^2$则在球的外部，$\vec l ^2=r^2$则在球面上（注意光源在球面上的时候退化情况）；</li><li>然后计算球心到光线所在直线的距离，若$d^2=\vec l ^2-t_p^2，d&gt;r$，则光线与球面不相交。</li></ol></li></ol></li></ol><h2 id="光线追踪加速"><a href="#光线追踪加速" class="headerlink" title="光线追踪加速"></a>光线追踪加速</h2><ol><li><p>原因：时空复杂度高，主要消耗在于可见性判断和求交测试；</p></li><li><p>方法：空间数据结构，比如层次包围体，均匀格点，四叉树八叉树空间二分树；</p></li><li><p>包围盒：（比如把一个兔子包到一个长方体里）</p><ol><li>多种包围方法：比如平行于坐标轴，非平行与坐标盒，OBB；</li><li>判断方法：除非交于长方体，否则不会与兔子相交；</li><li>后续由Kay和Kajiya 提出，根据景物的实际形状选取$n$组不同方向的平行平面包裹一个景物或者一组景物来做为层次包围盒——定义一任意平面方程$Ax+By+Cz-d=0$，则可以得到一个法向量$\vec N$，且与原点距离为$d$的平面，令$d$为自由向量，则定义了一组平面（流形？），故对于任意给定景物，必然存在两平面将景物夹在中间，记为$d_i^{near}$ 和$d_i^{far}$，用几组平面可以构成一个紧致包围盒，取若干统一方向为平面法向，并取n小于5；</li><li>而对于$d_i^{near}$ 和$d_i^{far} ：<ol><li>显式曲面我们可以将多面体的所有顶点投影到法向量方向，并计算与原点的最大值最小值；</li><li>隐式曲面体，用条件极值的极大极小值——拉格朗日乘数法。</li></ol></li></ol></li><li><p>包围球：一个包围球仅包含两组参数，球心和半径。物体转包围盒不转一般极度理想的包围球比较难，采用$n$个点的近似最优包围球（计算几何相关），一把比理想包围球大5%。方法：遍历所有点找到最大最小的$x/y/z$的三组六个点，然后计算三组距离，选取最大值，然后作为包围球直径，作为算法的初始值；然后遍历所有的点，若当前点在包围球外，则修改直径（以当前在球外的点与球心相连接，反向延长到之前的交点）。</p></li><li><p>层次包围体：给定场景的所有物体的包围体，可以将这些包围体作为叶子节点，构建一个包围体树-HBV，每个内部节点的所有子孙节点对应的包围体并集。从根节点往下层次遍历，计有$n$个包围盒，则由$n$降维为$logn$。</p></li><li><p>均匀格点：存到一个三维格点整列，有相交的则记录到一个list。然后用DDDA算法类似，光线与$x$和$y$的交点成规律排布（$\frac {dy}{dx}$不变）。此方法容易建立，但物体分布不均匀可能会浪费资源，因此最好为非均匀空间分布。</p></li><li><p>四叉/八叉树：</p><ol><li>四叉树为二叉树而为推广，每个节点为正方形，递归的将每个正方形分为四个等大的小正方形，叶子节点面片数足够简单时停止扫描；</li><li>八叉树为四叉树的三维推广，和四叉类似，但是每个节点为立方体，且遍历更复杂，但对非均匀场景更适合；</li><li>八叉树的构建：将场景用一个最小的平行于坐标轴放置的立方体包围，使用自顶向下的递归划分直到边界条件（深度，面片数之类的）前，将节点划分为八个等大的小立方体。注意到可能会有同一面片存储在不同的叶节点，可能会导致效率下降，可以采用将面片分为多个，也可以采用Octree-R方法——通过启发式算法，更为自由的划分面片，从而提速4%-47%。</li><li>节点寻址：指针或者编号（使用该节点的编号加上1到8作为其suffix）。</li><li>光线的遍历，每与八叉树的一个内部节点相交，都有可能与至多四个节点相交，因此需要使用空间八叉树剖分技术。</li></ol></li><li><p>空间八叉树剖分技术：一个空间非均匀网格剖分算法</p><ol><li><p>方法：将含有整个场景的空间立方体按三个方向中剖面分割成八个子立方体网格，组织成一棵八叉树，若某一子立方体网格中所含景物面片数大于给定的阈值，则为该子立方体作进一步的剖分，直到面片数目小于阈值；然后利用空间连贯性加速光线追踪。</p></li><li><p>八叉树的最大深度：表示空间分割所能达到的层次，称为空间分配率;</p></li><li><p>编码方式：计八叉树深度为N，则编码为$q_1q_2…q_iFF…F,（q_i\in[0,7])$的整数序列，$F$为不同于$[0,7]$的符号），则可以通过节点编码方式很容易找到任一点所在网格。</p></li><li><p>性质：$P(x,y,z)$为空间一点，则</p><ol><li><p>坐标为整数表示为<br>$$<br>x=i_1i_2…i_nB，y=j_1j_2…j_nB，z=k_1k_2…k_n，i_l,j_l,k_l∈[0,1]，l\in I<br>$$</p></li><li><p>$P$所在的单位立方格编码为$q_l=i_l+2j_l+4k_l,$ $l$见上面的公式；</p></li><li><p>$P$位于一编码为$q_1q_2…q_iFF…F$的空间网格内，则网格的前左下角坐标为<br>$$<br>x’=i_1 i_2…i_i 0…0<br>$$<br>$y,z$则改为对应的$j,k$；</p></li></ol></li></ol></li><li><p>通过八叉树的光线跟踪加速：</p><ol><li>利用性质2求光线起点$P_0$所在的立方网格编码$Q$，然后位于边界上的起点根据光线前进方向$R$辨别光线是否射出场景，如果射出，算法结束。其查找结果为是否匹配成功的$Bool$以及没有匹配的位数$B$；<ol><li>若$Q$为$q_1q_2…q_i$，则八叉树中节点含有$q_1q_2…q_iFF…F$时取$True$，$B$则定义为八叉树叶节点表中与$Q$获得最大程度匹配的节点其编码suffix不匹配的位数。</li><li>$Bool$决定是否包含面片，$Q$和$B$决定立方体的空间位置和大小。若$Bool$量为$True$，则光线与该立方体中所含三角形面片求交，若交返回交点；若$Bool$为$False$，则继续搜索；</li><li>包含起点且不包含任何景物面片的最大空间网格为$q_1q_2…q_iq_{i+1}FF…F$，$F$为$B-1$个；若求交失败为假，应该跨过当前立方体网格；</li><li>而新的网格前左下角坐标由性质3决定，跨越网格后，先求出当前空间网格上的出口点坐标，重置光线起点，然后让光线和六面求交，且预先计算光线在各个坐标平面上投影线的结局和斜率，快速求解。通过新出发点重复跟踪过程，直至光线射出场景或者求到交点。</li></ol></li></ol></li><li><p>空间二叉树（BSP）：一种空间划分结构，起初用于解决图形学中隐藏表面为题，为二分查找树的高维推广，主要有axis-aligned类型和polygon-aligned类型。</p><ol><li>polygon-aligned BSP：每次选取一个多边形面片所在的平面，作为空间的划分平面，通常来说，当由多边形组成才是用polygon-aligned BSP。</li><li>axis-aligned总是沿着某个坐标轴垂直方向划分平面，且划分平面总是把节点按照空间大小划分为两个相等的子节点（也有部分认为随意划分也可），其大大减少了光线和划分平面间的计算量（33%），建树过程差不多。</li><li>而在过程中，我们可以根据深度进行规则轮换，这样的话是的层次结构的划分更加规则regular。</li></ol></li><li><p>KD树（任意一个BSP都是KD，但是KD不是BSP）：其与BSP区别在于划分平面，KD任意，BSP二分划分。</p></li><li><p>BSD的遍历：第一次调用函数时，$min$和$max$初始化为BSP根节点对应立方体的两个焦点到光线原点的距离。若光线从根节点立方体内部发出，则$min$为负数。BSP遍历一般比八叉快10%。由于BSP总是从终点开始划分，因此也存在面片跨越多个节点导致遍历变慢。而KD树就是为了解决这个问题。</p></li><li><p>分布式光线跟踪（随机光线跟踪）；光束追踪（线变锥形，首先将初始光束投向可视空间，由近及远监测光束与场景中物体的交，交点处产生新的反射折射光束，也可以使用光束树）；具选择性的光线跟踪结合插值（选择部分，剩余插值）；RPU（可编程光线处理单元）。</p></li></ol><p>补充，由于清华的光栅图形学为自读内容，因此无整理。下一个part主要是几何造型相关。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形学 </tag>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷官方题单——贪心题解</title>
      <link href="/2020/04/26/luo-gu-guan-fang-ti-dan-tan-xin-ti-jie/"/>
      <url>/2020/04/26/luo-gu-guan-fang-ti-dan-tan-xin-ti-jie/</url>
      
        <content type="html"><![CDATA[<p>贪心顾名思义，就是选择当前最好的，当然很多时候太贪婪不是一件好事，因为目光短浅，没有考虑到后面的事情，结果没有办法保证最后的结果做到最好。<br>这就是贪心最难的地方，你可能知道需要使用贪心，但是你无法证明的时候，贪心的局部最优可能最后的WA。</p><h2 id="题目0：部分背包问题"><a href="#题目0：部分背包问题" class="headerlink" title="题目0：部分背包问题"></a>题目0：部分背包问题</h2><p>题目的含义就是，你可以随便选任意东西，而且可以选0.00001个这种，说明这个背包一定可以装满，所以只需要单位价值最高到低排序即可。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> Node <span class="token punctuation">{</span>    <span class="token keyword">int</span> w<span class="token punctuation">,</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span>memo<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span>Node a<span class="token punctuation">,</span> Node b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>v<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token operator">*</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span> memo <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">,</span> m <span class="token operator">-</span><span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            ans <span class="token operator">+</span><span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v <span class="token operator">*</span> m <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>w <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目1：排队接水"><a href="#题目1：排队接水" class="headerlink" title="题目1：排队接水"></a>题目1：排队接水</h2><p>人数一定，最后一个人要等待的时间最长且是前n-1个人的时间之和，那么最后一个打水是要最多的；倒数第二也一样，然后后面用数学归纳法接口。因此只需要从小到大排序即可。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> a <span class="token punctuation">{</span> <span class="token keyword">int</span> consume<span class="token punctuation">,</span> seq<span class="token punctuation">;</span> <span class="token punctuation">}</span>memo<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span>a x<span class="token punctuation">,</span> a y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">.</span>consume <span class="token operator">&lt;</span> y<span class="token punctuation">.</span>consume<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">double</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>consume<span class="token punctuation">)</span><span class="token punctuation">;</span>        memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>seq <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>memo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> memo <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>seq<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        i <span class="token operator">=</span> n <span class="token operator">-</span> j<span class="token punctuation">;</span>        t <span class="token operator">+</span><span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>consume <span class="token operator">*</span> j <span class="token operator">*</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf"</span><span class="token punctuation">,</span> t <span class="token operator">/</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目2：凌乱的yyy-线段覆盖"><a href="#题目2：凌乱的yyy-线段覆盖" class="headerlink" title="题目2：凌乱的yyy / 线段覆盖"></a>题目2：凌乱的yyy / 线段覆盖</h2><p>和上面一道题类似，但是这道题需要按照结束的时间段排序，然后从前往后选，这样就能够保证参加的比赛最多的情况了。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> match<span class="token punctuation">{</span>    <span class="token keyword">int</span> begin<span class="token punctuation">;</span>    <span class="token keyword">int</span> end<span class="token punctuation">;</span><span class="token punctuation">}</span>memo<span class="token punctuation">[</span><span class="token number">1000010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool book<span class="token punctuation">[</span><span class="token number">1000010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span>match a<span class="token punctuation">,</span> match b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>end <span class="token operator">></span> b<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>begin<span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>memo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> memo <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token operator">++</span><span class="token punctuation">,</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end <span class="token operator">></span> memo<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>begin<span class="token punctuation">)</span> book<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目3：合并果子"><a href="#题目3：合并果子" class="headerlink" title="题目3：合并果子"></a>题目3：合并果子</h2><p>就是所谓的结点合并问题，如果你知道哈夫曼树的情况下，这道题就是哈夫曼树；</p><p>那么问题来了，如何弄呢？优先队列（或者说用堆）：先输入到堆里面，然后每次选择最小的两个合并然后再将新合并的结点插入到堆中，直到堆只剩下一个元素，那么这个元素就是所得答案。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span>heap<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> x<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> x<span class="token punctuation">,</span> heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans <span class="token operator">+</span><span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目4：小A的糖果"><a href="#题目4：小A的糖果" class="headerlink" title="题目4：小A的糖果"></a>题目4：小A的糖果</h2><p>只需要一边输入一遍处理，然后查看两个数字之和是不是大于x，大于则吃，小于就不吃，记得实时更新。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> memo<span class="token punctuation">[</span><span class="token number">100050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> x<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> x<span class="token punctuation">;</span>    cin <span class="token operator">>></span> memo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> memo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">;</span>        memo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin <span class="token operator">>></span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> memo<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>            ans <span class="token operator">+</span><span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> memo<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">;</span>            memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">-</span> memo<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目5：删数问题"><a href="#题目5：删数问题" class="headerlink" title="题目5：删数问题"></a>题目5：删数问题</h2><p>这道题我们首先要知道，删除的位数是相同，如此，我们删的数在某种意义上肯定越大越好。但是这个大需要怎么考量了？假定243146，删掉6和删掉第一个4相比，肯定是第一个四删了会更小，也就是说我们要删掉第一个碰见的大于两边的数就可以得到最后的答案了。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">260</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> len<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%d"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        len<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span>i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> len<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目6：陶陶摘苹果（升级版）"><a href="#题目6：陶陶摘苹果（升级版）" class="headerlink" title="题目6：陶陶摘苹果（升级版）"></a>题目6：陶陶摘苹果（升级版）</h2><p>优先摘掉需要力气花的小的就行了（如果搬椅子也要力气那就更难了）。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> apple <span class="token punctuation">{</span>    <span class="token keyword">int</span> h<span class="token punctuation">;</span>    <span class="token keyword">int</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span>apple<span class="token punctuation">;</span>apple memo<span class="token punctuation">[</span><span class="token number">5050</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span>apple a<span class="token punctuation">,</span> <span class="token keyword">const</span> apple b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>s <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>s<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> s<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>h<span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span> memo <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>h <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s <span class="token operator">>=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">,</span> s <span class="token operator">-</span><span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目7：铺设道路"><a href="#题目7：铺设道路" class="headerlink" title="题目7：铺设道路"></a>题目7：铺设道路</h2><p>在铺设过程中，我们注意到一旦存在某个地方使得左右存在高度差，那么必然这之间一定会使用高度差的天数的时间来填平；但是一旦平了之后，那么就会一起被带着填平，所以这道题的核心是累计差值。</p><p>当然因为是区间操作，因此也可以考虑前缀和和差分的方法来解决这道题。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> memo<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> memo<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans <span class="token operator">+</span> memo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目8：-USACO1-3-混合牛奶-Mixing-Milk"><a href="#题目8：-USACO1-3-混合牛奶-Mixing-Milk" class="headerlink" title="题目8：[USACO1.3]混合牛奶 Mixing Milk"></a>题目8：[USACO1.3]混合牛奶 Mixing Milk</h2><p>优先按照价格从低到高排序，再按照产量排序从高到低即可，当然减的过程中可以一步到位。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> price<span class="token punctuation">,</span> productive<span class="token punctuation">;</span><span class="token punctuation">}</span>memo<span class="token punctuation">[</span><span class="token number">5005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span> node b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>price <span class="token operator">==</span> b<span class="token punctuation">.</span>price<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>productive <span class="token operator">></span> b<span class="token punctuation">.</span>productive<span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>price <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>price<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>productive<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span> memo <span class="token operator">+</span> m<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>productive <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>productive<span class="token operator">--</span><span class="token punctuation">;</span>            ans <span class="token operator">+</span><span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>price<span class="token punctuation">;</span>            n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目9：纪念品分组"><a href="#题目9：纪念品分组" class="headerlink" title="题目9：纪念品分组"></a>题目9：纪念品分组</h2><p>先排序，排序完后两头往中间遍历，然后若和小于给定$\omega$，则直接多一个答案，否则的话就直接使得右边的指针减少（因为当前最小的加这个元素都超过了$\omega$，因此这个可以直接抛掉）。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">50000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> w<span class="token punctuation">,</span> n<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span> memo <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> memo<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> w<span class="token punctuation">)</span> left<span class="token operator">++</span><span class="token punctuation">,</span> right<span class="token operator">--</span><span class="token punctuation">,</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> right<span class="token operator">--</span><span class="token punctuation">,</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目10：跳跳！"><a href="#题目10：跳跳！" class="headerlink" title="题目10：跳跳！"></a>题目10：跳跳！</h2><p>和上题目类似，只需要从地上跳到最高，然后最高最低最高最低一次跳就OK了</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> memo<span class="token punctuation">[</span><span class="token number">350</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>memo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> memo <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">-</span> memo<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> memo<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        right<span class="token operator">--</span><span class="token punctuation">,</span> left<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目11：分组"><a href="#题目11：分组" class="headerlink" title="题目11：分组"></a>题目11：分组</h2><p>这里采用单调栈的方法，首先栈是先进后出的一种数据结构，那么我们在这个时候加上其push到栈里的元素只能为当前栈顶的元素+1，这样一个栈就构成了一个分组；</p><p>然后我们需要在特定的时候增加一个新的栈，这个时候就用flag来保证需不需要使用新的栈；</p><p>最后我们遍历栈的size取最小值即可。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> memo<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">&lt;</span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mmin <span class="token operator">=</span> <span class="token number">1e10</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>memo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> memo <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> pos<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> st<span class="token punctuation">[</span><span class="token operator">++</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mmin <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mmin<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> mmin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目12：国王游戏"><a href="#题目12：国王游戏" class="headerlink" title="题目12：国王游戏"></a>题目12：国王游戏</h2><p>贪心原则是，左手和右手之积越大，则放在最后。</p><p>$Proof$:假设队列为${(L_0,R_0),(L_1,R_1)，(L_2,R_2)，…}$其中第0个元素为国王。</p><p>先假设只有两个大臣，则奖赏：<br>$$<br>Bonus_1=\frac {L_0\times L_1}{R_1}\\<br>Bonus_2=\frac {L_0\times L_1\times L_2}{R_2}<br>$$<br>然后让两个大臣交换位置，则奖赏为：<br>$$<br>Bonus_1=\frac {L_0\times L_2}{R_2}\\<br>Bonus_2=\frac {L_0\times L_1\times L_2}{R_1}<br>$$<br>分别记上述两组数据的最大值为<br>$$<br>M_1=Bonus_{max}^1和M_2=Bonus_{max}^2<br>$$<br>不妨设<br>$$<br>M_1&lt;M_2<br>$$<br>又因为<br>$$<br>\frac {L_0\times L_1}{R_1}&lt;\frac {L_0\times L_1\times L_2}{R_1}<br>$$<br>恒成立，故有<br>$$<br>\frac  {L_0\times L_1\times L_2}{R_2}&gt;\frac {L_0\times L_1}{R_2}<br>$$<br>联立上两个不等式有<br>$$<br>\frac {L_0\times L_1\times L_2}{R_2}&lt;\frac {L_0\times L_1\times L_2}{R_1}<br>$$<br>即<br>$$<br>L_1\times R_1&lt;L_2\times R_2<br>$$<br>后续的可以使用数学归纳法继续证明；</p><p>当然还有一个叫做“洛必达法则”的大佬有更为详细的证明，此处为传送门<a href="https://jpp.blog.luogu.org/solution-p1080" target="_blank" rel="noopener">https://jpp.blog.luogu.org/solution-p1080</a></p><p>然后我们检查数据范围，好家伙还得来个高精度，最后代码如下(有一说一，这题难到我自己都不咋会，强行看题解会的- -)，注意重载完全可以写一个单独的cmp函数，这里借鉴的是dalao的写法。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> len_sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> len_max <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> len_ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token punctuation">[</span><span class="token number">10050</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> maxn<span class="token punctuation">[</span><span class="token number">10050</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">10050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> tmp<span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>    bool operator <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> tmp x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> left <span class="token operator">*</span> right <span class="token operator">&lt;</span> x<span class="token punctuation">.</span>left <span class="token operator">*</span> x<span class="token punctuation">.</span>right<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>coin<span class="token punctuation">[</span><span class="token number">1050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">muti</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len_sum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span><span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len_sum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp <span class="token operator">+</span><span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        temp <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        len_sum<span class="token operator">++</span><span class="token punctuation">;</span>        sum<span class="token punctuation">[</span>len_sum<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        temp <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    len_ans <span class="token operator">=</span> len_sum<span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len_ans<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        tmp <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        tmp <span class="token operator">+</span><span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">>=</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp <span class="token operator">/</span> x<span class="token punctuation">;</span>            tmp <span class="token operator">%</span><span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>len_ans<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len_ans <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        len_ans<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len_ans <span class="token operator">></span> len_max<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len_ans<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            maxn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        len_max <span class="token operator">=</span> len_ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>len_ans <span class="token operator">==</span> len_max<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len_ans<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> len_ans<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> maxn<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                len_max <span class="token operator">=</span> len_ans<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>coin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token operator">&amp;</span>coin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>coin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token operator">&amp;</span>coin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>coin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> coin <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">muti</span><span class="token punctuation">(</span>coin<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">cut</span><span class="token punctuation">(</span>coin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len_max<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> maxn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下一个part就是二分啦，二分最重要的是找到数据之间的单调性，具体下一篇再谈嗷。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法和程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程算法题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《CGPP》读书笔记</title>
      <link href="/2020/04/23/cgpp-du-shu-bi-ji/"/>
      <url>/2020/04/23/cgpp-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>这本书在年前决定要走图形学方向的时候就买了下来，本来是在家过完年就直接回上海看的，但是由于疫情导致现在才开始看，现在可以对于这本书进行整理了。</p><p>首先说说这本书吧《计算机图形学——原理及实践》是机工出版社引进的《Computer Graphic——Principles and practice》的翻译版本（小声BB，外文版本太贵了），但是这本书被分割为基础篇（1-16章）和进阶篇（17-38章），所以到了后面还是得找到原文阅读。<br>另外由于疫情原因，闫令琪dalao的现代计算机图形学也在B站有同步的更新，也是入门的好东西，他的课用的是虎书《Fundamental of Computer Graphic》，也是一本好书，但是这书的最新版是没有中文版的，所以拿着英文版硬啃吧。<br>接下来便是读书笔记。</p><p>绪论本章主要是对计算机图形学相关的内容进行了基本的介绍——图形学应用、图形学研究的各个领域、图形学方法高效的生成图像的工具、了解图形算法和程序规模的一些数字以及编写图形程序的思想等。</p><h2 id="第一章：绪论"><a href="#第一章：绪论" class="headerlink" title="第一章：绪论"></a>第一章：绪论</h2><h3 id="1-1计算机图形学的简介"><a href="#1-1计算机图形学的简介" class="headerlink" title="1.1计算机图形学的简介"></a>1.1计算机图形学的简介</h3><h4 id="1-计算机图形学"><a href="#1-计算机图形学" class="headerlink" title="1. 计算机图形学"></a>1. 计算机图形学</h4><p>是指通过计算机的显示器和交互设备进行视觉交流的科学和艺术（？）。通常来说视觉是从计算机到人，而图形学则是从人到计算机。而且计算机图形学算是多学科交叉的学科，物理学原理对光的传播建模并动画仿真；采用数学方法描述物体的形状；基于人感知能力进行资源配置（即不花时间绘制不受注意的细节上）。</p><p>狭义上，计算机图形学可以定义为：给定场景中的物体模型（对场景中物体几何和它们如何反射光线的描述）和向场景投射光线的光源模型（通过数学描述、辐射方向和光谱分布等），生成该场景的特定视图（即到达场景中虚拟视点或相机的光线）。</p><p>通过这个描述，或许我们可以将图形学视作一堆矩阵的乘法，或者说就拿光照举例子：入射光乘以场景的反射率得到反射光，递归直至计算出充满整个空间的光（有点像Peano曲线的感觉），但是实际上这是不可能的，原因或许是因为计算机采用0/1导致的离散型无法完全模拟现实。同时基于上面所说的“人和计算机的关系”，我们可以将视觉视作矩阵分解（4.24补充：或者说一切需要猜测的东西都可以视作视觉）。</p><h4 id="2-模型的含义"><a href="#2-模型的含义" class="headerlink" title="2. 模型的含义"></a>2. 模型的含义</h4><p>不再是我们传统意义的模型，至少这个模型我们可以指几何模型，也可以指数学模型。</p><p>几何模型就是我们想要呈现在图像中的物体的模型，而所谓的建模就是从一无所有开始，创建这样一个模型的过程，而所得到的对物体的“几何+其他信息”的描述就是模型；</p><p>而数学模型则是物理/数学中计算的模型，例如光照如何反射的模型，物体如何运动的模型之类的，这些模型或许正确，或许错误，需要一定的公理或者一定的现实基础来证明的。</p><h4 id="3-图形学的研究方向"><a href="#3-图形学的研究方向" class="headerlink" title="3. 图形学的研究方向"></a>3. 图形学的研究方向</h4><p>a. 创建几何模型的方法；<br>b. 表面反射率的表示（如表面下浅层的反射率、途径介质之类的反射率）的表示；<br>c. 基于物理定律和近似模型的场景动画；<br>d. 动画控制；<br>e. 与虚拟体之间的交互；<br>f. 非照片真实感表示。</p><p>值得吐槽的是：非仿真领域（nonsimulation area）的研究似难以获得突破，其原因可能是因为定性的描述对于此领域更重要，即“人与人之间是不同的”。</p><h4 id="4-像素"><a href="#4-像素" class="headerlink" title="4. 像素"></a>4. 像素</h4><p>构成图像点阵的基本元素（或者说这里指的是显示像素）。</p><h4 id="5-图形应用"><a href="#5-图形应用" class="headerlink" title="5. 图形应用"></a>5. 图形应用</h4><p>对于日常生活中的图形应用（日常的，不是专业的，因为专业上的图形应用反而更具有针对性）可能最多的便是游戏——每秒钟能够处理几百万格多边形面片（或者说更多的三角形面片）和视频，这些应用的关键是绘制（指将物体/图像呈现在显示器上）性能相关的处理器时间、内存和带宽。</p><p>而对于性能来说，一种实用的指标是每秒可以绘制的基本体（面向应用的基本构形单元，可能是三角mesh，可能是带texture的多边形，可能是对于流场可视化系统中带颜色的箭头）个数。</p><p>每秒可显示的基本体个数等于煤每帧可现实的基本题数乘以每秒的显示帧率，通过动态调整帧率来满足不同应用对资源的需求调整。</p><h3 id="1-2-CG的历史"><a href="#1-2-CG的历史" class="headerlink" title="1.2 CG的历史"></a>1.2 CG的历史</h3><p>最开始的时候，CG的研究中心存在着经典的简化假设：所有物体对光的反射方式与平光乳胶漆大致相当，故光线要么直接照射在表面，要么再场景中多次反射，最终形成泛光照明效果，是的未收到光源直射的物体也有光照。并且，三角形内部各点通过三角形面片的三个顶点值在进行计算（即插值）。<br>而伴随着越来越多的模型例如形状模型、光源模型和反射模型等的加入，但是如今的主流模型中还是包括了泛光。</p><h4 id="1-泛光"><a href="#1-泛光" class="headerlink" title="1. 泛光"></a>1. 泛光</h4><p>泛光是指的是一定量的光线，他们没有确切的起始点，但在场景中无处不在（就我的初步理解就是环境光线？）。泛光保证了场景中的可见物体均可受到一定的光照，将其值设定为经验值，可以用之模拟光能传输中的某些分量。</p><p>后续（第六章）会介绍反射模型，其具备漫射项——对应表面朝向各个方向的均匀反射的光；镜面反射项——模拟一定方向的反射光（包括近乎完美镜面反射和漫反射）和泛光项。</p><h4 id="2-图像显示器"><a href="#2-图像显示器" class="headerlink" title="2. 图像显示器"></a>2. 图像显示器</h4><p>最开始的向量显示设备，随后向光栅显示设备（展示的图像是一个点阵）的转变。</p><p>显示器的一些参数：分辨率——单个点的精细程度；大小（显示器物理尺寸）和动态范围（可显示的像素最亮和最暗光亮度之比）。</p><h4 id="3-CG的飞跃——可编程图形卡"><a href="#3-CG的飞跃——可编程图形卡" class="headerlink" title="3. CG的飞跃——可编程图形卡"></a>3. CG的飞跃——可编程图形卡</h4><p>应用程序不再发送多边形和图像，而是发送小的程序给图形卡，其分别描述了如何接替的使用随后的多边形和图像的显示方式和次序。这些所谓的“着色器”开辟了不需要使用额外的cpu周期就能生成真实感图形的全新领域（虽然GPU在疯狂运行）。</p><h3 id="1-3-一个栗子——有关真实感的讨论"><a href="#1-3-一个栗子——有关真实感的讨论" class="headerlink" title="1.3 一个栗子——有关真实感的讨论"></a>1.3 一个栗子——有关真实感的讨论</h3><p>在黑暗的房间里，一个100W的点光源悬挂在桌子上方约1m处，桌面涂有灰色乳胶漆。我们从2m高处看这个桌子，会看到什么呢?</p><p>先不管灯泡射出的可见光和景物表面的精确反射率是多少，场景中的大致光照分布(在灯下方较为明亮，而远离灯的区域较暗)可由物理学决定。可以做一个思维实验，想象一下该场景的理想“画面”。</p><p>在这里，该书的作者希望绘制该场景的图形系统能生成与之十分逼近的结果。当然结果肯定是很难的鸭，因为标准图形包没有物理的相关量的完整描述，例如，物理学中光强按照距离光源距离平方成反比，但是传统图形学包会存在二次衰减（有部分原因是因为：示器亮度和人眼对光的非线性反馈导致的，且显示器的动态范围被限定了）导致其生成的图片看起来不对或者说不真实。于是这里就讨论了一个重要的领域。</p><p>早期图形学研究十分偏重的的领域，也因此导致了大多数计算并不是基于物理的，而是曲迎合人的视觉系统的注意（主要是因为人的HVS实在是太鲁棒了，导致有点点不像真的你就看得出来）。</p><p>当然现在也在研究非真实感图形学，而且研究的人越来越多了。</p><p>另外吐槽一句：为什么在视频工作者眼里粒子/特效很麻烦而在CGdalao们的眼里粒子/特效很简单的原因，就是因为粒子/特效不注重真实感，反而更容易“随意”写。</p><p>那么问题来了：我们不追求物理那么追求什么呢？不会是去研究人眼吧？答案还真是这样的，当然不是研究人眼，而是去以视觉的方式来呈现信息。就拿我们书上的例子：</p><p>典型的视图是一个光线好的房间，光线方向各异强度相同射入到景物的表面，反射光差异控制在一定的范围（书上是$10^3$）。然后简单的将屏幕像素的显示亮度调整到合理的区间，让其在类似的范围内变化，通过这个方式，无需在视图上模拟真实的物理反射。但是，作为我们“真实感”，我们需要将其表示的颜色表达清楚，否则一眼假。</p><p>这个过程可以当做一个抽象——我们不关心物理性质，但是我们只关心外貌（大小，颜色之类的）。</p><h3 id="1-4-目标、资源和适度的抽象"><a href="#1-4-目标、资源和适度的抽象" class="headerlink" title="1.4 目标、资源和适度的抽象"></a>1.4 目标、资源和适度的抽象</h3><p>在上面的栗子中，我们知道了一个原则——在任何的仿真中，首先应该了解其背后的物理数学过程，然后在给定的时空限制，算力等（或者说资源限制）情况下，确定能够提供结果（或者说目标）的最佳近似方法。</p><h4 id="1-睿智的（非骂人意味）建模原则"><a href="#1-睿智的（非骂人意味）建模原则" class="headerlink" title="1. 睿智的（非骂人意味）建模原则"></a>1. 睿智的（非骂人意味）建模原则</h4><p>对某一现象进行建模的时候，先深入了解需要建模的现象和建模的目标，然后选择一个含义丰富的抽象模型，再在你所限的资源范围内，为期选取合适的表示方法，最后通过测试来验证模型是否合适。</p><h4 id="2-视觉系统的原则"><a href="#2-视觉系统的原则" class="headerlink" title="2. 视觉系统的原则"></a>2. 视觉系统的原则</h4><p>在求解图形学问题和构建模型时考虑人类视觉的影响——看不见太小的，看不见过快的，运动控制系统也有局限性（比如我们要在屏幕用鼠标精确点击某一像素）（你要random那不是随意玩）。</p><p>但是，不要认为感知能够改变我们的所有，毕竟脑壳是拿来结合现实思考的。我们在考虑的时候还是需要基于某些东西的特性做出改变的（比如在光照的时候，只描绘可见光或者只将光和波长描述为双射）</p><h3 id="1-5-图形学中的一些参数和一些参数值的量级"><a href="#1-5-图形学中的一些参数和一些参数值的量级" class="headerlink" title="1.5 图形学中的一些参数和一些参数值的量级"></a>1.5 图形学中的一些参数和一些参数值的量级</h3><h4 id="1-普朗克常量"><a href="#1-普朗克常量" class="headerlink" title="1. 普朗克常量"></a>1. 普朗克常量</h4><p>光是波粒二象性的，对于光子来说，其$E=\frac {hc}{\lambda}$，而$h=6.6\times10^{-34} J\times s$，通过公式可以求解单个典型光子（波长为650nm）的能量为$3\times 10^{-19}J$</p><h4 id="2-白天和黑夜进入眼睛的光能之比"><a href="#2-白天和黑夜进入眼睛的光能之比" class="headerlink" title="2. 白天和黑夜进入眼睛的光能之比"></a>2. 白天和黑夜进入眼睛的光能之比</h4><p>接近为$10^{10}$</p><h4 id="3-显示器和人眼"><a href="#3-显示器和人眼" class="headerlink" title="3. 显示器和人眼"></a>3. 显示器和人眼</h4><p>由于显示器实在是发展太快了，现在已经很难说出一个好的标准了，但是人眼的标准还是可以说出来的，人眼的角分辨率约为$1rad$（这就是我们在PPT旋转一度没啥感觉的原因），等效为距离一千米观察$300mm$的长度（但是现在这么多人戴眼镜，这个东西很堪忧啊）（或者在电脑屏幕1米前观察$0.3mm$的长度）。</p><h4 id="4-复杂应用的处理需求——以游戏为例"><a href="#4-复杂应用的处理需求——以游戏为例" class="headerlink" title="4. 复杂应用的处理需求——以游戏为例"></a>4. 复杂应用的处理需求——以游戏为例</h4><p>为了让游戏场景出现在屏幕上，需要将描述场景的多边形传送给图形处理器，然后将这些多边形的属性（颜色大小等），通过多种技术（反走样，平滑着色等）予以绘制和展现。</p><p>在这个过程中，每个像素都得着色计算，因此每秒的多边形和每秒的像素成为了效率的指标，且时刻变化。</p><h3 id="1-6-图形管线"><a href="#1-6-图形管线" class="headerlink" title="1.6 图形管线"></a>1.6 图形管线</h3><h4 id="1-图形管线（graphics-pipeline）"><a href="#1-图形管线（graphics-pipeline）" class="headerlink" title="1. 图形管线（graphics pipeline）"></a>1. 图形管线（graphics pipeline）</h4><p>标准图形系统的实施通常被叫做图形管线。管线指阿紫数学模型到生成屏幕像素的一系列过程和步骤。</p><p>我们可以将各个应用大概的分为：纹理数据，多边形网格（传递多边形数据），多边形网格顶点（传递网格顶点数据），取景设置，光源数据。然后将这些应用传到图形卡进行几何变换，光栅化和光照计算，然后生成图像再到显示。</p><p>将图形管线看做一个黑盒，我们也能写出来很多好的图形学程序，你只需要知道接口是怎么传递数据的（再怎么复杂也比写游戏的伤害计算传递的参数少）。</p><p>当然由于现在的发展，不怎么用管线了，反而是用图形的API提供可以调整管线中特定参数的实用方法（这样灵活多了），而是使用shader来进行管线中某些功能，</p><p>管线只是一个抽象的概念，一种思考工作流程的方式，和计算机组成的流水线是差不多的，他会让我们关注与最终的结果或者花费的时间，而不没必要在意底层做了啥，电流怎么走之类的对于本课程无关的细节。</p><h4 id="2-纹理映射和近似"><a href="#2-纹理映射和近似" class="headerlink" title="2. 纹理映射和近似"></a>2. 纹理映射和近似</h4><p>纹理映射就是指通过索引的方式将纹理图像映射（贴）到物体的一个多边形或者多个多边形上。可以用这个方法来改变图像某个点的颜色（当然只是其中的一小个功能）。例如通过多边形顶点计算法向量，然后通过法向量结合顶点进行内部各点的插值计算。</p><p>而在这个过程中，我们采用不真实的法向量（或通过插值来模拟），咋对每个多边形的不同点采用不同的法向量，那么这个图像表面会改变。</p><h4 id="3-光栅化"><a href="#3-光栅化" class="headerlink" title="3. 光栅化"></a>3. 光栅化</h4><p>将连续的几何表示转化为面向显示的离散像素表示。</p><h3 id="1-7-图形学与艺术、设计和感知的关系"><a href="#1-7-图形学与艺术、设计和感知的关系" class="headerlink" title="1.7 图形学与艺术、设计和感知的关系"></a>1.7 图形学与艺术、设计和感知的关系</h3><h4 id="1-关于诡异谷理论"><a href="#1-关于诡异谷理论" class="headerlink" title="1. 关于诡异谷理论"></a>1. 关于诡异谷理论</h4><p>指的是人类对一个东西的认知，先是逐渐认识，然后突然什么都不认识，最后猛地认识清楚，而且最后两个阶段相距非常的近，这一小段就是所说的诡异谷（不是有看山是山，看山不是山，看山依旧是山的境界嘛，和这个差不多）。</p><h4 id="2-马赫带效应"><a href="#2-马赫带效应" class="headerlink" title="2. 马赫带效应"></a>2. 马赫带效应</h4><p>是一种主观的边缘对比效应。当观察两块亮度不同的区域时，边界处亮度对比加强，使轮廓表现得特别明显。</p><h3 id="1-8-基本的图形系统"><a href="#1-8-基本的图形系统" class="headerlink" title="1.8 基本的图形系统"></a>1.8 基本的图形系统</h3><h4 id="图形数据"><a href="#图形数据" class="headerlink" title="图形数据"></a>图形数据</h4><p>通常情况下，图形模型会创建于某一个方便的坐标系中：立方体中心为原点，边长为一，这样均位于-0.5到0.5之间，我们称之为模型空间和对象空间坐标系。</p><p>然后将整个立方体放置在场景（由一系列物体和光源组成的模型）中，通过一定的原则，得到一个坐标系，其坐标系的坐标为场景空间坐标。</p><p>而虚拟相机的位置和朝向亦表示为场景空间坐标，虚拟光源的位置和物理特性同样如此。现在我们构造相机空间坐标系（相机坐标系）：原点设置在相机的中心，x轴指向相机右侧（从后往前看）z指向相机后侧。</p><p>然后通过相机坐标转化为规格化坐标，将其坐标表示为-1到1的浮点数就行了。</p><p>最后可见片段就被变换为像素坐标（对应浮点乘以显示器实际尺寸）通过取整和缩放来实现，所得到的的坐标称为图像坐标。</p><h3 id="1-9-1-12略"><a href="#1-9-1-12略" class="headerlink" title="1.9-1.12略"></a>1.9-1.12略</h3><h3 id="1-13-真实感概述"><a href="#1-13-真实感概述" class="headerlink" title="1.13 真实感概述"></a>1.13 真实感概述</h3><h4 id="1-光线"><a href="#1-光线" class="headerlink" title="1. 光线"></a>1. 光线</h4><p>一些光线的基本物理性质的介绍：<br>a. 光在真空中直线传播，直到遇到某一个平面；<br>b. 光线遇到光滑表面发生反射，反射角和入射角相等，或者被表面吸收，或者组合；<br>c. 大多数看起来“光滑”的面从微观上都是粗糙的，所以这种面会发生漫反射；<br>d. 平板针孔只允许一束光线通过，这些光线或直接穿过针孔中心或与之接近；<br>e. 相机的感光像素检测到光的时候，会通过积分在一小段时间内的所有光，积分的值即为传感器对入射到所有光子的反应；<br>f. 可调节显示器上的像素进行调节使之发出指定亮度的光和颜色光。</p><p>同时还有三大挑战：<br>a. 需要构建适当的数据结构来表示场景中的表面、相机和光源；<br>b. 需要一个可计算所有的光反射并集成的算法；<br>c. 也是最重要的DS和算法都必须要高效。</p><h4 id="2-物体和材料"><a href="#2-物体和材料" class="headerlink" title="2. 物体和材料"></a>2. 物体和材料</h4><p>物体：假设在场景中收到光照时，物体表面吸收光或者反射光或者两者都有，而具体的反射和吸收性质取决于物体的材料；同时假设空气既不反射光也不吸收光，而是让光穿过；同时忽略透明材料和半透明材料。</p><p>物体一般表示为表面的几何，而这些表面一般都是用三角形网格表示。而由于各个三角形面之间的网格边没有面积，所以在计算光和表面交互时可以忽略这些边（或者处理为就在三角形内部）（可以处理为不在三角形内部）（自圆其说即可）。</p><p>多面体上每个三角形都有一个平行于这个三角形平面的向量，这个向量为法向量。设其入射方向为l，那么对于理想反射面，反射光线在ln平面上，入射和反射角相同。而对于其他平面，则向多个方向散射。</p><p>而完全散射表面，光将所有方向散射，反射光亮度与|ln|点积的绝对值成正比，即与其夹角余弦值成正比。</p><p>而对于Phong-Blinn模型来说，光泽表面的外观和视角有关，倘若一个明亮房间观看表面，则会形成一个高光，而移动头部，高光也会移动。这个模型中，反射光为n点乘h的k次幂成正比，h是从表面到光源的向量-l和从表面到视点的向量e平分向量，最后进行单位化就是h了。</p><h4 id="3-接受光线"><a href="#3-接受光线" class="headerlink" title="3. 接受光线"></a>3. 接受光线</h4><p>使用数值积分进行近似，同时选取一些位置对被积函数进行采样，然后综合样本估计总的积分值。</p><h4 id="4-图像显示"><a href="#4-图像显示" class="headerlink" title="4. 图像显示"></a>4. 图像显示</h4><p>像素的概念略。</p><p>像素的显示可以使用三元组（R,G,B）每个数字在0-0xff间，最后发出由三个给定颜色的混合光，但是注意，光强和数字没有正比的关系。</p><h4 id="5-人类的视觉系统特点"><a href="#5-人类的视觉系统特点" class="headerlink" title="5. 人类的视觉系统特点"></a>5. 人类的视觉系统特点</h4><p>人眼对亮度的感知不是线性的。假如你在一张白纸上打印若干黑色条纹，使之只剩下20%的空白区域，显然人射在整张纸上的光只有20%被反射出来。但是如果将这张打印过的纸放在一张同一类型的空白纸旁边，然后从足够远的距离来观察它们(远到无法分辨纸上的黑条纹)，那么打印纸的亮度看上丢天约是未打印的空白纸的一半。大致上说，倘若眼睛已适应了某亮度层次的光线， 即使进入人眼的光的强度减少了80%，但感知到的亮度只是减少了一半而已。</p><p>同时对人的视觉系统有很好的适应性：能够从噪声很多的黑白图片识别自己的家之类的。因为这个原因，对于CG来说既是优势又是劣势，即对于某些很糟糕的近似，我们能够辨别出来，但是很精细的近似，我们却又能发现其不现实的地方。</p><h4 id="6-数学相关"><a href="#6-数学相关" class="headerlink" title="6. 数学相关"></a>6. 数学相关</h4><p>三角形、小向量和矩阵操作，微积分，几何和拓扑（连续性，曲面几何，曲率，微分几何等）。</p><h3 id="1-14-总结"><a href="#1-14-总结" class="headerlink" title="1. 14 总结"></a>1. 14 总结</h3><p>实际上第一章就是给了我们一个图形学大概的全貌，由于知识体系的不够所以我们不能够很好的理解其中一些的细节，同时也是为后面的一些内容提前做一个有效铺垫，防止我们突然看到某个概念而一脸懵逼（突然想起来采煤概论的时候老师开场就在那里说上山下山的懵逼感）。</p><h2 id="第二章：2D图形学简介"><a href="#第二章：2D图形学简介" class="headerlink" title="第二章：2D图形学简介"></a>第二章：2D图形学简介</h2><p>在对计算机图形学全面综述后，现在开始结合一定的实际案例来对2D图形学简介，而此处基于WPF（微软的）。</p><h3 id="2-1-2D图形流水线概述"><a href="#2-1-2D图形流水线概述" class="headerlink" title="2.1 2D图形流水线概述"></a>2.1 2D图形流水线概述</h3><p>从第一章我们知道，2D的图形平台是应用程序和显示硬件的中介，它提供的功能与输出和输入相关联。接下来先在宏观角度了解2D图形应用程序。</p><p>很少有一项应用的目的仅仅画一些像素，这些应用通常是将某些数据（称之为应用模型（Application Model，AM））转化为图像，并通过用户交互来进行操控。</p><p>在典型的PC环境中，APP运行时会启用一个窗口管理器，窗口管理器决定了每一个APP在屏幕上的显示区域，并通过窗口浏览器实施显示和交互。而APP调用图形平台API，在窗口内的客户区域进行绘制，图形平台则通过GPU回应调用从而完成绘制。</p><p>一般而言，将APP开设客户区域有两个目标：区域的一部分用于应用程序的用户界面控制，其余部分是视图，用来显示场景绘制的结果，显示内容由APP的场景生成器从AM中提取或导出。生成用户界面的UI生成器与场景生成器不同，操作方式也不同。</p><p>在一些人的眼里，AM上就是一大堆几何数据，但实际上，在某些可视化应用中，可能是完全不包含几何的数据（在B站有很多的数据可视化视频，就是这种类型）。</p><h3 id="2-2-2D图形平台的演变"><a href="#2-2-2D图形平台的演变" class="headerlink" title="2.2 2D图形平台的演变"></a>2.2 2D图形平台的演变</h3><h4 id="2-2-1-从整数到浮点数坐标"><a href="#2-2-1-从整数到浮点数坐标" class="headerlink" title="2.2.1 从整数到浮点数坐标"></a>2.2.1 从整数到浮点数坐标</h4><p>在最开始的2D光栅图形平台中大部分都采用整数坐标系统在矩形画布上绘制像素。而应用程序并非对单个像素进行着色，而是通过调用绘制基元的程序来绘制场景，基元可以是几何形状，也可以是预先读入的矩阵图像（位图）。而以微软的API中，采用画刷的属性来指定基元内区域的填色方式，而画笔的属性则控制基元应呈现的轮廓形状（这里和UE4的画刷有丢丢区别）。</p><p>在最初的GDI平台最简单的场景设置方式就是应用程序采用整数坐标，可以一对一直接映射为屏幕像素。</p><p>但是问题来了，在不同的输出设备，相同的代码画出来的东西大小怎么说？这个问题实际上没有具体的答案，显示大小取决于输出设备的分辨率（每英寸点的数目），假设我们考虑的屏幕分辨率为72dpi，然后输出到300dpi，你会发现，这个图像小了特别多。相反，则会大到让人难以结束。</p><p>因此光栅图形领域借鉴了向量图形的方法来解决了这个问题，使用浮点数坐标系统来表达事物，依次将图像和设备隔离看来。</p><h4 id="2-2-2-即时模式（immediate-mode）和保留模式（retained-mode）"><a href="#2-2-2-即时模式（immediate-mode）和保留模式（retained-mode）" class="headerlink" title="2.2.2 即时模式（immediate mode）和保留模式（retained mode）"></a>2.2.2 即时模式（immediate mode）和保留模式（retained mode）</h4><ol><li>即时模式：</li></ol><p>包括了可高校访问图形输出设备的薄层平台，可以理解为和内存差不多，这些平台不会保留任APP所采用的基元记录。简而言之：当要对绘制图像做任何修改时，让场景生成器遍历AM，重新生成表示场景的基元集合。</p><p>想要竟可能让其编程贴近图形硬件以获取最大化性能的应用程序开发人员，以及想要让产品占用资源非常少的人（这里就和用C/CPP的人感觉差不多）。</p><ol start="2"><li>保留模式：</li></ol><p>由于有些用户的希望可以为他们免除尽可能多的开发任务，因此为了满足这些用户，保留模式平台在专用的数据库中保留了需绘制或者观看的场景表示，称之为场景图。由于需要保存整个场景，其还能承担除显示外的与许多用户交互相关的常见任务（比如选择关联等等）。</p><p>基本上所有的RM软件包都可以追溯到Sketchpad，其支持创建标准模板，可以再画布（canvas）实例化一次或者多次来构建场景。</p><ol start="3"><li>UI控制器：</li></ol><p>也是一种模板化的对象，作为一题的组合，它具有内在的一致化的外观和“感觉”（指控件的动态行为）。</p><p>同时大多数RM的UI平台还包括了界面布局管理器，将空间安排成美观整齐的形式，是彼此间的大小和间隔保持一致，并能够根据程序或者用户发出更改UI区域大小或者形状的指令，对布局自动进行调整。</p><h4 id="2-2-3-过程语言和描述性语言"><a href="#2-2-3-过程语言和描述性语言" class="headerlink" title="2.2.3 过程语言和描述性语言"></a>2.2.3 过程语言和描述性语言</h4><p>略</p><h3 id="2-3-使用WPF定义2D场景"><a href="#2-3-使用WPF定义2D场景" class="headerlink" title="2.3 使用WPF定义2D场景"></a>2.3 使用WPF定义2D场景</h3><p>实际上我最开始使用Unity来玩一个时钟画画，但是这里拿XAML反而更能够是我们从语法细节往图形学概念集中。</p><h4 id="2-3-1-XAML应用程序结构"><a href="#2-3-1-XAML应用程序结构" class="headerlink" title="2.3.1 XAML应用程序结构"></a>2.3.1 XAML应用程序结构</h4><p>我们采用XML来构造一个简单的XAML应用程序来模拟一个模拟时钟，其和HTML语法差不多，主要是其表示了元素的层次化结构。(有一说一我也不咋会，但是我就是看得懂0 0应为只要会英文就能读懂了。。。)</p><p>首先我们建立单独的Canvas</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Canvas</span>        <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://schemas.microsoft.com/winfx/2006/xaml/presentation<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmins:</span>x</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://schemas.microsoft.com/winfx/2006/xaml<span class="token punctuation">"</span></span>        <span class="token attr-name">ClipToBounds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>True<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Canvas</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般来说都将ClipToBounds设为True表达了画布有界。</p><h4 id="2-3-2-采用抽象坐标系定义场景"><a href="#2-3-2-采用抽象坐标系定义场景" class="headerlink" title="2.3.2 采用抽象坐标系定义场景"></a>2.3.2 采用抽象坐标系定义场景</h4><p>我们来考虑时钟的构成，时钟盘，时针分针秒针，和转动逻辑。</p><p>钟面很gandan，填充一个椭圆就可，时针分针可能会比较麻烦，秒针也一样。</p><p>回顾在图纸上的笛卡尔坐标系（略），我们虽然在同一个坐标系中，每个坐标都是唯一的，但是一般的图纸坐标系还是在避免二义性方面也有局限性。而这种图纸上的坐标系实际上就是一个抽象坐标系，它不刻画景物在物理世界的位置大小。但是我们在显示的时候就会无法做到真实。但是在做到真实的过程中，我们需要进行真实几何的度量，因此我们先讨论几何描述。</p><p>按照定义顺序，我们应当先画后面，再画前面，故我们先填充一个圆</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Ellipse</span>         <span class="token attr-name">Canvas.Left</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-10.0<span class="token punctuation">"</span></span> <span class="token attr-name">Canvas.Top</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-10.0<span class="token punctuation">"</span></span>         <span class="token attr-name">Width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20.0<span class="token punctuation">"</span></span> <span class="token attr-name">Height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20.0<span class="token punctuation">"</span></span>         <span class="token attr-name">Fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lightgray<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Canvas</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们这么写看起来没有问题，但是我们不知道，这个图像会怎么在屏幕上显示，因为这个20是没有度量。这就是将抽象坐标直接传递给图形平台会导致的结果。而基于此，我们需要考虑</p><ol><li>显示设备的特征（大小，分辨率，屏幕高宽比等）；</li><li>如何根据屏幕形状因素的约束选定绘制后图像的大小和在屏幕上的位置；</li><li>如何在图形平台上给出几何描述以得到正确的结果</li></ol><h4 id="2-3-3-坐标系的选择范围"><a href="#2-3-3-坐标系的选择范围" class="headerlink" title="2.3.3 坐标系的选择范围"></a>2.3.3 坐标系的选择范围</h4><p>要求有2：独立于软件平台，独立于显示器的形状因素</p><p>坐标系/基的选择原则：始终选择你工作中最为方便的坐标系或基（线代的那个），然后通过变换使得和不同的坐标系联系起来即可。</p><h4 id="2-3-4-WPF画布坐标系"><a href="#2-3-4-WPF画布坐标系" class="headerlink" title="2.3.4 WPF画布坐标系"></a>2.3.4 WPF画布坐标系</h4><p>WPF画布坐标系其特点是：x方向朝向右，y朝向下，画布在四个方向均有边界，且边界严格受限，任何边界外的东西（可视信息）均不会被显示。</p><p>作为一般情况下，我们一般都是从抽象坐标系，再到物理坐标系，再到设备坐标系场景几何描述的映射顺序，则从一般的无边界坐标系统（就一般我们在画函数图像的十字架），再到WPF在坐标系统（上面写了），再到显示在屏幕上。</p><h4 id="2-3-5-使用显示变换"><a href="#2-3-5-使用显示变换" class="headerlink" title="2.3.5 使用显示变换"></a>2.3.5 使用显示变换</h4><p>在时钟例子的产出中，我们发现了为什么显示出来如此的奇怪（如果你画了的话），是因为WPF的一个单位是0.25英寸还要小，而且圆心在原点，但是WPF只显示第一象限。</p><p>因此我们需要一个显示变换，是的时钟可见，且具备合适尺寸，在数学上使用scale矩阵和translation矩阵即可。当然在这里我们可以附加一个RenderTransform来指定一个或顺序多个几何变换：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Canvas</span> <span class="token attr-name">....</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!-</span> <span class="token attr-name">THE</span> <span class="token attr-name">SCENE</span> <span class="token attr-name">-</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Ellipse</span> <span class="token attr-name">...</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!-</span> <span class="token attr-name">DISPLAY</span> <span class="token attr-name">TRANSFORMATION</span> <span class="token attr-name">-</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Canvas.RenderTransform</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!-</span> <span class="token attr-name">RenderTransform的内容就是一系列有序的几何变换组。</span> <span class="token attr-name">-</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TransformGroup</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!-</span> <span class="token attr-name">使用浮点数来表达放缩因子-</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ScaleTransform</span> <span class="token attr-name">ScaleX</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.8<span class="token punctuation">"</span></span> <span class="token attr-name">ScaleY</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.8<span class="token punctuation">"</span></span>                            <span class="token attr-name">CenterX</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">CenterY</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!-</span> <span class="token attr-name">然后接下来是平移-</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TranslateTransform</span> <span class="token attr-name">X</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>48<span class="token punctuation">"</span></span> <span class="token attr-name">Y</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>48<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TransformGroup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Canvas.RenderTransform</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Canvas</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意</p><ol><li>这里如果你要先平移再放缩，那么你需要改变参数，至于怎么改变，我就不写了（可以画图来康康关系）</li><li>在变换过程中，如果你将其视作线性变换，那么其变换顺序也是十分重要，包括普通的平移变换，至于为什么，结合一下矩阵的LU分解和矩阵乘法不可交换或许会有一些别样的收获。</li></ol><h4 id="2-3-6-构造并使用模块化模板"><a href="#2-3-6-构造并使用模块化模板" class="headerlink" title="2.3.6 构造并使用模块化模板"></a>2.3.6 构造并使用模块化模板</h4><p>上述的变换工具可市价在可重用模板（控制模板）的复制件，进行重定位和调整，从而创建场景。即我们做一个轮子。这里用一个针来搞个模板（那个NAVY是藏青色）</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Polygon</span>         <span class="token attr-name">points</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-0.3, -1 -0.2,8 0,9 0.2,8 0.3,-1<span class="token punctuation">"</span></span>         <span class="token attr-name">Fill</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Navy<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过将polygon化为模板，那么我们就可以通过一定的变换使之变为其他的“样子”，如</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Canvas</span> <span class="token attr-name">...</span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!-</span> <span class="token attr-name">先定义一个可重用的资源并命名</span> <span class="token attr-name">-</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Canvas.Resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ControlTemplate</span> <span class="token attr-name"><span class="token namespace">x:</span>Key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ClockHandTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Polygon</span> <span class="token attr-name">....</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ControlTemplate</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Canvas.Resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!-</span> <span class="token attr-name">把上面2.3.5之前的给CV过来</span> <span class="token attr-name">-</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Canvas</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然由于我们没有实例化，因此需要如下操作：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Control</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MinuteHand<span class="token punctuation">"</span></span>         <span class="token attr-name">Template</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{StaticResource ClockHandTemplate}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过此方法，实际上看不出来模板的感觉，但是接下来我们搞个时针，你就会发现有些不同了：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!-</span> <span class="token attr-name">hour</span> <span class="token attr-name"><span class="token namespace">hand:</span></span> <span class="token attr-name">-</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Control</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HourHand<span class="token punctuation">"</span></span> <span class="token attr-name">Template</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{StaticResource ClockHandTemplate}<span class="token punctuation">"</span></span>    <span class="token attr-name">&lt;Control.RenderTransform</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TransformGroup</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ScaleTransform</span> <span class="token attr-name">ScaleX</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.7<span class="token punctuation">"</span></span> <span class="token attr-name">ScaleY</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.7<span class="token punctuation">"</span></span> <span class="token attr-name">CenterX</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">CenterY</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RotateTransform</span> <span class="token attr-name">Angel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>45<span class="token punctuation">"</span></span> <span class="token attr-name">CenterX</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">CenterY</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TransformGroup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Control.RenderTransform</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Control</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后将这些代码段合并在一起，那么久可以在画布上显示了。</p><p>当然这只是最简单的单层次层次化模型（和我们写算法题把输入，输出，算法代码写成几个函数然后依次调用感觉差不多）。</p><h3 id="2-4-WPF的2D动画显示"><a href="#2-4-WPF的2D动画显示" class="headerlink" title="2.4 WPF的2D动画显示"></a>2.4 WPF的2D动画显示</h3><p>XAML无需过程代码定义简单动画的能力，有XAML动画元素实现，通过插值是对象动态属性伴随时间而变化。</p><p>我们只需要在Hourhand的TransformGroup的RotateTransform修改为</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RotateTransform</span> <span class="token attr-name"><span class="token namespace">x:</span>Name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ActuralTimeHour<span class="token punctuation">"</span></span> <span class="token attr-name">Angel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后你再搞个</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DoubleAnimation</span>                  <span class="token attr-name">Stroyboard.TargetName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ActuralTimeHour<span class="token punctuation">"</span></span>                 <span class="token attr-name">Stroyboard.TargetProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Angel<span class="token punctuation">"</span></span>                 <span class="token attr-name">From"0.0"</span> <span class="token attr-name">To</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>360.00<span class="token punctuation">"</span></span> <span class="token attr-name">Duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1:00:00.0<span class="token punctuation">"</span></span>                 <span class="token attr-name">RepeatBehavior</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Forever<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样在程序运行的时候，就可以动拉。</p><p>最后一步就是安装动画程序的XAML代码啦，详情</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Canvas</span> <span class="token attr-name">...</span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!-</span> <span class="token attr-name">CV之前的东东</span> <span class="token attr-name">-</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Canvas.Triggers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EventTrigger</span> <span class="token attr-name">RoutedEvent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FrameworkElement.Loaded<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BeginStoryboard</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Storyboard</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!-</span> <span class="token attr-name">CV上面的东东，注意时针分针秒针都得各搞一个</span> <span class="token attr-name">-</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DoubleAnimation</span> <span class="token attr-name">...</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Storyboard</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BeginStoryboard</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>EventTrigger</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Canvas.Triggers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Canvas</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是通过标记语言来搞一个时钟，以此来介绍2D图形学的基本，接下来第三章的内容就是有关一个绘制器</p><h2 id="第三章：一个古老的绘制器"><a href="#第三章：一个古老的绘制器" class="headerlink" title="第三章：一个古老的绘制器"></a>第三章：一个古老的绘制器</h2><h3 id="3-1-一幅丢勒的木刻画"><a href="#3-1-一幅丢勒的木刻画" class="headerlink" title="3.1 一幅丢勒的木刻画"></a>3.1 一幅丢勒的木刻画</h3><ol><li>整个装置</li></ol><p>首先我们先描述下整个装置（原谅我刚接触markdown不久，后续我加个图）</p><p>该装置由几个部分组成。首先是一根很长的细线，它的起点位于一个小指针的针尖，细线穿过附在墙上的环首螺钉的孔眼，其终点处系了一个能维持线张力的小砝码。指针可由人四处移动，从而触及待绘制的物体上的各点。</p><p>其次，还有一个带板的长方形木框（这里称该板为快门），板通过一个合页连在本框上，它可以完全转向一旁（如画中所示)或者部分地旋转以遮盖木框的开口（就好像快门遮挡镜头窗口）。板上覆盖了一张待绘画的纸，在木刻画中，可以看到纸上已部分完成的鲁特琴图。第一个人已将指针移动到琴上一个新位置。细线穿过画框，第二个人拿着铅笔指着穿过点，然后快门被关上，细线被推向一旁，铅笔则在纸上做出一个新的标记。该过程持续进行直至整个画作（以很多铅笔标记点的形式）形成。当然，在整个绘画过程中拿着铅笔的人都必须稳定地手持铅笔。</p><ol start="2"><li>该种方式为什么可信？</li></ol><p>主要原因是：</p><p>a. 光沿直线传播，而拉伸的细线代表了一条从鲁特琴到视点的光线路径；</p><p>b. 鲁特琴的图位于场景内，当“快门‘关闭后，其任然沿着同一方向，向视点传递光线。</p><p>c. 人类的视觉系统能够更具场景中具备高对比度的边来理解场景，因此标记的时候往往能激发我们的视觉系统对真实场景的关联反应。</p><p>用伪代码描述就是</p><pre><code>Input: a scene containing some objects, location of eye-pointOutput：a drawing of the objectinitialize drawing to be blankforeach object o    foreach visible point P of o        Open shutter        Place Pointer at P        if string from P to eye-point touches boundary of frame            Do nothing        else             Hold a pencil at point where string passes through frame            Hold string aside            Close shutter to make pencil-mark on paper            Release string</code></pre><p>有关这个算法注意以下几个方面：</p><ol><li>循环面向的是可见点，因此判断可见性十分重要；</li><li>可能存在无限的可见采样点；</li><li>我们之前曾提到，当细线触碰画框而不是穿过画框内的空白区域的处理方式。</li></ol><p>其中第一个问题在后面的章节会有介绍，而第二个问题我们可以采用逼近的方式（采样部分离散点，离散点中间根据“猜测”来进行插值）；而第三点涉及到剔除视域外的采样点，这是图形学中常见的一个操作，可以避免将绘制时间浪费在视域之外，称之为裁剪。</p><p>同时注意我们调整一下这个算法，不再是先固定铅笔再关闭快门，而是在板上直接贴一个绘图纸，然后对于绘图纸的每一个方格，手拿铅笔的人将笔尖放到方格的中心点，然后随着细线一起移动，当细线一端碰到物体的边界或者桌子墙的时候，记录物体；并且在快门关闭的时候，拿铅笔的人根据看到的点的明亮程度涂抹相应的灰度。在这种方式是后面光线追踪的核心，在后面十分重要。</p><h3 id="3-2-可见性"><a href="#3-2-可见性" class="headerlink" title="3.2 可见性"></a>3.2 可见性</h3><p>在后续会有更加详细的介绍，此处略过。</p><h3 id="3-3-实现"><a href="#3-3-实现" class="headerlink" title="3.3 实现"></a>3.3 实现</h3><p>首先我们需要一些几何和代数的知识，有关于几何定义的多边形的情况下，我们对于立方体，我们给出六个顶点位置，并且记下哪些顶点通过边直接相连。因此我们认为其为线框模型。</p><p>然后我们定义坐标系令墙面为xoy平面，z为垂直于墙面的方向，y为垂直于地面的方向，然后按照左手坐标构造即可。</p><p>令画框在z=1处，然后画框的角点为(xmin,ymin,1)、(xmax,ymax,1)名字即意义，宽度长度即为max-mian。</p><p>然后我们通过原点O到实际点P连接，可以得到P’，然后我们可以轻易的得到一组相似的三角形，故有x’=x/z,y’=y/z，于是有一个简单实现版本</p><pre><code>Input : a scene containing some objectsOutput : a drawing of the objectsinitialize drawing to be blankforeach object o    foreach visible point P=(x,y,z) of o    if xmin&lt;=(x/z)&lt;=xmax and ymin&lt;=(y/z)&lt;=ymax //在画框内的点        make a point on the drawing at location (-x/z,y/z)/因为我们是左手坐标系，所以是-的</code></pre><h4 id="3-3-1-绘图"><a href="#3-3-1-绘图" class="headerlink" title="3.3.1 绘图"></a>3.3.1 绘图</h4><p>为了模拟丢勒的风格，我们还需要选择一些重要线段和重要顶点，但是注意，某些重要线段即为点（模拟一下一支笔垂直于你的眼睛看这个笔，你是看到一整支笔还是一个点），或者用影射几何——直线的透视投影任然为直线，但是如果包含中心店的直线束，那么这个透视投影无定义。</p><p>然后我们定义了一个边表（你把正方体视作为一个图即可），在确定了正方体的表达后，我们需要对其进行更新，现在需要在下列两个描述中选择一个描述：</p><ol><li>逐条边迭代，对每一条边分别计算它们的投影位置，然后投影点连接一起；</li><li>先遍历每一个顶点，然后基于计算得到的计算点逐边迭代。</li></ol><p>在这里，选择的方式结合着你资源的多少和目的，A条件下1好B条件下2好，注意一下——世界上没有免费的午餐，实际上自己根据需要来选择即可。在边界的点也是同理的。</p><p>注意由于我们需要使用浮点数表示坐标，故需要使之归一化，归一化公式就xnew=(x-xmin)/(xmax-xmin)，下面是伪代码</p><pre class="line-numbers language-csharp"><code class="language-csharp">Input<span class="token punctuation">:</span> a scene containing one objecto<span class="token punctuation">,</span>and a squarexmin<span class="token operator">&lt;=</span>x<span class="token operator">&lt;=</span>xmax and ymin<span class="token operator">&lt;=</span>y<span class="token operator">&lt;=</span>ymax <span class="token keyword">int</span> the z<span class="token operator">=</span><span class="token number">1</span> planeOutput <span class="token punctuation">:</span> a drawing of the <span class="token keyword">object</span> <span class="token keyword">in</span> the unit squareinitialize drawing to be blank<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> number of vertices <span class="token keyword">in</span> o<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Point3D P<span class="token operator">=</span>vertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> x <span class="token operator">=</span> P<span class="token punctuation">.</span>x<span class="token operator">/</span>P<span class="token punctuation">.</span>z<span class="token punctuation">;</span>    <span class="token keyword">double</span> y <span class="token operator">=</span> P<span class="token punctuation">.</span>y<span class="token operator">/</span>P<span class="token punctuation">.</span>z<span class="token punctuation">;</span>    pictureVertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>        <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token operator">-</span>xmin<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>xmax<span class="token operator">-</span>xmin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>y<span class="token operator">-</span>ymin<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>ymax<span class="token operator">-</span>ymin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> number of edges <span class="token keyword">in</span> o<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i0<span class="token operator">=</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i1<span class="token operator">=</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    Draw a line segment <span class="token keyword">from</span> pictureVertices<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> to pictureVertices<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-代码"><a href="#3-4-代码" class="headerlink" title="3.4 代码"></a>3.4 代码</h3><p>最后给出了稍微正经的C#代码，由于和算法题习惯不一样，所以这里和我算法题各种压行不一样。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token function">Window1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InitializeCommands</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">FindName</span><span class="token punctuation">(</span><span class="token string">"Paper"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> GraphPaper<span class="token punctuation">;</span>    <span class="token keyword">int</span> nPoints <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nEdges <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>    <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span> vtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">doble</span><span class="token punctuation">[</span>nPoints<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>    <span class="token punctuation">{</span>        <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">2.5</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">2.5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">]</span> etable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nEdges<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>    <span class="token punctuation">{</span>        <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">double</span> xmin<span class="token operator">=</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span>xmax<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>ymin<span class="token operator">=</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span>ymax<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">;</span>    Point <span class="token punctuation">[</span><span class="token punctuation">]</span> pictureVertices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">[</span>nPoints<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> scale <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> nPoints<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">double</span> x<span class="token operator">=</span>vtable<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token operator">=</span>vtable<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>z<span class="token operator">=</span>vtable<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> xprime<span class="token operator">=</span>x<span class="token operator">/</span>z<span class="token punctuation">,</span>yprime<span class="token operator">=</span>y<span class="token operator">/</span>z<span class="token punctuation">;</span>        pictureVertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>X<span class="token operator">=</span>scale<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token punctuation">(</span>xprime<span class="token operator">-</span>xmin<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>xmax<span class="token operator">-</span>xmin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pictureVertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Y<span class="token operator">=</span>scale<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token punctuation">(</span>yprime<span class="token operator">-</span>ymin<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>ymax<span class="token operator">-</span>ymin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gp<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Segment</span><span class="token punctuation">(</span>PictureVertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>X<span class="token punctuation">,</span>PictureVertices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nEdge<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n1<span class="token operator">=</span>etable<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n2<span class="token operator">=</span>etable<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        gp<span class="token punctuation">.</span>Children<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Segment</span><span class="token punctuation">(</span>PictureVertices<span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">,</span>PictureVertices<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只不过我们可以简略看看这个程序：</p><ol><li>实际上并不怎么高效，但是直观反映算法，但是在初期没必要为了做出为了提速强行暗示让循环变量i作为Reg i这种技巧，只要他足够好懂，且能够进行简单的验证，那么后续会有人帮你优化的；</li><li>同时我们的命名，十分不规范！至少对于工程来说十分不规范；</li><li>第三，其扩展性并不怎么好，至少在后续为了重用的时候，可能还需要将其“做”成一个类。</li></ol><p>注意这个代码是拿来给我们实验的，只要能够验证，就好了；其他的后续再优化。</p><h3 id="3-5-局限性"><a href="#3-5-局限性" class="headerlink" title="3.5  局限性"></a>3.5  局限性</h3><ol><li>生成的是线框图没意味着我们同时看到了正面和背面，至少我们还需要一些方法来解决这个问题——将正方体同一面的所有点将投影到一个由该表四个顶点投影所定义的四边形。因此我们只需要保存正方体的面表取代边表就能够初步达到想要的（更通用的方法，反而是直接用法向量会好一些，但是还没讲到）；</li><li>我们没有考虑光线，此例中我们都假定场景内全是光，实际上一点都不睿智；</li><li>我们输入了很多，但是就得到了一个正方体，我们可以转换数学表示的方法使之变得更简单，例如转化为参数方程，或者采用后面的其他参数化方式定义的模型（比如样条）来生成。</li></ol><p>这就是我们通过模拟一个绘图方式来直观感受2D图形平台工作的方式，下一次我们将对2D图形测试平台做出简要介绍。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 图形学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷官方题单——递推和递归题解</title>
      <link href="/2020/04/22/luo-gu-guan-fang-ti-dan-di-tui-he-di-gui-ti-jie/"/>
      <url>/2020/04/22/luo-gu-guan-fang-ti-dan-di-tui-he-di-gui-ti-jie/</url>
      
        <content type="html"><![CDATA[<p>递推算是我们学习数学的基本功了，而算法在某些程度上就是披着程序设计的数学。而且我们最早接触递推便是高中数列的递推式，其对我们来说不会陌生。<br>而对于递归，我们可以看到在进入算法tag的题解中，或多或少的有着递归的影子，这一题单就是帮助我们更好的理解递归这一在程序设计中显著减少代码量的技巧。</p><h2 id="题目0：上楼梯"><a href="#题目0：上楼梯" class="headerlink" title="题目0：上楼梯"></a>题目0：上楼梯</h2><p>简单的递推，由于我们能到达第i层只能从第i-1层或者第i-2层到达，所以dp[i]=dp[i-1]+dp[i-2]，是不是很熟悉？就是斐波拉契数列，然后我们欢快的打上fib的代码</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">5050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    memo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>memo<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>memo<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>memo<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后你就会发现，你WA了，这是为什么呢？仔细康康数据范围，再想想什么时候fib越过longlong，故我们需要使用高精度+递推（？这真的只是普及-么？）<br>我们加一点点细节，得到了这个代码。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">5050</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> len<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">work</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好的AC啦。</p><h2 id="题目1：过河卒"><a href="#题目1：过河卒" class="headerlink" title="题目1：过河卒"></a>题目1：过河卒</h2><p>也是简单的递归题，简单来说因为兵只能向右和向下走，我们反过来想就是从终点走回起点只能向上和向下，只要我们在每个点加上它下面的数字和右边的数字最后计算到1.1点就行了。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> ull unsigned long long</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> bx<span class="token punctuation">,</span> by<span class="token punctuation">,</span> mx<span class="token punctuation">,</span> my<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool book<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x <span class="token operator">></span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>by<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>my<span class="token punctuation">)</span><span class="token punctuation">;</span>    bx <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> by <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> mx <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> my <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    ans<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> book<span class="token punctuation">[</span>mx<span class="token punctuation">]</span><span class="token punctuation">[</span>my<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> book<span class="token punctuation">[</span>mx <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>my <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> bx<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> by<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%llu\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>bx<span class="token punctuation">]</span><span class="token punctuation">[</span>by<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目2：栈"><a href="#题目2：栈" class="headerlink" title="题目2：栈"></a>题目2：栈</h2><p>如果考过408，那么应该都知道卡特兰数，这道题答案就是那个东西。但是这道题考的是递推的情况下，那么就得知道如何玩了。</p><h3 id="2-1-没有元素的时候"><a href="#2-1-没有元素的时候" class="headerlink" title="2.1 没有元素的时候"></a>2.1 没有元素的时候</h3><p> 当栈的元素没有的时候，出栈序列自然为null，当只有一个的时候，其出栈序列只有自身</p><h3 id="2-2-N个元素的时候"><a href="#2-2-N个元素的时候" class="headerlink" title="2.2 N个元素的时候"></a>2.2 N个元素的时候</h3><p>当栈的元素有N个的时候（1,2,3,4，…，N），设x是当前出栈序列的最后一个（即为……X），我们可以将其分为两个部分，比X大的和比X小的。<br>其中比X小的数有X-1个，那么这些数全部出栈的个数为memo[x-1]；<br>比X大的数有n-x个，那么这些数全部出栈可能非memo[n-x]。<br>由乘法定理可知，这两个部分独立，故f[x]=f[x-1]*f[n-x]<br>最后只需要从0到n-1求和就可以，这就是卡特兰数的递推方式。</p><h3 id="2-3-代码"><a href="#2-3-代码" class="headerlink" title="2.3 代码"></a>2.3 代码</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> memo<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    memo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> memo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> memo<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> memo<span class="token punctuation">[</span>i <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外由于递归需要使用系统栈，所以大部分的栈的题都可以递归完成。</p><h2 id="题目3：数的计算"><a href="#题目3：数的计算" class="headerlink" title="题目3：数的计算"></a>题目3：数的计算</h2><p>设当前数字为n。</p><h3 id="要求1：不作任何处理"><a href="#要求1：不作任何处理" class="headerlink" title="要求1：不作任何处理"></a>要求1：不作任何处理</h3><p>即自身需要计算一次，递推初始条件为1.</p><h3 id="要求2：在它的左边加上一个自然数-但该自然数不能超过原数的一半"><a href="#要求2：在它的左边加上一个自然数-但该自然数不能超过原数的一半" class="headerlink" title="要求2：在它的左边加上一个自然数,但该自然数不能超过原数的一半"></a>要求2：在它的左边加上一个自然数,但该自然数不能超过原数的一半</h3><p>即我们在其左边加的数的数量就是加上n/2的具备此类性质的数量。</p><h3 id="要求3：加上数后-继续按此规则进行处理-直到不能再加自然数为止"><a href="#要求3：加上数后-继续按此规则进行处理-直到不能再加自然数为止" class="headerlink" title="要求3：加上数后,继续按此规则进行处理,直到不能再加自然数为止"></a>要求3：加上数后,继续按此规则进行处理,直到不能再加自然数为止</h3><p>意味着我们只需要从不断的要么变为奇数或者使其除二之后加在当前数的左边就可以。</p><h3 id="递推公式"><a href="#递推公式" class="headerlink" title="递推公式"></a>递推公式</h3><p>因此我们得到了递推公式memo[i] = memo[i - 1] + memo[i / 2]（i为偶数）和memo[i] = memo[i - 1]（i为奇数）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    memo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> memo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> memo<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> memo<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> memo<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目4：Function"><a href="#题目4：Function" class="headerlink" title="题目4：Function"></a>题目4：Function</h2><p>简单的递归函数，注意算过的就别算直接用一个数组存起来，只需要注意边界条件即可（因为四个条件优先级依次降低，所以先写什么后写什么很重要）。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">w</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> b <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> c <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> memo<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">20</span> <span class="token operator">||</span> b <span class="token operator">></span> <span class="token number">20</span> <span class="token operator">||</span> c <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span> memo<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token operator">&amp;&amp;</span>b <span class="token operator">&lt;</span> c<span class="token punctuation">)</span> memo<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">w</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">w</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">w</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> memo<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">w</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">w</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">w</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">w</span><span class="token punctuation">(</span>a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> memo<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"w(%lld, %lld, %lld) = %lld\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token function">w</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目5：外星密码"><a href="#题目5：外星密码" class="headerlink" title="题目5：外星密码"></a>题目5：外星密码</h2><p>典型的递归题目，题目含义是展开字符串，而每一对[]都是一重展开，我们只需要：<br>0. 直接一边输入一遍计算；</p><ol><li>见到[就进入递归，结合输入的数字和字母直接展开并计入当前层的子串；</li><li>见到]就返回当前层的子串让上一层相加即可；</li><li>如果都不是，那么直接加到要返回到主函数的子串。<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span>using namespace std<span class="token punctuation">;</span>string <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span> string s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> Subs <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token keyword">char</span> temp<span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         cin <span class="token operator">>></span> num<span class="token punctuation">;</span>         Subs <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token operator">--</span><span class="token punctuation">)</span> s <span class="token operator">+</span><span class="token operator">=</span> Subs<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token string">']'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>         <span class="token keyword">else</span> s <span class="token operator">+</span><span class="token operator">=</span> temp<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> string ans <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="题目6：蜜蜂路线"><a href="#题目6：蜜蜂路线" class="headerlink" title="题目6：蜜蜂路线"></a>题目6：蜜蜂路线</h2><p>和楼梯一样的递推题，我们只需要知道递推公式怎么求就知道了；<br>首先我们知道，我们可以把第一层视作偶数，第二层视作奇数，那么实际上是一维数组，然后我们看到你能够从n-1和n-2来，所以就是走楼梯！只需要把走楼梯的代码拿来改改就是了。<br>但是这里问题来了，它输出的是一对，从n到m，这种情况下怎么办？<br>实际上这里的处理方式很简单，实际上fib数列在某种意义上也是一个前缀和数列（即每一个元素都包含了其之前的元素的某些信息的和，这个和不一定是直接累加，可能是其他），也就是说从n到m就是从0到m减去0到n的值就是我们得到的答案。<br>依旧要注意一下大数的处理方式。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1050</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> len<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">fib</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意循环的条件</span>    <span class="token comment" spellcheck="true">//如果你枚举到n的话那么len记录的是n的长度不是n-m的长度，会导致前导0而WA</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> m<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目7：小A点菜"><a href="#题目7：小A点菜" class="headerlink" title="题目7：小A点菜"></a>题目7：小A点菜</h2><p>题目看起来是简单的0/1背包问题，就是M的包最多能装多少的东西，但是这里问的是种数，所以我们得转换一下思路。<br>首先我们定义dp[i][j]为第i道菜用了j元，那么我们会得到一下几个转移方程（记菜价为price[i]，答案在dp[][]中）</p><h3 id="if-price-i-j-dp-i-j-dp-i-1-j-1；"><a href="#if-price-i-j-dp-i-j-dp-i-1-j-1；" class="headerlink" title="if(price[i]==j) dp[i][j]=dp[i-1][j] + 1；"></a>if(price[i]==j) dp[i][j]=dp[i-1][j] + 1；</h3><h3 id="if-price-i-lt-j-dp-i-j-dp-i-1-j-price-i"><a href="#if-price-i-lt-j-dp-i-j-dp-i-1-j-price-i" class="headerlink" title="if(price[i]<j) dp[i][j]=dp[i-1][j-price[i]];"></a>if(price[i]&lt;j) dp[i][j]=dp[i-1][j-price[i]];</h3><h3 id="if-price-i-gt-j-dp-i-j-dp-i-1-j-dp-i-1-j-price-i"><a href="#if-price-i-gt-j-dp-i-j-dp-i-1-j-dp-i-1-j-price-i" class="headerlink" title="if(price[i]>j) dp[i][j]=dp[i-1][j]+dp[i-1][j-price[i]];"></a>if(price[i]&gt;j) dp[i][j]=dp[i-1][j]+dp[i-1][j-price[i]];</h3><p>这三种的解释是，如果钱够，那么方法就是吃这道菜和不吃这道菜的方法和，但是不够，那么我们就只能吃前i-1道菜的方法了。<br>但是这道题和背包很相似，所以我们考虑下能不能降维，从后往前循环的情况，钱始终是够的时候才进入循环，这样三个条件变为了钱是否够一个条件，且剩下的钱满足单调性，可以满足一维dp的情况，这个时候的dp方程为</p><h3 id="dp-j-dp-j-dp-j-price-i"><a href="#dp-j-dp-j-dp-j-price-i" class="headerlink" title="dp[j] = dp[j] + dp[j - price[i]]"></a>dp[j] = dp[j] + dp[j - price[i]]</h3><p>最后我们可以得到下面的代码</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> price<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">100050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//freopen("a.in","r",stdin);</span>    <span class="token comment" spellcheck="true">//freopen("a.out","w",stdout);</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>price<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> price<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> price<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目8：选数"><a href="#题目8：选数" class="headerlink" title="题目8：选数"></a>题目8：选数</h2><p>原题，略</p><h2 id="题目9：覆盖墙壁"><a href="#题目9：覆盖墙壁" class="headerlink" title="题目9：覆盖墙壁"></a>题目9：覆盖墙壁</h2><p>这道题也是一个递推的题，只不过特别考验分类讨论能力。这里定义 L形砖，1形砖和一形砖。</p><h3 id="当最后一列需要被1形砖排列的时候"><a href="#当最后一列需要被1形砖排列的时候" class="headerlink" title="当最后一列需要被1形砖排列的时候"></a>当最后一列需要被1形砖排列的时候</h3><p>这种时候我们的方案数目实际上适合倒数第二列的的状态是一样的，因为这种情况下最后只能由1形砖来填充。</p><h3 id="当最后两列由两块一形砖的时候"><a href="#当最后两列由两块一形砖的时候" class="headerlink" title="当最后两列由两块一形砖的时候"></a>当最后两列由两块一形砖的时候</h3><p>这种时候我们的方案是倒数第三列的状态是一致的，因为我们无法填充L型转，也无法使用1形砖（因为在上面我们已经讨论了1形砖，再次讨论整个集合就重复了）</p><p>定义上述两种平凡情况记录为one数组，则总的方案数为one[n]=one[n-1]+one[n-2]。</p><h3 id="当最后一个需要用L形状砖块的时候"><a href="#当最后一个需要用L形状砖块的时候" class="headerlink" title="当最后一个需要用L形状砖块的时候"></a>当最后一个需要用L形状砖块的时候</h3><p>由于不能使最后一列有空格，所以必然是由L的竖着或者横着一部分填充列，这个时候我们得分为两个状态：即为（第一列0 0 1 1第二列0 0 0 1）和（第一列 0 0 0 1 第二列0 0 1 1 ）两个状态；这个时候我们的填充方式有两种，分别是使用中心对称的L来填充或者再加个一形砖使得变为相对的另外一种状态。<br>定义此类状态为L数组<br>故可以得到L[n-2]=one[n-3]（使用中心对称的L）+2 * L[n-3]（使用一形砖块，且分为上下两部分），即one[n]=one[n-1]+one[n-2]+2 * L[n-2]，L[n]=one[n-1]+L[n-1]。<br>以上就是总的递推方程，最后注意取模就行了。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">1000050</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Mod <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token keyword">int</span> one<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> L<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    one<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> one<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        one<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>one<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> one<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> L<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">%</span> Mod<span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>        L<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>L<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> one<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> one<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目10：Secret-Cow-Code-S"><a href="#题目10：Secret-Cow-Code-S" class="headerlink" title="题目10：Secret Cow Code S"></a>题目10：Secret Cow Code S</h2><p>题目的意思是ABC变为CAB变为BCA一直循环拼成一个无穷长串，我们找到这个串的第n位。那么这道题可以暴力做出来一部分数据点，但是10^18注定会卡时间。所以需要考虑其他的。</p><p>假设串为ABC，那么无穷循环后是ABCCAB，我们发现倍增之后[1,2]和[5,6]是相同的；接着考虑串为ABCDEFFABCDE，串的[1,5]和[8,12]是相同的</p><p>我们对ABC拓展三次有ABCCABBABCCA，这样发现了规律，每次倍增之后前部分记为S1，后半部分记为S2，那么每次对S2来说来自于S1向后移1位得到，当i-1=0时，且S2[i]=S1[i-1]的时候，我们可以很容易得到得到i的大小为S1[l/2]处。</p><p>于是这里可以分治一波，我们每发现当前的临时串长比输入的n小的时候，我们把临时串长倍增，然后一直循环知道临时串长大于n；</p><p>之后再是临时串长倍减然后开始循环：当temp_len大于串长的时候，我们进入循环后，检验n是否大于临时串长，大于了之后就减掉temp_len，然后看n为多少，如果n为0就变为最大值-1，否则n–。如果n比temp_len小，templen直接减半。这样处理了之后，s[n%len]即为答案。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    string s<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> temp_len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">;</span>    cin <span class="token operator">>></span> s <span class="token operator">>></span> n<span class="token punctuation">;</span>    len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>temp_len <span class="token operator">=</span> len<span class="token punctuation">;</span> temp_len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> temp_len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp_len <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    n <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp_len <span class="token operator">>=</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> temp_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>            n <span class="token operator">-</span><span class="token operator">=</span> temp_len<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> n <span class="token operator">=</span> temp_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        temp_len <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>n <span class="token operator">%</span> len<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目11：黑白棋移动"><a href="#题目11：黑白棋移动" class="headerlink" title="题目11：黑白棋移动"></a>题目11：黑白棋移动</h2><p>我们能够很明显的发现前面的规律，奇数步骤都是前面o和<em>的交界处和–交换，而偶数行都是**和–交换，但是到了最后四行就不一样了，于是找不到规律的情况下，我这里打了个表。<br>那么问题来了，为什么后面四行没有规律呢，实际上我的理解是，如果继续如此迭代下去的话，那么最后的步骤会强制变为o</em>–o<em>o</em>o*…..那么久不满足了每次必须跳过若干棋子的要求，因此必须使用题目sample的要求。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span>using namespace std<span class="token punctuation">;</span>string Last_4<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"ooo*o**--*"</span><span class="token punctuation">,</span> <span class="token string">"o--*o**oo*"</span><span class="token punctuation">,</span> <span class="token string">"o*o*o*--o*"</span><span class="token punctuation">,</span> <span class="token string">"--o*o*o*o*"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> temp<span class="token punctuation">;</span><span class="token keyword">char</span> memo<span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> t <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">swap</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span> memo<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> memo<span class="token punctuation">[</span>end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'o'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span>    memo<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> memo<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         cout <span class="token operator">&lt;&lt;</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">move</span><span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>             cout <span class="token operator">&lt;&lt;</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        len<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token function">move</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>             cout <span class="token operator">&lt;&lt;</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         temp <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"o*"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         cout <span class="token operator">&lt;&lt;</span> Last_4<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> temp <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目12：幂次方"><a href="#题目12：幂次方" class="headerlink" title="题目12：幂次方"></a>题目12：幂次方</h2><p>如果你知道计算机的表示中所有的数实际上都是由二进制转换，那么这道题就很好做了，每位弄一个掩码，然后求出来对应所在位，然后再递归即可，递归边界为0，那么返回的是0（1为2^0）。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span>using namespace std<span class="token punctuation">;</span>string <span class="token function">Decomposition</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    string ans <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            string ans_left<span class="token punctuation">,</span> ans_right<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> ans_left <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> ans_left <span class="token operator">=</span> <span class="token string">"2("</span> <span class="token operator">+</span> <span class="token function">Decomposition</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> ans_right <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> ans_right <span class="token operator">=</span> <span class="token string">"+"</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> ans_left <span class="token operator">+</span> ans_right <span class="token operator">+</span> ans<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    string ans <span class="token operator">=</span> <span class="token function">Decomposition</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目13：-地板填补"><a href="#题目13：-地板填补" class="headerlink" title="题目13： 地板填补"></a>题目13： 地板填补</h2><p>比较单纯的递归题:<br>只需要判断公主所在的点是当前中点的相对位置的那个部分（以公主为原点，分为左上左下右上右下），然后进入对应方向递归即可。<br>但是公主的点是不覆盖地毯的，你这样的话其他三个方向的怎么铺地毯呢？实际上我们只需要选择任意一个可以和公主组合成一个正四边形的地毯，这样就可以模拟为四个方向都有一个公主的情况，这样就可以全部覆盖了。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> cur_x<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> cur_y<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> x_start<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> y_start<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur_x <span class="token operator">-</span> x_start <span class="token operator">&lt;=</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> cur_y <span class="token operator">-</span> y_start <span class="token operator">&lt;=</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//左上</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld 1\n"</span><span class="token punctuation">,</span> x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>cur_x<span class="token punctuation">,</span> cur_y<span class="token punctuation">,</span> x_start<span class="token punctuation">,</span> y_start<span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> x_start<span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y_start<span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur_x <span class="token operator">-</span> x_start <span class="token operator">&lt;=</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> cur_y <span class="token operator">-</span> y_start <span class="token operator">></span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//左下</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld 2\n"</span><span class="token punctuation">,</span> x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x_start<span class="token punctuation">,</span> y_start<span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>cur_x<span class="token punctuation">,</span> cur_y<span class="token punctuation">,</span> x_start<span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y_start<span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur_x <span class="token operator">-</span> x_start <span class="token operator">></span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> cur_y <span class="token operator">-</span> y_start <span class="token operator">&lt;=</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//右上</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld 3\n"</span><span class="token punctuation">,</span> x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x_start<span class="token punctuation">,</span> y_start<span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> x_start<span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>cur_x<span class="token punctuation">,</span> cur_y<span class="token punctuation">,</span> x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y_start<span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//右下</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld 4\n"</span><span class="token punctuation">,</span> x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x_start<span class="token punctuation">,</span> y_start<span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> x_start<span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y_start<span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>cur_x<span class="token punctuation">,</span> cur_y<span class="token punctuation">,</span> x_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y_start <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> k<span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld %lld %lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> len <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目14：南蛮图腾"><a href="#题目14：南蛮图腾" class="headerlink" title="题目14：南蛮图腾"></a>题目14：南蛮图腾</h2><p>和分型一样的典型递归题，但是这里由于输出的不同，我们既可以考虑从小到大，也可以考虑从大到小.。<br>从小到大就是我们存一个在最开始的地方存一个三角形，然后我们就在他最左下角的左下方和最右下角的右下方开始copy一个自己，每次注意每次递增和初始化问题即可。<br>这里采用位运算来加速过程，实际上你就理解为pow(2,x)即可。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">char</span> output<span class="token punctuation">[</span><span class="token number">1050</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> temp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1050</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1050</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//上面的初始化是坑，虽然本地输出是一样的，如果不初始化的话在匹配的时候是WA掉的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" /\\\n/__\\\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//接下里我们初始化一个标准三角形</span>    output<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">,</span> output<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'_'</span><span class="token punctuation">,</span> output<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'_'</span><span class="token punctuation">,</span> output<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\\'</span><span class="token punctuation">;</span>    output<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">,</span> output<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\\'</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    output<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> temp<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> temp<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        temp<span class="token operator">++</span><span class="token punctuation">,</span> len <span class="token operator">=</span> len <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*    如果你想要从小到大，你甚至可以这么玩    output[1][1] = '/'; output[1][2] = '\\';    output[2][1] = '/'; output[2][2] = '_'; output[2][3] = '_'; output[2][4] = '\\';    int len = 1;    for (int i = 2; i &lt;= n; i++){        for (int j = 1; j &lt;= len; j++){            len &lt;&lt;= 1;            int end_pos = j * 2;            for (int k = 1; k &lt;= end_pos; k++)                output[len + j][k] = output[j][k];            for (int k = end_pos + 1; k &lt;= 2 * (len + j - end_pos); k++)                output[len + j][k] = ' ';            for (int k = 2 * (len + j) - end_pos + 1; k &lt;= 2 * (len + j); k++)                output[len + j][k] = output[j][k + end_pos - 2 * (len + j)];        }    }    len &lt;&lt;= 1;    */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>递推结束，下一个题单是贪心，听着最简单，证明起来最困难的东西。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法和程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程算法题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 递推 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷官方题单——暴力枚举题解（水题警告)</title>
      <link href="/2020/04/20/luo-gu-guan-fang-ti-dan-bao-li-mei-ju-ti-jie-shui-ti-jing-gao/"/>
      <url>/2020/04/20/luo-gu-guan-fang-ti-dan-bao-li-mei-ju-ti-jie-shui-ti-jing-gao/</url>
      
        <content type="html"><![CDATA[<p>爆搜出奇迹，就是TLE，实际上所有的题都可以枚举所有结果选择额，但是实际上因为过程太多，很多题直接枚举会TLE，因此需要一定的技巧。</p><h2 id="题目0：统计方形（数据加强版）"><a href="#题目0：统计方形（数据加强版）" class="headerlink" title="题目0：统计方形（数据加强版）"></a>题目0：统计方形（数据加强版）</h2><p>实际上这道题考的是递推，但是也可以转化为枚举的方式。<br>我们将矩阵视作由m个长度为1的长和n个长度为1的宽，他们连接为一条直线，那么就分别会有m+1个顶点和n+1个点，这样以后我们只需要在m+1个顶点选择两个和n+1的定点选择两个就可以构成一个矩形，故采用组合数公式C(2,m+1)*C(2,n+1)即为答案，代码如下。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> Rectangle <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> Square <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> Square <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> Rectangle <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> Square <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> Rectangle <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目1：烤鸡"><a href="#题目1：烤鸡" class="headerlink" title="题目1：烤鸡"></a>题目1：烤鸡</h2><p>按照题目要求从美味值递减然后层数递增的方式来递归进行答案计算，存储在ans_memo数组中最后一齐输出，通过能够显著减少代码量。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> ans_memo<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp_ans<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">,</span> <span class="token keyword">int</span> step<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> step<span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> step <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ans_memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>ans <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp_ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">-</span> step<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> i <span class="token operator">&lt;</span> d<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">-</span> step<span class="token punctuation">)</span> <span class="token operator">+</span> i <span class="token operator">></span> d<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        temp_ans<span class="token punctuation">[</span>step<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>d <span class="token operator">-</span> i<span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> d<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">></span> <span class="token number">30</span> <span class="token operator">||</span> d <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ans<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> ans_memo<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目2：三连击（升级版）"><a href="#题目2：三连击（升级版）" class="headerlink" title="题目2：三连击（升级版）"></a>题目2：三连击（升级版）</h2><p>按照题目要求从123开始枚举，直到987（因为不能有重复数字，所以122及之前都会有重复，100-109含有0不能选）。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> min(a,b)  (((a) &lt; (b)) ? (a) : (b))</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> tem1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tem2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">/</span> a <span class="token operator">+</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token number">123</span> <span class="token operator">%</span> a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">987</span> <span class="token operator">/</span> a <span class="token operator">*</span> a<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tem1 <span class="token operator">=</span> i <span class="token operator">/</span> a <span class="token operator">*</span> b<span class="token punctuation">,</span> tem2 <span class="token operator">=</span> i <span class="token operator">/</span> a <span class="token operator">*</span> c<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tem1 <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> tem1 <span class="token operator">&lt;=</span> <span class="token number">999</span> <span class="token operator">&amp;&amp;</span> tem2 <span class="token operator">>=</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> tem2 <span class="token operator">&lt;=</span> <span class="token number">999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> book<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mul <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            book<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> book<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> book<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>            book<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> tem1 <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> book<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> tem1 <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> book<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> tem1 <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>            book<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> tem2 <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> book<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> tem2 <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> book<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> tem2 <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> sum <span class="token operator">+</span><span class="token operator">=</span> book<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> mul <span class="token operator">*</span><span class="token operator">=</span> book<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">45</span> <span class="token operator">&amp;&amp;</span> mul <span class="token operator">==</span> <span class="token number">362880</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//因为九个数字都需要使用。</span>                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> tem1<span class="token punctuation">,</span> tem2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目3：选数"><a href="#题目3：选数" class="headerlink" title="题目3：选数"></a>题目3：选数</h2><p>从0位置开始枚举，直到选到k个，判断是否为素数，是则加一否则不加，然后递归进行。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> memo<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> step<span class="token punctuation">,</span> <span class="token keyword">int</span> st<span class="token punctuation">,</span> <span class="token keyword">int</span> temp_ans<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>step <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>temp_ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> st<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> temp_ans <span class="token operator">+</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目4：组合的输出"><a href="#题目4：组合的输出" class="headerlink" title="题目4：组合的输出"></a>题目4：组合的输出</h2><p>和上面一道题一样，只不过不需要判断素数。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span> r<span class="token punctuation">,</span> memo<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ans_memo<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> step<span class="token punctuation">,</span> <span class="token keyword">int</span> st<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>step <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span>ans_memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> st<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans_memo<span class="token punctuation">[</span>step<span class="token punctuation">]</span> <span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">25</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目5：全排列问题"><a href="#题目5：全排列问题" class="headerlink" title="题目5：全排列问题"></a>题目5：全排列问题</h2><p>使用book数组标记是否使用，其余和组合一致。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span> book<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%5d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目6：火星人"><a href="#题目6：火星人" class="headerlink" title="题目6：火星人"></a>题目6：火星人</h2><p>就是查找当前排列的下字典序的第n个排列，当然可以使用stl的next_permutation（这道题在官方眼里就是熟练使用这个函数的）。<br>当然如果你知道康托展开，那么这道题直接实现一遍康托展开然后改小部分即可（如果不知道可以自行去了解，大概就是求解某个排列是在他非排列状态下的第几个的方法）。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//普通方式</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">next_permutation</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span> memo <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> memo<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方法2，来自于yummy大佬</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> book<span class="token punctuation">[</span><span class="token number">10005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> x <span class="token operator">-</span><span class="token operator">=</span> book<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        book<span class="token punctuation">[</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        memo<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">=</span> n <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">[</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目7：涂国旗"><a href="#题目7：涂国旗" class="headerlink" title="题目7：涂国旗"></a>题目7：涂国旗</h2><p>这道题就是枚举白的蓝的和红的的行数，然后维护一个最小值，这里分享一个在VS里跑是对的但是上交是错的代码。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//sp</span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">char</span> map<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">&lt;</span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> temp <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp_ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'W'</span><span class="token punctuation">)</span> temp_ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'B'</span><span class="token punctuation">)</span> temp_ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'R'</span><span class="token punctuation">)</span> temp_ans<span class="token operator">++</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> temp_ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//true</span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">char</span> map<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">&lt;</span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            cin <span class="token operator">>></span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp_ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                 <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'W'</span><span class="token punctuation">)</span> temp_ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'B'</span><span class="token punctuation">)</span> temp_ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'R'</span><span class="token punctuation">)</span> temp_ans<span class="token operator">++</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> temp_ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目8：First-Step-ファーストステップ"><a href="#题目8：First-Step-ファーストステップ" class="headerlink" title="题目8：First Step (ファーストステップ)"></a>题目8：First Step (ファーストステップ)</h2><p>有一说一我也是个拉拉人，看到这个题我直接喷了2333（btw，停电是一定会停的）。<br>这道题就是类似于找横着的和竖着的连通块，所以需要使用dfs(emmm就是一个搜索的方式)。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> dy<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">char</span> map<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> r<span class="token punctuation">,</span> ans<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> person<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span> <span class="token operator">||</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">>=</span> n <span class="token operator">||</span> y <span class="token operator">>=</span> m<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>x <span class="token operator">+</span> dx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> person <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m <span class="token operator">>></span> r<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         cin <span class="token operator">>></span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[i,j]点站一个人开始，按照dx[k],dy[k]的方向进行dfs</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> ans <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//特判，因为重复计算了</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目9：-USACO1-5-回文质数-Prime-Palindromes"><a href="#题目9：-USACO1-5-回文质数-Prime-Palindromes" class="headerlink" title="题目9：[USACO1.5]回文质数 Prime Palindromes"></a>题目9：[USACO1.5]回文质数 Prime Palindromes</h2><p>原题，直接略过。</p><h2 id="题目10：火柴棒等式"><a href="#题目10：火柴棒等式" class="headerlink" title="题目10：火柴棒等式"></a>题目10：火柴棒等式</h2><p>提前打表记住每个数字需要的火柴棍即可</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> ans<span class="token punctuation">,</span> num<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sticks_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sticks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bits <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>        bits <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        sticks <span class="token operator">+</span><span class="token operator">=</span> memo<span class="token punctuation">[</span>bits<span class="token punctuation">]</span><span class="token punctuation">;</span>        n <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sticks<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1111</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1111</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sticks_sum</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sticks_sum</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sticks_sum</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">==</span> num <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目11：妖梦拼木棒"><a href="#题目11：妖梦拼木棒" class="headerlink" title="题目11：妖梦拼木棒"></a>题目11：妖梦拼木棒</h2><p>首先如果要用四个木棒拼成一个等边三角形，必然会需要两条相等边，且两条相等边必然为最大的边（记边长为l），假设这条边有m个，那么我们就可以有C(2,m)个取这个的方案；<br>那么接下来是第三条边，第三条边有两种，一个是两条l/2长的短边，另一种为i+j=l/2的边，此时假设l/2有p条，i有n条，j有q条，则我们分别由C(2,p)和C(1,n)*C(1,q)种方案；<br>最后由乘法原理，上述的三个组合数相乘即为答案。<br>另外由于计算过程中可能爆ans，需要不停的在中间取模。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> MOD <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span><span class="token keyword">int</span> book<span class="token punctuation">[</span><span class="token number">5011</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5000</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j <span class="token operator">></span> <span class="token number">5000</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> book<span class="token punctuation">[</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>                    ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">%</span> MOD <span class="token operator">*</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> book<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> book<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>                    ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> book<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> MOD <span class="token operator">*</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i <span class="token operator">+</span> j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> MOD<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目12：kkksc03考前临时抱佛脚"><a href="#题目12：kkksc03考前临时抱佛脚" class="headerlink" title="题目12：kkksc03考前临时抱佛脚"></a>题目12：kkksc03考前临时抱佛脚</h2><p>题目的意思是，将某个集合划分为两个子集，其两个子集的和的差值最小。<br>首先先考虑贪心，我们将一个最大和一个最小形成一对，然后分别加到左右脑，若为奇数则剩余加到当前较小的一半，但是这样的话在会WA（比如1 1 2 2 59 98 98 99）；<br>那么换种来贪心，我们将当前比较左右脑，如果左脑大，那么右脑加当前最大，否则左脑加当前最小，来换取平衡（但是还是WA）。<br>实际上正解是01背包，将其放入左脑和右脑可以看做划分为要或者不要，且由于最优情况每个学科的总时间一定是n/2（这样差值即为0），所以我们转化为在这些商品（题）中，选择最多的物品使得背包（做题时间）的物体（时间）尽可能的多（长），最后通过sum-求出来的最大时间就是我们需要的最大时间了。详情见代码。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> subject<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">,</span> ques<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1300</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">></span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> subject<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> subject<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cin <span class="token operator">>></span> ques<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            sum <span class="token operator">+</span><span class="token operator">=</span> ques<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> subject<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> ques<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//这里是01背包的基本优化，从后往前即可将二维背包转化为一维</span>                dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>k <span class="token operator">-</span> ques<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> ques<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans <span class="token operator">+</span><span class="token operator">=</span> sum <span class="token operator">-</span> dp<span class="token punctuation">[</span>sum <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目13：-COCI2008-2009-2-PERKET"><a href="#题目13：-COCI2008-2009-2-PERKET" class="headerlink" title="题目13：[COCI2008-2009#2] PERKET"></a>题目13：[COCI2008-2009#2] PERKET</h2><p>实际上就是枚举每一个组合的酸度乘积和甜度和，然后abs比较即可，注意区分清水。<br>还有注意一点（我在这里wa了两次），就是由于酸度是乘积，所以dfs的第二个量是要从1开始的。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> sour<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sweet<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">></span> y <span class="token operator">?</span> y <span class="token punctuation">:</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> x <span class="token punctuation">:</span> <span class="token operator">-</span>x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> sour_ratio<span class="token punctuation">,</span> <span class="token keyword">int</span> sweet_ratio<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sour_ratio <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> sweet_ratio <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>sour_ratio <span class="token operator">-</span> sweet_ratio<span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> sour_ratio <span class="token operator">*</span> sour<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sweet_ratio <span class="token operator">+</span> sweet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> sour_ratio<span class="token punctuation">,</span> sweet_ratio<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sour<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sweet<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目14：吃奶酪"><a href="#题目14：吃奶酪" class="headerlink" title="题目14：吃奶酪"></a>题目14：吃奶酪</h2><p>首先最小距离我们会先想到贪心，即每次都贪当前的最小距离，但是局部最优不一定全局最优，比如有一个奶酪在一个圆心，然后奶酪分别在这个圆上彼此距离大于此圆半径的情况下，无法得到正确答案。<br>所以这道题我们依旧需要使用dp的方法，但是，由于数据点十分小只有16，因此直接枚举所有和也可以获得最小值（当然需要合理剪枝，比如当前的距离已经比已经算过的最小距离还要大的时候直接停掉就行了）。<br>而对于dp，对于此题来说，我们设定某一位的值为1说明该点的奶酪没被吃，否则被吃了，更多信息看代码，</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//枚举</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span> book<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> x<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dis<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">1e10</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> cheese<span class="token punctuation">,</span> <span class="token keyword">int</span> now<span class="token punctuation">,</span> <span class="token keyword">double</span> sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> ans<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>                                                  <span class="token keyword">if</span> <span class="token punctuation">(</span>cheese <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        ans <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>cheese <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> sum <span class="token operator">+</span> dis<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2f"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//状压dp</span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">double</span> x<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">35000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">dis</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">-</span> y<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">-</span> y<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"a.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"a.out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//初始化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> s <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> s<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//枚举每一个状态</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//说明当前状态下已经被吃掉了，所以跳过</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//说明当前还没被吃掉</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//故需要对dp进行初始化，并且从该点开始枚举每一个点</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//说明自己吃自己，跳过</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>s <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">dis</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新当前所需要花费的最小值</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">double</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//枚举每一个点到对应顺序点的和的最小值</span>        <span class="token keyword">double</span> s <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">dis</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> ans <span class="token operator">></span> s<span class="token punctuation">)</span> ans <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//get最小值</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好了以上就是枚举的全部题，题目都不是特别难，就是有些会有点繁琐，另外最后一题的枚举最后一个点会TLE，原因是因为0,0点也有奶酪导致死循环（自己改）。<br>另外直接抄答案的可能会RE哦（滑稽）。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法和程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程算法题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷官方题单——排序题解（水题警告）</title>
      <link href="/2020/04/19/luo-gu-guan-fang-ti-dan-pai-xu-ti-jie/"/>
      <url>/2020/04/19/luo-gu-guan-fang-ti-dan-pai-xu-ti-jie/</url>
      
        <content type="html"><![CDATA[<p>排序的题目基本都大同小异，按照题目给的规则排序即可，这里牵扯到的是stl的sort函数，sort函数一般我们都是这么使用的 ：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是在某些时候，由于需要自定义排序顺序所以我们会这么使用：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中cmp是函数指针，具体的语言细节不用太过纠结，只需要知道这里为什么可以这么用了（牵扯到C++的一些细节，想了解的自行查阅函数缺省）。<br>如果想要从大到小排序（因为默认是从小到大排序），只需要如下两种方法。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//method 1</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//method 2</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">></span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目0：选举学生会"><a href="#题目0：选举学生会" class="headerlink" title="题目0：选举学生会"></a>题目0：选举学生会</h2><p>裸排序题，直接sort。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cin<span class="token operator">>></span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span>memo<span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目1：快速排序"><a href="#题目1：快速排序" class="headerlink" title="题目1：快速排序"></a>题目1：快速排序</h2><p>模板题，虽然现在我们大家都是在使用sort函数，但是快排的精髓还是需要了解的，这里直接略过模板，建议直接在洛谷题解中学习。<br>重点是学习如何划分，和快排的算法思想——分治和贪心。</p><h2 id="题目2：求第-k-小的数"><a href="#题目2：求第-k-小的数" class="headerlink" title="题目2：求第 k 小的数"></a>题目2：求第 k 小的数</h2><p>分析下复杂度，n小于等于500W，时间限制1s，说明我们必须使用的是O(n)的算法或者常数较小的O(nlogn)算法，所以直接sort排序肯定GG。<br>这里使用STL的库函数十分的方便，如下所示，但是题目肯定不是为了让我们采用这些技巧，因此我们需要选择其他的方法。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">nth_element</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span>memo<span class="token operator">+</span>k<span class="token punctuation">,</span>memo<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>memo<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里选择的方法是采用分治的思想：遍历一遍数组，然后随机选择一个数（这里就看你怎么选啦，一般都是去中间比较方便），然后计算比中间数字大的放右边，小的放左边，相等的也放右边；这个时候看我们选择的数字的当前位置pos：<br>a. 如果pos==k，直接输出；b. 如果pos&gt;k，则对左半部分进行同样的操作（递归）；c. 如果pos&lt;k，则对右半部分进行相同操作。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">long</span> <span class="token keyword">long</span> memo<span class="token punctuation">[</span><span class="token number">5000010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">quicksort</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> memo<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> mid <span class="token operator">&lt;=</span> memo<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> right<span class="token operator">--</span><span class="token punctuation">;</span>        memo<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> memo<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> memo<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> left<span class="token operator">++</span><span class="token punctuation">;</span>        memo<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> memo<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    memo<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">quicksort</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> pos<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> memo<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> pos<span class="token punctuation">)</span> <span class="token function">find</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">find</span><span class="token punctuation">(</span>pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">find</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目3：明明的随机数"><a href="#题目3：明明的随机数" class="headerlink" title="题目3：明明的随机数"></a>题目3：明明的随机数</h2><p>这道题可以偷懒，直接采用set，也可以额外开一个数组来book是否有这个数。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;set></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>s<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">>></span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目4：奖学金"><a href="#题目4：奖学金" class="headerlink" title="题目4：奖学金"></a>题目4：奖学金</h2><p>简单的结构体排序，知道按照什么顺序就解决了——先比较总分，然后总分相同就优先比较语文，然后语文相同则比较输入顺序。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Student<span class="token punctuation">{</span>    <span class="token keyword">int</span> List_Rank<span class="token punctuation">,</span> Chinese<span class="token punctuation">,</span> Math<span class="token punctuation">,</span> English<span class="token punctuation">,</span> Sum<span class="token punctuation">;</span><span class="token punctuation">}</span>Student<span class="token punctuation">;</span>Student memo<span class="token punctuation">[</span><span class="token number">310</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span>Student a<span class="token punctuation">,</span> Student b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>Sum <span class="token operator">></span> b<span class="token punctuation">.</span>Sum<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>Sum <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>Sum<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>Chinese <span class="token operator">></span> b<span class="token punctuation">.</span>Chinese<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>Chinese <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>Chinese<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>List_Rank <span class="token operator">></span> b<span class="token punctuation">.</span>List_Rank<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>List_Rank <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Chinese<span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Math<span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>English<span class="token punctuation">)</span><span class="token punctuation">;</span>        memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Sum <span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Chinese <span class="token operator">+</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Math <span class="token operator">+</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>English<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span> memo <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>List_Rank<span class="token punctuation">,</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目5-宇宙总统"><a href="#题目5-宇宙总统" class="headerlink" title="题目5: 宇宙总统"></a>题目5: 宇宙总统</h2><p>由于票数可能非常大，因此需要用string或者char数组，然后比较位数或直接比较string即可，char数组的话需要比较每一位大小。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">,</span> id<span class="token punctuation">;</span>     string max <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> temp_tickets<span class="token punctuation">;</span>    cin <span class="token operator">>></span> num<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> temp_tickets<span class="token punctuation">;</span>        <span class="token keyword">int</span> inSize <span class="token operator">=</span> temp_tickets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxSize <span class="token operator">=</span> max<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inSize <span class="token operator">></span> maxSize <span class="token operator">||</span> <span class="token punctuation">(</span>inSize <span class="token operator">>=</span> maxSize <span class="token operator">&amp;&amp;</span> temp_tickets <span class="token operator">></span> max<span class="token punctuation">)</span><span class="token punctuation">)</span>             max <span class="token operator">=</span> temp_tickets<span class="token punctuation">,</span> id <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> id<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> max <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目6：Bookshelf-B"><a href="#题目6：Bookshelf-B" class="headerlink" title="题目6：Bookshelf B"></a>题目6：Bookshelf B</h2><p>简单排序，由于要牛最小，只要从最大的开始减就行了，证明略。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;functional></span></span><span class="token comment" spellcheck="true">//greater</span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> cow<span class="token punctuation">[</span><span class="token number">20000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> h<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cow<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>cow<span class="token punctuation">,</span> cow <span class="token operator">+</span> n<span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> h <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> h <span class="token operator">-</span><span class="token operator">=</span> cow<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目7：车厢重组"><a href="#题目7：车厢重组" class="headerlink" title="题目7：车厢重组"></a>题目7：车厢重组</h2><p>等价于求逆序对，对于逆序对应用最多的就是冒泡排序，即使用冒泡排序（排序引理有关于逆序对和排序的关系，有兴趣可以去看《算法导论》)。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> memo<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                temp <span class="token operator">=</span> memo<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                memo<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> memo<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                memo<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目8：欢乐的跳"><a href="#题目8：欢乐的跳" class="headerlink" title="题目8：欢乐的跳"></a>题目8：欢乐的跳</h2><p>实际上就是枚举每个相邻元素的差并记录，然后从1到n逐步检验记录数组，若某个元素为0，则说明不快乐，否则快乐。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">,</span> book<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> memo<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>book <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> book <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Not jolly\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Jolly\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目9：分数线划定"><a href="#题目9：分数线划定" class="headerlink" title="题目9：分数线划定"></a>题目9：分数线划定</h2><p>一如既往的结构体排序，基本了解题意就可以写了。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Volunteer <span class="token punctuation">{</span>    <span class="token keyword">int</span> Num<span class="token punctuation">,</span> Score<span class="token punctuation">;</span><span class="token punctuation">}</span>Volunteer<span class="token punctuation">;</span>Volunteer people<span class="token punctuation">[</span><span class="token number">5000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span>Volunteer p1<span class="token punctuation">,</span> Volunteer p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>Score <span class="token operator">></span> p2<span class="token punctuation">.</span>Score<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>Score <span class="token operator">==</span> p2<span class="token punctuation">.</span>Score<span class="token punctuation">)</span> <span class="token keyword">return</span> p1<span class="token punctuation">.</span>Num <span class="token operator">&lt;</span> p2<span class="token punctuation">.</span>Num<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    m <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span>m <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Num<span class="token punctuation">,</span> <span class="token operator">&amp;</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> people <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Score_Line <span class="token operator">=</span> people<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Score<span class="token punctuation">,</span> Volunteer_Num <span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Score <span class="token operator">==</span> Score_Line<span class="token punctuation">)</span> Volunteer_Num <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Score <span class="token operator">&lt;</span> Score_Line<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> Score_Line<span class="token punctuation">,</span> Volunteer_Num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Volunteer_Num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Num<span class="token punctuation">,</span> people<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目10：攀爬者"><a href="#题目10：攀爬者" class="headerlink" title="题目10：攀爬者"></a>题目10：攀爬者</h2><p>结构体排序，对每个点的高度从小到大排序，最后求和。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 50050</span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> node <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span><span class="token punctuation">}</span>coordinate<span class="token punctuation">;</span>coordinate memo<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">distance</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> y1<span class="token punctuation">,</span> <span class="token keyword">int</span> y2<span class="token punctuation">,</span> <span class="token keyword">int</span> z1<span class="token punctuation">,</span> <span class="token keyword">int</span> z2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>y1 <span class="token operator">-</span> y2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span>z1 <span class="token operator">-</span> z2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span> node b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>z <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>z<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">double</span> ans<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span> memo <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> memo<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> memo<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">,</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3lf\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目11：生日"><a href="#题目11：生日" class="headerlink" title="题目11：生日"></a>题目11：生日</h2><p>又是结构体排序，基本上和后面都是一样的。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> node <span class="token punctuation">{</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> year<span class="token punctuation">,</span> mon<span class="token punctuation">,</span> day<span class="token punctuation">,</span>input_num<span class="token punctuation">;</span><span class="token punctuation">}</span>person<span class="token punctuation">;</span>person memo<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span>person p1<span class="token punctuation">,</span> person p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>year <span class="token operator">!=</span> p2<span class="token punctuation">.</span>year<span class="token punctuation">)</span>        <span class="token keyword">return</span> p1<span class="token punctuation">.</span>year <span class="token operator">&lt;</span> p2<span class="token punctuation">.</span>year<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>mon <span class="token operator">!=</span> p2<span class="token punctuation">.</span>mon<span class="token punctuation">)</span>             <span class="token keyword">return</span> p1<span class="token punctuation">.</span>mon <span class="token operator">&lt;</span> p2<span class="token punctuation">.</span>mon<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>day <span class="token operator">==</span> p2<span class="token punctuation">.</span>day <span class="token operator">&amp;&amp;</span> p1<span class="token punctuation">.</span>mon <span class="token operator">==</span> p2<span class="token punctuation">.</span>mon<span class="token punctuation">)</span>             <span class="token keyword">return</span> p1<span class="token punctuation">.</span>input_num <span class="token operator">></span> p2<span class="token punctuation">.</span>input_num<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>day <span class="token operator">!=</span> p2<span class="token punctuation">.</span>day <span class="token operator">&amp;&amp;</span> p1<span class="token punctuation">.</span>mon <span class="token operator">==</span> p2<span class="token punctuation">.</span>mon<span class="token punctuation">)</span>             <span class="token keyword">return</span> p1<span class="token punctuation">.</span>day <span class="token operator">&lt;</span> p2<span class="token punctuation">.</span>day<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin <span class="token operator">>></span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">>></span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>year <span class="token operator">>></span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>mon <span class="token operator">>></span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>day<span class="token punctuation">;</span>        memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>input_num <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">stable_sort</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span> memo <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目12：拼数"><a href="#题目12：拼数" class="headerlink" title="题目12：拼数"></a>题目12：拼数</h2><p>也是结构体排序，尝试着用vector来写（玩）。这里注意千万别直接return a&gt;b，例子：32和321，如果直接比较，321会大于32，但是这样就错了。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 105</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ans<span class="token punctuation">;</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a<span class="token operator">+</span>b <span class="token operator">></span> b<span class="token operator">+</span>a<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"a.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"a.out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        string str<span class="token punctuation">;</span>        cin <span class="token operator">>></span> str<span class="token punctuation">;</span>        ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些题基本都这样了，水题水的也差不多。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法和程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程算法题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷官方题单——模拟与高精度题解</title>
      <link href="/2020/04/18/luo-gu-guan-fang-ti-dan-mo-ni-yu-gao-jing-du-ti-jie/"/>
      <url>/2020/04/18/luo-gu-guan-fang-ti-dan-mo-ni-yu-gao-jing-du-ti-jie/</url>
      
        <content type="html"><![CDATA[<p>模拟是指的是按照题目给的要求一步一步的考虑各种条件，不需要进行任何花里胡哨的其他操作就可以做出来的题，但是这些题有一个很大的特点：代码量很大且边界条件多，因此在WA了之后查找自己错误的地方会比较麻烦。</p><p>而高精度则是我们模拟数字的加减乘除。由于在C/C++等某些编程语言中，在语言设计的时候都对数据类型进行了大小范围限制（如int的范围时-2^31到2^31-1），而有的时候我们要计算的部分超过了这些范围甚至达到了惊人的100位以上的时候，我们就要使用高精度来进行计算。</p><p>当然，在一般的比赛当中，可以采用python等自带大数的语言，或者我们也可以将高精度的模板打印下来，需要使用的时候直接誊抄即可，但是一定要对过程有一定的理解。</p><p>题目10和题目11十分繁琐，建议多读几次题，我代码的变量在这两道题相当繁琐（为了可读性）。</p><h2 id="题目0-乒乓球"><a href="#题目0-乒乓球" class="headerlink" title="题目0: 乒乓球"></a>题目0: 乒乓球</h2><p>按照题目条件模拟即可，但是需要注意以下的情况：</p><ol><li>胜利的条件是一方优先达到11分且双方差值大于等于2，否则应当继续，且由于存在差值大于2，因此无法使用取模来进行归0；</li><li>由于分部分输出，因此需要先把后续的存起来，而前面的直接输出即可；</li><li>题目中的描述“其中EE表示比赛信息结束，程序应该忽略E之后的所有内容。”说明E可能在文件中间，切勿使用EOF判断；</li><li>由于使用的是getchar()，因此还需要额外判断我们的换行符。</li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> ans_21<span class="token punctuation">[</span><span class="token number">3000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"a.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"a.out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> temp<span class="token punctuation">;</span>    <span class="token keyword">int</span> w_11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l_11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> w_21 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l_21 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    temp <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token string">'E'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token string">'W'</span><span class="token punctuation">)</span>  w_11<span class="token operator">++</span><span class="token punctuation">,</span> w_21<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token string">'L'</span><span class="token punctuation">)</span> l_11<span class="token operator">++</span><span class="token punctuation">,</span> l_21<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w_11 <span class="token operator">>=</span> <span class="token number">11</span> <span class="token operator">||</span> l_11 <span class="token operator">>=</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>w_11 <span class="token operator">-</span> l_11<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d:%d\n"</span><span class="token punctuation">,</span> w_11<span class="token punctuation">,</span> l_11<span class="token punctuation">)</span><span class="token punctuation">;</span>                w_11 <span class="token operator">=</span> l_11 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w_21 <span class="token operator">>=</span> <span class="token number">21</span> <span class="token operator">||</span> l_21 <span class="token operator">>=</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>w_21 <span class="token operator">-</span> l_21<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ans_21<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> w_21<span class="token punctuation">;</span>                ans_21<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> l_21<span class="token punctuation">;</span>                w_21 <span class="token operator">=</span> l_21 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        temp <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d:%d\n\n"</span><span class="token punctuation">,</span> w_11<span class="token punctuation">,</span> l_11<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d:%d\n"</span><span class="token punctuation">,</span> ans_21<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans_21<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d:%d\n"</span><span class="token punctuation">,</span> w_21<span class="token punctuation">,</span> l_21<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目1-扫雷"><a href="#题目1-扫雷" class="headerlink" title="题目1: 扫雷"></a>题目1: 扫雷</h2><p>这也是一到模拟题，只需要按照其所给的方法直接计算就行了，但是我们从这道题可以学习到如何进行方向的移动和边界的处理，详见代码。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">char</span> map<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'?'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp_x <span class="token operator">=</span> i <span class="token operator">+</span> dx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> temp_y <span class="token operator">=</span> j <span class="token operator">+</span> dy<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp_x <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> temp_x <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> temp_y <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> temp_y <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>temp_x<span class="token punctuation">]</span><span class="token punctuation">[</span>temp_y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'?'</span><span class="token punctuation">)</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cnt <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目2-玩具谜题"><a href="#题目2-玩具谜题" class="headerlink" title="题目2: 玩具谜题"></a>题目2: 玩具谜题</h2><p>读入数据然后按照其要求来进行游戏就行了，这里由于是一个循环（或者一个圈），所以采用取模来进行模拟n-1到0的过程。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 100050</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> head<span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>node<span class="token punctuation">;</span>node memo<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">" %s"</span><span class="token punctuation">,</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> now <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>head <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> now <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">+</span> n <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>head <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> now <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>head <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> now <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>head <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> now <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">+</span> n <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> memo<span class="token punctuation">[</span>now<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目3和题目4：A-B-A-B"><a href="#题目3和题目4：A-B-A-B" class="headerlink" title="题目3和题目4：A+B,A*B"></a>题目3和题目4：A+B,A*B</h2><p>这两道题这里略过，洛谷的题解有很多的相关模板建议各位直接CV并添加到自己的模板当中。</p><h2 id="题目5：阶乘之和"><a href="#题目5：阶乘之和" class="headerlink" title="题目5：阶乘之和"></a>题目5：阶乘之和</h2><p>略过，前面循环那一节有。</p><h2 id="题目6：魔法少女小Scarlet"><a href="#题目6：魔法少女小Scarlet" class="headerlink" title="题目6：魔法少女小Scarlet"></a>题目6：魔法少女小Scarlet</h2><p>就是矩阵的某一个“环”的旋转问题，首先就是要生成这个举证，然后重点是需要中间额外加一个数组来保存原始矩阵，同时需要构造从原来的地图到中间数组的映射，然后再从中间数组到期望数组的映射。<br>当然你也可以只使用一个中间变量，然后通过2r+1为循环界限，然后直接一次性旋转四个元素，这样可以节省很大一部分空间。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> map<span class="token punctuation">[</span><span class="token number">505</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">505</span><span class="token punctuation">]</span><span class="token punctuation">,</span> media<span class="token punctuation">[</span><span class="token number">505</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">505</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"a.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"a.out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">+</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">,</span> <span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> begin_x <span class="token operator">=</span> x <span class="token operator">-</span> r<span class="token punctuation">,</span> begin_y <span class="token operator">=</span> y <span class="token operator">-</span> r<span class="token punctuation">,</span> temp_r <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> temp_r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> temp_r<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                    media<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">[</span>begin_x <span class="token operator">+</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>begin_y <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> temp_r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> temp_r<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                     map<span class="token punctuation">[</span>i <span class="token operator">+</span> begin_x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> begin_y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> media<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>temp_r <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> temp_r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> temp_r<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                     media<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> map<span class="token punctuation">[</span>begin_x <span class="token operator">+</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>begin_y <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> temp_r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> temp_r<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                     map<span class="token punctuation">[</span>i <span class="token operator">+</span> begin_x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> begin_y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> media<span class="token punctuation">[</span>temp_r <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目7：生活大爆炸版石头剪刀布"><a href="#题目7：生活大爆炸版石头剪刀布" class="headerlink" title="题目7：生活大爆炸版石头剪刀布"></a>题目7：生活大爆炸版石头剪刀布</h2><p>简单的石头剪刀布题，提前打表，且由于是规律出拳，因此需要采用取模来模拟这个循环。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token keyword">int</span> ans<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> memoa<span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> memob<span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span> NA<span class="token punctuation">,</span> NB<span class="token punctuation">;</span>    <span class="token keyword">int</span> Aans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> Bans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>NA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>NB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NA<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memoa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NB<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memob<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Aans <span class="token operator">+</span><span class="token operator">=</span> ans<span class="token punctuation">[</span>memoa<span class="token punctuation">[</span>i <span class="token operator">%</span> NA<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>memob<span class="token punctuation">[</span>i <span class="token operator">%</span> NB<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Bans <span class="token operator">+</span><span class="token operator">=</span> ans<span class="token punctuation">[</span>memob<span class="token punctuation">[</span>i <span class="token operator">%</span> NB<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>memoa<span class="token punctuation">[</span>i <span class="token operator">%</span> NA<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> Aans<span class="token punctuation">,</span> Bans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目8：两只塔姆沃斯牛"><a href="#题目8：两只塔姆沃斯牛" class="headerlink" title="题目8：两只塔姆沃斯牛"></a>题目8：两只塔姆沃斯牛</h2><p>采用beacon_cwk大佬的特征值做法，若存在两次特征值相同，则说明存在某个循环导致他们永远不可能相遇，代码如下。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>bool eigen_value<span class="token punctuation">[</span><span class="token number">200000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> map<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>bool <span class="token function">farmercheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> farmer_x<span class="token punctuation">,</span> <span class="token keyword">int</span> farmer_y<span class="token punctuation">,</span> <span class="token keyword">int</span> farmer_state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> farmer_x <span class="token operator">+</span> dx<span class="token punctuation">[</span>farmer_state<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> farmer_x <span class="token operator">+</span> dx<span class="token punctuation">[</span>farmer_state<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span> <span class="token operator">||</span> farmer_y <span class="token operator">+</span> dy<span class="token punctuation">[</span>farmer_state<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> farmer_y <span class="token operator">+</span> dy<span class="token punctuation">[</span>farmer_state<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span> <span class="token operator">||</span> map<span class="token punctuation">[</span>farmer_x <span class="token operator">+</span> dx<span class="token punctuation">[</span>farmer_state<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>farmer_y <span class="token operator">+</span> dy<span class="token punctuation">[</span>farmer_state<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">cowcheck</span><span class="token punctuation">(</span><span class="token keyword">int</span> cow_x<span class="token punctuation">,</span> <span class="token keyword">int</span> cow_y<span class="token punctuation">,</span> <span class="token keyword">int</span> cow_state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> cow_x <span class="token operator">+</span> dx<span class="token punctuation">[</span>cow_state<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> cow_x <span class="token operator">+</span> dx<span class="token punctuation">[</span>cow_state<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span> <span class="token operator">||</span> cow_y <span class="token operator">+</span> dy<span class="token punctuation">[</span>cow_state<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> cow_y <span class="token operator">+</span> dy<span class="token punctuation">[</span>cow_state<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">10</span> <span class="token operator">||</span> map<span class="token punctuation">[</span>cow_x <span class="token operator">+</span> dx<span class="token punctuation">[</span>cow_state<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cow_y <span class="token operator">+</span> dy<span class="token punctuation">[</span>cow_state<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"a.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"a.out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cow_x<span class="token punctuation">,</span> cow_y<span class="token punctuation">,</span> cow_state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> farmer_x<span class="token punctuation">,</span> farmer_y<span class="token punctuation">,</span> farmer_state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> now_eigen<span class="token punctuation">,</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'F'</span><span class="token punctuation">)</span> farmer_x <span class="token operator">=</span> i<span class="token punctuation">,</span> farmer_y <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'C'</span><span class="token punctuation">)</span> cow_x <span class="token operator">=</span> i<span class="token punctuation">,</span> cow_y <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>farmer_x <span class="token operator">==</span> cow_x <span class="token operator">&amp;&amp;</span> farmer_y <span class="token operator">==</span> cow_y<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>        now_eigen <span class="token operator">=</span> farmer_x <span class="token operator">+</span> farmer_y <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> cow_x <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> cow_y <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">+</span> farmer_state <span class="token operator">*</span> <span class="token number">10000</span> <span class="token operator">+</span> cow_state <span class="token operator">*</span> <span class="token number">40000</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>eigen_value<span class="token punctuation">[</span>now_eigen<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        eigen_value<span class="token punctuation">[</span>now_eigen<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">farmercheck</span><span class="token punctuation">(</span>farmer_x<span class="token punctuation">,</span> farmer_y<span class="token punctuation">,</span> farmer_state<span class="token punctuation">)</span><span class="token punctuation">)</span>            farmer_state <span class="token operator">=</span> <span class="token punctuation">(</span>farmer_state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> farmer_x <span class="token operator">=</span> farmer_x <span class="token operator">+</span> dx<span class="token punctuation">[</span>farmer_state<span class="token punctuation">]</span><span class="token punctuation">,</span> farmer_y <span class="token operator">=</span> farmer_y <span class="token operator">+</span> dy<span class="token punctuation">[</span>farmer_state<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cowcheck</span><span class="token punctuation">(</span>cow_x<span class="token punctuation">,</span> cow_y<span class="token punctuation">,</span> cow_state<span class="token punctuation">)</span><span class="token punctuation">)</span>            cow_state <span class="token operator">=</span> <span class="token punctuation">(</span>cow_state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> cow_x <span class="token operator">=</span> cow_x <span class="token operator">+</span> dx<span class="token punctuation">[</span>cow_state<span class="token punctuation">]</span><span class="token punctuation">,</span> cow_y <span class="token operator">=</span> cow_y <span class="token operator">+</span> dy<span class="token punctuation">[</span>cow_state<span class="token punctuation">]</span><span class="token punctuation">;</span>        step<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目9：多项式输出"><a href="#题目9：多项式输出" class="headerlink" title="题目9：多项式输出"></a>题目9：多项式输出</h2><p>这道题我们只需要解决以下条件：系数是不是0，是不是第一项，系数正负，系数正负1，指数为1的时候。于是就可以得到我们的代码啦。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> poly<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>poly<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>poly<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> n <span class="token operator">&amp;&amp;</span> poly <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>poly<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> poly<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>poly <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i<span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x^%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目10：字符串展开"><a href="#题目10：字符串展开" class="headerlink" title="题目10：字符串展开"></a>题目10：字符串展开</h2><p>先提前写判断字母和数字的接口，因为输入只有小写所以不需要写大写的判断；然后根据输入的系数来确定输出什么就可以了，注意减号在最后的时候的边界条件。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">;</span>bool <span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token keyword">char</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>bool <span class="token function">isAlpha</span><span class="token punctuation">(</span><span class="token keyword">char</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>bool <span class="token function">work_check</span><span class="token punctuation">(</span><span class="token keyword">char</span> start<span class="token punctuation">,</span> <span class="token keyword">char</span> ending<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>start <span class="token operator">>=</span> ending <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">isNumber</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isAlpha</span><span class="token punctuation">(</span>ending<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">isNumber</span><span class="token punctuation">(</span>ending<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isAlpha</span><span class="token punctuation">(</span>ending<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token keyword">char</span> start<span class="token punctuation">,</span> <span class="token keyword">char</span> ending<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">work_check</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> ending<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> ending<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAlpha</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>p1 <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> start <span class="token operator">=</span> start <span class="token operator">-</span> <span class="token string">'a'</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">,</span> ending <span class="token operator">=</span> ending <span class="token operator">-</span> <span class="token string">'a'</span> <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p3 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ending<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> p2<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p1 <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'*'</span> <span class="token punctuation">:</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p3 <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">=</span> ending <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> start<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> p2<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p1 <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'*'</span> <span class="token punctuation">:</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>    string s<span class="token punctuation">;</span>     cin <span class="token operator">>></span> s<span class="token punctuation">;</span>    <span class="token keyword">char</span> temp<span class="token punctuation">;</span>     <span class="token keyword">int</span> first_signal<span class="token punctuation">,</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            first_signal <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> first_signal<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> len <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!=</span> len <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//字符串的下一位结束||下一位是-号且没有到达结尾||上一位是减号</span>        <span class="token keyword">else</span> <span class="token function">work</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目11：作业调度方案"><a href="#题目11：作业调度方案" class="headerlink" title="题目11：作业调度方案"></a>题目11：作业调度方案</h2><p>大模拟题，不仅考代码能力，还考你的语文阅读理解能力（大雾）；如果学过操作系统课程，实际上这道题就是希望你实现“若从0开始的第一个内存空洞大于进程所需要的内存时，将进程放入这片内存”即“最先匹配”的内存匹配机制。<br>题目的含义是给你一堆数据（具体含义详见代码），我们将每个工序需要的时间的序偶称之为时间片。你需要依照将这些时间片按照给定的顺序中加入到时间轴，使得所需要的时间最短，我们采取“贪心”的策略，即每个时间片扫描时间轴，当某一个空洞的大小大于当前时间片，就插入到这个空洞的最左边。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> work_list<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> opera_machine_number<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//opera_machine_number[i][j]的值为"第i个工件的第j个工序所需要使用的机械号。"</span><span class="token keyword">int</span> oprea_time<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//oprea_time[i][j]的值为"第i个工件的第j个工序所需要使用的时间。"</span><span class="token keyword">int</span> answer_set<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//answer_set[k]表示前k个工序需要的最少时间</span><span class="token keyword">int</span> timeline_book<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//timeline_book[i][j]表示第i台机械在时刻j是否工作</span><span class="token keyword">int</span> now_step<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前所在工件的工序数</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">></span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> begin_time<span class="token punctuation">,</span> <span class="token keyword">int</span> end_time<span class="token punctuation">,</span> <span class="token keyword">int</span> work_number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> time <span class="token operator">=</span> begin_time<span class="token punctuation">;</span> time <span class="token operator">&lt;=</span> end_time<span class="token punctuation">;</span> time<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeline_book<span class="token punctuation">[</span>work_number<span class="token punctuation">]</span><span class="token punctuation">[</span>time<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m <span class="token operator">*</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>work_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>opera_machine_number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>oprea_time<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">*</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        now_step<span class="token punctuation">[</span>work_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从第一个工件开始</span>        <span class="token keyword">int</span> now_number <span class="token operator">=</span> opera_machine_number<span class="token punctuation">[</span>work_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>now_step<span class="token punctuation">[</span>work_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cost_time <span class="token operator">=</span> oprea_time<span class="token punctuation">[</span>work_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>now_step<span class="token punctuation">[</span>work_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> time <span class="token operator">=</span> answer_set<span class="token punctuation">[</span>work_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">;</span> time<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> time <span class="token operator">+</span> cost_time <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> now_number<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> time<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> time <span class="token operator">+</span> cost_time <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                     timeline_book<span class="token punctuation">[</span>now_number<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//-1的原因是种树原理，后面的则是标记</span>                answer_set<span class="token punctuation">[</span>work_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> time <span class="token operator">+</span> cost_time <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//记录所需要花费的最多的时间，因为可能插在最后一个时间记录段后面</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> answer_set<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//虽然题目求的是最小值，但是我们需要知道，我们的方法一定可以只有前k个工序时获得所需要时间的最小值</span>    <span class="token comment" spellcheck="true">//即我们的answer_set[k]的值是我们求的前k个工序最多需要的时间</span>    <span class="token comment" spellcheck="true">//故此处取最大值指的是所有的工序全部做完的时间</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目12：帮贡排序"><a href="#题目12：帮贡排序" class="headerlink" title="题目12：帮贡排序"></a>题目12：帮贡排序</h2><p>（先吐槽一下，这居然是我的童年回忆Q宠大乱斗的背景）<br>这道题就是我们要对副帮主以下的人进行按照贡献度进行排序，排序要求是按照贡献度进行通排序以分配职位，但是如果排序前后职位都没有发生变化，则需要排在前面。<br>所以相当于一到结构体排序的问题，由于涉及到前后未发生变化，因此需要加一个原来所在序列的位置Number。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;map></span></span>using namespace std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> inf 0x7ffffffffffff     </span><span class="token comment" spellcheck="true">//这里科普下，在符号整数的情况下，如果第一位是1，则这个数是负数，7=0111B，f=1111B</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Member <span class="token punctuation">{</span>    string Name<span class="token punctuation">,</span> Post<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//名字，职位</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> Contribution<span class="token punctuation">,</span>Rank<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//贡献度，等级</span>    <span class="token keyword">int</span> Number<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在输入列表中的位置</span><span class="token punctuation">}</span>Mem<span class="token punctuation">;</span>Mem book<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> Post_Level<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为涉及到比较职位的大小，而字符串的比较是字典序而不是我们想要的顺序，所以我们需要</span><span class="token comment" spellcheck="true">//建立从职位到等级的映射，职位越大，数字越小</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> work_num<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> inf <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里看个人不同的，因为我是从0开始输入，所以是0为第一个，但是如果你是1开头，那么所有数字+1</span>string Post_name<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"BangZhu"</span><span class="token punctuation">,</span> <span class="token string">"FuBangZhu"</span><span class="token punctuation">,</span><span class="token string">"HuFa"</span><span class="token punctuation">,</span> <span class="token string">"ZhangLao"</span><span class="token punctuation">,</span><span class="token string">"TangZhu"</span><span class="token punctuation">,</span>             <span class="token string">"JingYing"</span><span class="token punctuation">,</span> <span class="token string">"BangZhong"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>bool <span class="token function">cmp1</span><span class="token punctuation">(</span>Mem a<span class="token punctuation">,</span> Mem b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>Contribution <span class="token operator">==</span> b<span class="token punctuation">.</span>Contribution<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>Number <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>Number<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入序列顺序的从小到大</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>Contribution <span class="token operator">></span> b<span class="token punctuation">.</span>Contribution<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//贡献从大到小排序</span><span class="token punctuation">}</span>bool <span class="token function">cmp2</span><span class="token punctuation">(</span>Mem a<span class="token punctuation">,</span> Mem b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>Post <span class="token operator">==</span> b<span class="token punctuation">.</span>Post<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>Rank <span class="token operator">==</span> b<span class="token punctuation">.</span>Rank<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>Number <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>Number<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入序列顺序的从小到大</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>Rank <span class="token operator">></span> b<span class="token punctuation">.</span>Rank<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等级的从大到小排序</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> Post_Level<span class="token punctuation">[</span>a<span class="token punctuation">.</span>Post<span class="token punctuation">]</span> <span class="token operator">&lt;</span> Post_Level<span class="token punctuation">[</span>b<span class="token punctuation">.</span>Post<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//职位从小到大</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> Post_Level<span class="token punctuation">[</span>Post_name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    cin <span class="token operator">>></span> num<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name <span class="token operator">>></span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Post <span class="token operator">>></span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Contribution <span class="token operator">>></span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Rank<span class="token punctuation">;</span>        book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Number <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//就是分析所说的，前后职位都没变要放在前面</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>book <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span> book <span class="token operator">+</span> num<span class="token punctuation">,</span> cmp1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//帮主和副帮主的相对顺序不能动，所以从3开始排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> work_num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Post <span class="token operator">=</span> Post_name<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> book <span class="token operator">+</span> num<span class="token punctuation">,</span> cmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         cout <span class="token operator">&lt;&lt;</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Post <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Rank <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目13：阶乘数码"><a href="#题目13：阶乘数码" class="headerlink" title="题目13：阶乘数码"></a>题目13：阶乘数码</h2><p>高精度模拟阶乘，可以加入模板。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">[</span><span class="token number">2000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">,</span> a<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin <span class="token operator">>></span> n <span class="token operator">>></span> a<span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> cf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> j <span class="token operator">+</span> cf<span class="token punctuation">;</span>                cf <span class="token operator">=</span> ans<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>cf <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token punctuation">[</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> cf <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>                length<span class="token operator">++</span><span class="token punctuation">;</span>                cf <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目14：最大成绩"><a href="#题目14：最大成绩" class="headerlink" title="题目14：最大成绩"></a>题目14：最大成绩</h2><p>从2开始遍历，然后登记到book数组里面，这样从小到大直到不能再分，则乘积为最大值，因为乘数越多，答案越大。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> L <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> number<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//number是存储拆分的数字</span>string ans<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> total <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//s数组用来存每一个数字</span>string <span class="token function">add</span><span class="token punctuation">(</span>string str1<span class="token punctuation">,</span> string str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    string str<span class="token punctuation">;</span>    <span class="token keyword">int</span> len1 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len2 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len1 <span class="token operator">&lt;</span> len2<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len2 <span class="token operator">-</span> len1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> str1 <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> str1<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len1 <span class="token operator">-</span> len2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> str2 <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> str2<span class="token punctuation">;</span>    len1 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span> <span class="token operator">+</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span> <span class="token operator">+</span> cf<span class="token punctuation">;</span>        cf <span class="token operator">=</span> temp <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        temp <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        str <span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cf <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>  str <span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">(</span>cf <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span>string <span class="token function">mul</span><span class="token punctuation">(</span>string str1<span class="token punctuation">,</span> string str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    string str<span class="token punctuation">;</span>    <span class="token keyword">int</span> len1 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len2 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string tempstr<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        tempstr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> len2 <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> tempstr <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> len1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                t <span class="token operator">=</span> <span class="token punctuation">(</span>temp <span class="token operator">*</span> <span class="token punctuation">(</span>str1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> cf<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>                cf <span class="token operator">=</span> <span class="token punctuation">(</span>temp <span class="token operator">*</span> <span class="token punctuation">(</span>str1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> cf<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>                tempstr <span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> tempstr<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cf <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> tempstr <span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">(</span>cf <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> tempstr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        str <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> tempstr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    str<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">find_first_not_of</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> str <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span>string <span class="token function">Num_to_String</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span>    string p <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        x <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token operator">--</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">,</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        t <span class="token operator">=</span> ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ch<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n%d\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> i<span class="token punctuation">)</span> n <span class="token operator">-</span><span class="token operator">=</span> i<span class="token punctuation">,</span> number<span class="token punctuation">[</span>c<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">,</span> ans<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Num_to_String</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>         number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Num_to_String</span><span class="token punctuation">(</span>number<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>         number<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Num_to_String</span><span class="token punctuation">(</span>number<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> number<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        total <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> total<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目15：麦森数"><a href="#题目15：麦森数" class="headerlink" title="题目15：麦森数"></a>题目15：麦森数</h2><p>位数可以使用n*log10(2)+1公式来获得（这个是专门求位数的函数），推导的话后续再补上。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> even_res<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">odd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这个函数接口是当前数字为奇数的时候，由于除二会阶段最后的1，需单独计算一次</span>    <span class="token function">memset</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">500</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            temp<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> even_res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">even</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这个函数接口是当前数字为偶数的时候</span>    <span class="token function">memset</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">500</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            temp<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> even_res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> even_res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>even_res<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>even_res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">log10</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> even_res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//快速幂基本思想，分治</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">odd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">even</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">500</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">%</span> <span class="token number">50</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%d"</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模拟题是考验代码和细心程度的题，一定要尽可能的自己敲，虽然“算法”含量不高，但是确是一定程度上不能够丢的题。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法和程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 高精度 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷官方提单——函数与结构入门题解（水题警告）</title>
      <link href="/2020/04/16/luo-gu-guan-fang-ti-dan-han-shu-yu-yu-jie-gou-ru-men-ti-jie-bu-fen-shui-ti-jing-gao/"/>
      <url>/2020/04/16/luo-gu-guan-fang-ti-dan-han-shu-yu-yu-jie-gou-ru-men-ti-jie-bu-fen-shui-ti-jing-gao/</url>
      
        <content type="html"><![CDATA[<p>函数实际上就是我们将程序的语句分成不同的块，每一块都执行不同的操作，这样的“代码块”称之为函数(function)。通过将代码分割为一个又一个的函数，虽然在执行函数调用的时候存在开销，但是在后续对程序的修改和对功能的扩充比直接在main函数中方便得多。<br>顺带一提，在C++中，最好将接口写在main函数上面，这样就可以减少一行前置声明（具体相关请翻看相关书籍查找前置声明）。<br>结构体则是数据的集合，从数组，到链表，再到OS里的PCB，这些很多都是结构体。每个结构体由程序员自行设计，通过将数据“打包”，可以在进行某些操作（比如排序）会更加的方便。</p><p>接下来就是关于本题单的题解了。</p><h2 id="题目0-距离函数"><a href="#题目0-距离函数" class="headerlink" title="题目0:  距离函数"></a>题目0:  距离函数</h2><p>就是简单的两点之间的距离公式的计算机实现，注意输出格式和数据类型就很简单了。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token keyword">double</span> <span class="token function">dist</span><span class="token punctuation">(</span><span class="token keyword">double</span> x1<span class="token punctuation">,</span><span class="token keyword">double</span> x2<span class="token punctuation">,</span><span class="token keyword">double</span> y1<span class="token punctuation">,</span><span class="token keyword">double</span> y2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x1<span class="token operator">-</span>x2<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x1<span class="token operator">-</span>x2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>y1<span class="token operator">-</span>y2<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y1<span class="token operator">-</span>y2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>x3<span class="token punctuation">,</span>y3<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%lf%lf%lf%lf%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x1<span class="token punctuation">,</span><span class="token operator">&amp;</span>y1<span class="token punctuation">,</span><span class="token operator">&amp;</span>x2<span class="token punctuation">,</span><span class="token operator">&amp;</span>y2<span class="token punctuation">,</span><span class="token operator">&amp;</span>x3<span class="token punctuation">,</span><span class="token operator">&amp;</span>y3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> ans<span class="token operator">=</span><span class="token function">dist</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>y2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">dist</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x3<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>y3<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">dist</span><span class="token punctuation">(</span>x2<span class="token punctuation">,</span>x3<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>y3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目1：质数筛"><a href="#题目1：质数筛" class="headerlink" title="题目1：质数筛"></a>题目1：质数筛</h2><p>模板题，筛选方法有欧拉筛或者埃筛，一般题目中埃筛就够了，碰到了欧拉筛再补充吧。<br>埃筛的过程是：开一个数组vis，0和1标记为“不是素数”的flag，然后从2开始遍历，如果vis[i]是质数，那么从这个质数开始的2倍，3倍直至最后边界范围内都不会质数，提前标记为“不是质数”；若“不是质数”，则直接进入下一轮循环，这样我们在调用是不是质数的时候，只需要简单的判断vis[num]的标记即可。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>bool numlist<span class="token punctuation">[</span><span class="token number">100050</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> false<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> i <span class="token operator">*</span> j <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                numlist<span class="token punctuation">[</span>i <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numlist<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">==</span> false<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目2：闰年展示"><a href="#题目2：闰年展示" class="headerlink" title="题目2：闰年展示"></a>题目2：闰年展示</h2><p>判断闰年在题单1就有了，主要是在输出年之前需要count，因此需要存下来。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;vector></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cin <span class="token operator">>></span> x <span class="token operator">>></span> y<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            ans<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cnt<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span>cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目3：歌唱比赛"><a href="#题目3：歌唱比赛" class="headerlink" title="题目3：歌唱比赛"></a>题目3：歌唱比赛</h2><p>这道题没啥讲的= =，基本就是前面的题的组合。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">></span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token keyword">double</span> mmax <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sort</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span> memo <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> sum <span class="token operator">+</span><span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span> sum <span class="token operator">/</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf"</span><span class="token punctuation">,</span> mmax<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目4：阶乘"><a href="#题目4：阶乘" class="headerlink" title="题目4：阶乘"></a>题目4：阶乘</h2><p>直接递归即可。(当n很大的时候建议使用之前写过的杨辉三角）</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">jie</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token function">jie</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">jie</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目5：赦免战俘"><a href="#题目5：赦免战俘" class="headerlink" title="题目5：赦免战俘"></a>题目5：赦免战俘</h2><p>这种带有典型的分形的题就是典型的递归题目。<br>另解，实际这道题也可以发现，ans[i][j]=ans[i][j-1]^ans[i+1][j-1]，这类题都会存在类似的规律，一般来说如果sample给的十分遮掩可以考虑试试这种方法来“凑”答案。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">1050</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ans<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x <span class="token operator">+</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> y<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> y <span class="token operator">+</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token function">work</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> x <span class="token operator">+</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">work</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> x <span class="token operator">+</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">+</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">work</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">+</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">work</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目6：最厉害的学生"><a href="#题目6：最厉害的学生" class="headerlink" title="题目6：最厉害的学生"></a>题目6：最厉害的学生</h2><p>大家都应该知道在algorithm库里面有个sort函数，按照一般的升序我们只需要sort(s.begin(),s.end())，但是我们可以通过使用第三个可选参数来决定比较方式，通过写一个函数接口即可解决。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//比赛的时候没必要这么命名</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> hello <span class="token punctuation">{</span>    <span class="token keyword">int</span> Chinese<span class="token punctuation">,</span> Math<span class="token punctuation">,</span> English<span class="token punctuation">;</span>    string Name<span class="token punctuation">;</span><span class="token punctuation">}</span>student<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span>hello student1<span class="token punctuation">,</span> hello student2<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> student1<span class="token punctuation">.</span>Chinese <span class="token operator">+</span> student1<span class="token punctuation">.</span>Math <span class="token operator">+</span> student1<span class="token punctuation">.</span>English <span class="token operator">></span> student2<span class="token punctuation">.</span>Chinese <span class="token operator">+</span> student2<span class="token punctuation">.</span>Math <span class="token operator">+</span> student2<span class="token punctuation">.</span>English<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        cin <span class="token operator">>></span> student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name <span class="token operator">>></span> student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Chinese <span class="token operator">>></span> student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Math <span class="token operator">>></span> student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>English<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> student <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> student<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> student<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Chinese <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> student<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Math <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> student<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>English <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目7：旗鼓相当的对手-加强版"><a href="#题目7：旗鼓相当的对手-加强版" class="headerlink" title="题目7：旗鼓相当的对手 - 加强版"></a>题目7：旗鼓相当的对手 - 加强版</h2><p>也就是判断条件比较复杂，实际上还是很简单，但是注意总分的时候不要把之前算的三个差值直接加起来。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> S <span class="token punctuation">{</span>    string Name<span class="token punctuation">;</span>    <span class="token keyword">int</span> Chinese<span class="token punctuation">,</span> Math<span class="token punctuation">,</span> English<span class="token punctuation">;</span><span class="token punctuation">}</span>student<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>          cin <span class="token operator">>></span> student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name <span class="token operator">>></span> student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Chinese <span class="token operator">>></span> student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Math <span class="token operator">>></span> student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>English<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sub1 <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Chinese <span class="token operator">-</span> student<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Chinese<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> sub2 <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Math <span class="token operator">-</span> student<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Math<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> sub3 <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>English <span class="token operator">-</span> student<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>English<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> sub4 <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>English <span class="token operator">+</span> student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Chinese <span class="token operator">+</span> student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Math <span class="token operator">-</span> student<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Chinese <span class="token operator">-</span> student<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Math <span class="token operator">-</span> student<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>English<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sub1 <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> sub2 <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> sub3 <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> sub4 <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name <span class="token operator">></span> student<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> student<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> student<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目8：评级"><a href="#题目8：评级" class="headerlink" title="题目8：评级"></a>题目8：评级</h2><p>emmm经过题目8，这道题就没必要讲了吧。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> student <span class="token punctuation">{</span>    <span class="token keyword">int</span> student_number<span class="token punctuation">,</span> study_grade<span class="token punctuation">,</span> other_grade<span class="token punctuation">;</span><span class="token punctuation">}</span>st<span class="token punctuation">[</span><span class="token number">1010</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">double</span> after_weight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>student_number <span class="token operator">>></span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>study_grade <span class="token operator">>></span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>other_grade<span class="token punctuation">;</span>        after_weight <span class="token operator">=</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>study_grade <span class="token operator">*</span> <span class="token number">0.7</span> <span class="token operator">+</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>other_grade <span class="token operator">*</span> <span class="token number">0.3</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>after_weight <span class="token operator">></span> <span class="token number">80</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>study_grade <span class="token operator">+</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>other_grade <span class="token operator">></span> <span class="token number">140</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Excellent"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Not excellent"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目9：质因数分解"><a href="#题目9：质因数分解" class="headerlink" title="题目9：质因数分解"></a>题目9：质因数分解</h2><p>循环结构的原题，自己回去看。</p><h2 id="题目10：哥德巴赫猜想"><a href="#题目10：哥德巴赫猜想" class="headerlink" title="题目10：哥德巴赫猜想"></a>题目10：哥德巴赫猜想</h2><p>因为要分解为质数之和，所以我们直接把质数先筛选出来（没错就是前面的质数筛），然后从小到大直接加就ok了。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> prime<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> k <span class="token operator">+</span><span class="token operator">=</span> j<span class="token punctuation">)</span> prime<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里要注意，一定每次进第一循环的时候初始化为2</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> prime<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d=%d+%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目11：集合求和"><a href="#题目11：集合求和" class="headerlink" title="题目11：集合求和"></a>题目11：集合求和</h2><p>这里大致说一下推理过程，首先我们知道对于每一个有n个元素的集合，其子集个数为2^n。<br>当子集只有一个元素的时候，每个元素被选中一次；当子集中只有两个元素的时候，恰好被选中C(n,2）次，依次类推，只需要对n对于1到n的所有组合数求和再乘以所有元素的和即为答案（这里涉及到二项式定理）。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> temp<span class="token punctuation">,</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目12：回文质数"><a href="#题目12：回文质数" class="headerlink" title="题目12：回文质数"></a>题目12：回文质数</h2><p>原题略。</p><h2 id="题目13：猴子吃桃"><a href="#题目13：猴子吃桃" class="headerlink" title="题目13：猴子吃桃"></a>题目13：猴子吃桃</h2><p>纯模拟，会读题小学生都会。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目14：培训"><a href="#题目14：培训" class="headerlink" title="题目14：培训"></a>题目14：培训</h2><p>和上面那些比较分数的大同小异、</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">struct</span> student <span class="token punctuation">{</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">,</span> score<span class="token punctuation">;</span><span class="token punctuation">}</span> candidate<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> candidate<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">>></span> candidate<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">>></span> candidate<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>        candidate<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token punctuation">,</span> candidate<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">=</span> candidate<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">/</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">></span> <span class="token number">600</span><span class="token punctuation">)</span> candidate<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> candidate<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> candidate<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> candidate<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>入门题刷完了，明天就要开始六大基础算法的刷题，争取一天两个吧（bushi）。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法和程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程算法题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷官方提单——字符串入门题解（部分水题警告）</title>
      <link href="/2020/04/15/luo-gu-guan-fang-ti-dan-zi-fu-chuan-ru-men-ti-jie-bu-fen-shui-ti-jing-gao/"/>
      <url>/2020/04/15/luo-gu-guan-fang-ti-dan-zi-fu-chuan-ru-men-ti-jie-bu-fen-shui-ti-jing-gao/</url>
      
        <content type="html"><![CDATA[<p>今天是字符串的入门题，字符串的题学习建议使用cpp的stl中的string，虽然STL又名sometime time limit，但是自己使用char数组写轮子很容易产生越界导致的RTE或者SE。<br>同时希望大家能够记住string.h和string的函数，至少看名字要知道他是什么意思，这样才能极大的提高做串类型的题的速度。<br>废话不多说，直接进入正题。</p><h2 id="题目0：自动修正"><a href="#题目0：自动修正" class="headerlink" title="题目0：自动修正"></a>题目0：自动修正</h2><p>简单的大小写替换题。代码给两种</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//python</span><span class="token comment" spellcheck="true">//print(input().upper())</span><span class="token comment" spellcheck="true">//cpp头文件啥的省略嗷</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token string">'a'</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token operator">+</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目1：小书童——密码"><a href="#题目1：小书童——密码" class="headerlink" title="题目1：小书童——密码"></a>题目1：小书童——密码</h2><p>简单的对每一个字母+n即可，但是注意整个要对26取模保证始终是字母。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token operator">+</span><span class="token string">'a'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="题目2：笨小猴"><a href="#题目2：笨小猴" class="headerlink" title="题目2：笨小猴"></a>题目2：笨小猴</h2><p>实不相瞒，这道题我坐着我觉得我也蛮笨的（bushi）,坑点在于：</p><ol><li>你的min如果不对book数组中的0进行特别判定的话，那么你会WA；</li><li>一般素数是不会判断0的（没错，我一开始的接口没有判断0），所以我在0卡了好一会儿。<br>代码如下<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token keyword">char</span> memo<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> book<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">></span> b <span class="token operator">?</span> a <span class="token punctuation">:</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b <span class="token operator">?</span> a <span class="token punctuation">:</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span>bool <span class="token function">Is_Prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span> <span class="token keyword">int</span> bound <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> bound <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> mmax <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> mmin <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> memo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>memo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> book<span class="token punctuation">[</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     mmax <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mmax<span class="token punctuation">,</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">continue</span><span class="token punctuation">;</span>     <span class="token keyword">else</span> mmin <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mmin<span class="token punctuation">,</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Is_Prime</span><span class="token punctuation">(</span>mmax <span class="token operator">-</span> mmin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Lucky Word\n%d\n"</span><span class="token punctuation">,</span> mmax <span class="token operator">-</span> mmin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No Answer\n0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目3：口算计算题"><a href="#题目3：口算计算题" class="headerlink" title="题目3：口算计算题"></a>题目3：口算计算题</h2>根据题目进行模拟即可，但是这里有个重点是如何区分三个还是两个的情况（所以这题的难度真的是普及-吗？）。<br>具体实现方式见代码和注释。<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Num_lenth</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> len<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> len<span class="token operator">++</span><span class="token punctuation">,</span> num <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">return</span> len<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">To_num</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> string sa<span class="token punctuation">,</span> sb<span class="token punctuation">;</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> n<span class="token punctuation">;</span> <span class="token keyword">char</span> ch<span class="token punctuation">,</span> copy<span class="token punctuation">;</span> cin <span class="token operator">>></span> n<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     cin <span class="token operator">>></span> ch <span class="token operator">>></span> sa <span class="token operator">>></span> sb<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> sa <span class="token operator">=</span> ch <span class="token operator">+</span> sa<span class="token punctuation">,</span> ch <span class="token operator">=</span> copy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为第一个不是字母，所以我们把copy赋予ch方便后续判断</span>     <span class="token comment" spellcheck="true">//string类加法就是拼接字符串,copy是上一轮的字符。</span>     a <span class="token operator">=</span> <span class="token function">To_num</span><span class="token punctuation">(</span>sa<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">To_num</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//本来打算用atoi但是因为是string就得手造轮子</span>     <span class="token keyword">int</span> a_len <span class="token operator">=</span> <span class="token function">Num_lenth</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> b_len <span class="token operator">=</span> <span class="token function">Num_lenth</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d+%d=%d\n%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> a_len <span class="token operator">+</span> b_len <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token function">Num_lenth</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> copy <span class="token operator">=</span> ch<span class="token punctuation">;</span>     <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d-%d=%d\n%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">-</span> b<span class="token punctuation">,</span> a_len <span class="token operator">+</span> b_len <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token function">Num_lenth</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> copy <span class="token operator">=</span> ch<span class="token punctuation">;</span>     <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%d\n%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">*</span> b<span class="token punctuation">,</span> a_len <span class="token operator">+</span> b_len <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token function">Num_lenth</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> copy <span class="token operator">=</span> ch<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//这里注意，多输出换行爆0</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目4：标题统计"><a href="#题目4：标题统计" class="headerlink" title="题目4：标题统计"></a>题目4：标题统计</h2>假如你是顺序做题的话，经历了上面的题的洗礼，这道题简直就是送分题，但是，这里科普一下：gets函数请勿在比赛的时候使用（C11以上已经不允许使用了）。<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">;</span> <span class="token function">fgets</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                       <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目5：文字处理软件"><a href="#题目5：文字处理软件" class="headerlink" title="题目5：文字处理软件"></a>题目5：文字处理软件</h2>按照题目使用库函数即可（自己写费时费力）<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">105</span><span class="token punctuation">;</span><span class="token keyword">char</span> text<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> op<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d\n%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">strcat</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>         text<span class="token punctuation">[</span>a <span class="token operator">+</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>         <span class="token function">strcpy</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> text <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">strcpy</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>op <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">strcat</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> text <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>         text<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>         <span class="token function">strcat</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">char</span><span class="token operator">*</span> ans <span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span>ans <span class="token operator">-</span> text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目6：统计单词数"><a href="#题目6：统计单词数" class="headerlink" title="题目6：统计单词数"></a>题目6：统计单词数</h2>按照题目要求，请勿使用cin因为cin无法读入空格，这里提供另外一个思路，循环到文件结尾，将文章的每个单词读入string中，然后处理都为大写或者小写，直接strcmp每个string(这里就不写咯）。<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> string article<span class="token punctuation">,</span> word<span class="token punctuation">;</span> <span class="token keyword">int</span> pass_len<span class="token punctuation">,</span> word_len<span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> article<span class="token punctuation">)</span><span class="token punctuation">;</span> word_len <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pass_len <span class="token operator">=</span> article<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> word_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> word<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toupper</span><span class="token punctuation">(</span>word<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不采用-'a'+'A'的方式主要是需要多写一个判断其是不是属于'a'到'z'之间</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pass_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> article<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">toupper</span><span class="token punctuation">(</span>article<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> pass_len <span class="token operator">-</span> word_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> word_len<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>article<span class="token punctuation">[</span>j <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">!=</span> word<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> article<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> word_len <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>article<span class="token punctuation">[</span>j <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span> <span class="token operator">||</span> j <span class="token operator">+</span> i <span class="token operator">==</span> pass_len<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>t <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> pos <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> pos<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目7：手机"><a href="#题目7：手机" class="headerlink" title="题目7：手机"></a>题目7：手机</h2>由于每个字母需要按的次数是固定的，所以我们打表即可。<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> string s<span class="token punctuation">;</span> <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span> ans <span class="token operator">+</span><span class="token operator">=</span> cnt<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目8：honoka的键盘"><a href="#题目8：honoka的键盘" class="headerlink" title="题目8：honoka的键盘"></a>题目8：honoka的键盘</h2>遍历两次，同时使用book数组来保证’VK’没有被使用，且由于只能变换一次保证最多的VK，因此答案必然是VK的数目或者VK+1。<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> ans<span class="token punctuation">,</span> flag<span class="token punctuation">,</span> book<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'V'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'K'</span><span class="token punctuation">)</span>         ans<span class="token operator">++</span><span class="token punctuation">,</span> book<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>book<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>         flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> ans<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目9：单词覆盖还原"><a href="#题目9：单词覆盖还原" class="headerlink" title="题目9：单词覆盖还原"></a>题目9：单词覆盖还原</h2>题目含义就是，只要b开头，第二个是o或第三个是y或第二三是oy，那么就算一个boy；girl同理<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> bcnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> gcnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> string s<span class="token punctuation">;</span> cin <span class="token operator">>></span> s<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'b'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'o'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'y'</span><span class="token punctuation">)</span>bcnt<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'g'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'i'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'r'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'l'</span><span class="token punctuation">)</span> gcnt<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> cout <span class="token operator">&lt;&lt;</span> bcnt <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> gcnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目10：数字反转（升级版）"><a href="#题目10：数字反转（升级版）" class="headerlink" title="题目10：数字反转（升级版）"></a>题目10：数字反转（升级版）</h2>前面有一个简易版本的数字反转，这个要难一点，但是依旧只要按照题目所说就可以正确做出来（就是细节特别多），这里使用的是栈。<br>没错，细节多到炸，我以为按照题意不会出现1.00100这种数字，结果在这个点疯狂WA，而且还有很多奇形怪状的坑点，调BUG调了40min。<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">char</span> memo<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> s<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> memo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>memo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> signal_pos <span class="token operator">=</span> len<span class="token punctuation">,</span> zero_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span> signal_pos <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//非整数</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> signal_pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//符号前进栈</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//输出</span>     <span class="token keyword">char</span> temp <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token string">'0'</span><span class="token punctuation">)</span> zero_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>zero_flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> temp<span class="token punctuation">;</span>     s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>zero_flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//说明符号前整个都是0，只有一个0</span> cout <span class="token operator">&lt;&lt;</span> memo<span class="token punctuation">[</span>signal_pos<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出符号或整数的最后一位</span> zero_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> signal_pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>zero_flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原来数据的前导0我们不要</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>             zero_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不是前导0了</span>             s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> signal_pos <span class="token operator">!=</span> len <span class="token operator">&amp;&amp;</span> signal_pos <span class="token operator">!=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第一个说明小/分数后面是0，第二个说明是整数，第三个说明是百分数</span> zero_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//输出</span>     <span class="token keyword">char</span> temp <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token string">'0'</span><span class="token punctuation">)</span> zero_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>zero_flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> temp<span class="token punctuation">;</span>     s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目11：斯诺登的密码"><a href="#题目11：斯诺登的密码" class="headerlink" title="题目11：斯诺登的密码"></a>题目11：斯诺登的密码</h2>这题首先，你得打表，不然你就得写很多很多ifelseif；其次，然后对于平方后取模，建议也直接打表，不然前导0去除很恶心。<pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//先挖个坑，由于环境不一样，所以你直接copy会CE</span><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">char</span> dic<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"zero"</span><span class="token punctuation">,</span><span class="token string">"one"</span><span class="token punctuation">,</span><span class="token string">"two"</span><span class="token punctuation">,</span><span class="token string">"three"</span><span class="token punctuation">,</span><span class="token string">"four"</span><span class="token punctuation">,</span><span class="token string">"five"</span><span class="token punctuation">,</span><span class="token string">"six"</span><span class="token punctuation">,</span><span class="token string">"seven"</span><span class="token punctuation">,</span><span class="token string">"eight"</span><span class="token punctuation">,</span><span class="token string">"nine"</span><span class="token punctuation">,</span><span class="token string">"ten"</span><span class="token punctuation">,</span><span class="token string">"eleven"</span><span class="token punctuation">,</span><span class="token string">"twelve"</span><span class="token punctuation">,</span> <span class="token string">"thirteen"</span><span class="token punctuation">,</span> <span class="token string">"fourteen"</span><span class="token punctuation">,</span> <span class="token string">"fifteen"</span><span class="token punctuation">,</span> <span class="token string">"sixteen"</span><span class="token punctuation">,</span> <span class="token string">"seventeen"</span><span class="token punctuation">,</span> <span class="token string">"eighteen"</span><span class="token punctuation">,</span> <span class="token string">"nineteen"</span><span class="token punctuation">,</span> <span class="token string">"twenty"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"both"</span><span class="token punctuation">,</span><span class="token string">"another"</span><span class="token punctuation">,</span><span class="token string">"first"</span><span class="token punctuation">,</span><span class="token string">"second"</span><span class="token punctuation">,</span><span class="token string">"third"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> ind<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> dic<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             ans<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> ind<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> ans <span class="token operator">+</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目12：你的飞碟在这里"><a href="#题目12：你的飞碟在这里" class="headerlink" title="题目12：你的飞碟在这里"></a>题目12：你的飞碟在这里</h2>按照题目来，此题没有坑点（早期做的题目，代码懒得重写）。<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">char</span> st<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>gr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> star<span class="token punctuation">,</span>group<span class="token punctuation">;</span> <span class="token keyword">int</span> stl<span class="token punctuation">,</span>gro<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%s"</span><span class="token punctuation">,</span>st<span class="token punctuation">,</span>gr<span class="token punctuation">)</span><span class="token punctuation">;</span> star<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>group<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>stl<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">,</span>gro<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>gr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>stl<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> star<span class="token operator">*</span><span class="token operator">=</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> star<span class="token operator">=</span>star<span class="token operator">%</span><span class="token number">47</span><span class="token punctuation">;</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>gro<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> group<span class="token operator">*</span><span class="token operator">=</span><span class="token punctuation">(</span>gr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> group<span class="token operator">=</span>group<span class="token operator">%</span><span class="token number">47</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>star<span class="token operator">==</span>group<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"GO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"STAY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目13：语句解析"><a href="#题目13：语句解析" class="headerlink" title="题目13：语句解析"></a>题目13：语句解析</h2>scanf属于格式输入，使用scanf可以定向输入想要位置的值，然后按照题目要求就可以做了。<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">char</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c:=%c;"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>s2 <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> s2 <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>s1 <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> s2 <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>     <span class="token keyword">else</span> a<span class="token punctuation">[</span>s1 <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>s2 <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目14：垂直柱状图"><a href="#题目14：垂直柱状图" class="headerlink" title="题目14：垂直柱状图"></a>题目14：垂直柱状图</h2>K&amp;R C书籍上的原题，属于比较繁琐的字符串模拟，重点是你要先找到最大的数来决定你要输出的最大范围<pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> book<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">></span> y <span class="token operator">?</span> x <span class="token punctuation">:</span> y <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> maxn <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">;</span> string a<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">getline</span><span class="token punctuation">(</span>cin<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     n <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span>             book<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     maxn <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxn<span class="token punctuation">,</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> maxn<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"* "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c "</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>今天的字符串入门就是这些啦，内容虽然不难，但题都或多或少的繁琐（考虑多种边界条件），会了基本之后才能为后面更难的字符串题目（字符串的难题基本都得构造出状态机，因此需要很好的基础），一天杀一单子题还是有点刺激。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法和程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程算法题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷官方题单——数组题解（部分水题警告）</title>
      <link href="/2020/04/14/luo-gu-guan-fang-ti-dan-shu-zu-ti-jie-bu-fen-shui-ti-jing-gao/"/>
      <url>/2020/04/14/luo-gu-guan-fang-ti-dan-shu-zu-ti-jie-bu-fen-shui-ti-jing-gao/</url>
      
        <content type="html"><![CDATA[<p>今天之后，题目会开始变得困难了一些，但是就现在为止还是抵挡不住我们的刷题节奏。废话不多说，直接开搞。</p><h2 id="题目0：小鱼比可爱"><a href="#题目0：小鱼比可爱" class="headerlink" title="题目0：小鱼比可爱"></a>题目0：小鱼比可爱</h2><p>十分简单，存到一个数组中，然后从0往n-1依次遍历，记录当前位置；然后从0到当前位置遍历，当数字比他小，则cnt++，然后输出cnt和一个空格即可。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 105   </span><span class="token comment" spellcheck="true">//这里应该是大家都知道的小技巧了，就是数组稍微开大一些</span><span class="token keyword">int</span> array<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//但是注意不一定开大一些就+5,+50，有些题目会存在开一倍甚至更多的情况（后面就会有体现）</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//毕竟下一轮循环cnt就是新生了</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目1：小鱼的数字游戏"><a href="#题目1：小鱼的数字游戏" class="headerlink" title="题目1：小鱼的数字游戏"></a>题目1：小鱼的数字游戏</h2><p>可以考虑两个办法，一个是开一个stack<int> s;然后存进去再依次输出（栈）。<br>另外一个办法就是记录到一个数组，同时记录个数（因为以0为结尾，所以需要额外记录数字个数），然后从最后往前输出即可。</int></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> num<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//long long 没必要，但是我就是要加</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld "</span><span class="token punctuation">,</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目2：冰雹猜想"><a href="#题目2：冰雹猜想" class="headerlink" title="题目2：冰雹猜想"></a>题目2：冰雹猜想</h2><p>纯粹的模拟题，由于最后需要倒着输出，所以是需要存在一个数组里面的(当然可以利用递归在系统中是需要栈空间的特性来使用递归输出）。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//递归版本</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">print</span><span class="token punctuation">(</span>n<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//非递归版本，使用栈</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stack></span></span>using namespace std<span class="token punctuation">;</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> n<span class="token operator">>>=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> n<span class="token operator">=</span>n<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//非递归，普通实现</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        memo<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> n <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    memo<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> cnt<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目3：校门外的树"><a href="#题目3：校门外的树" class="headerlink" title="题目3：校门外的树"></a>题目3：校门外的树</h2><p>按照题目模拟一边即可（线段树/分块啥的暂时就别搞这些花里胡哨的嗷）。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 10002</span><span class="token keyword">int</span> path<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> L<span class="token punctuation">,</span> M<span class="token punctuation">;</span>    <span class="token keyword">int</span> st<span class="token punctuation">,</span> en<span class="token punctuation">,</span> count<span class="token punctuation">;</span>    count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token operator">&amp;</span>M<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> L<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>M<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>st<span class="token punctuation">,</span> <span class="token operator">&amp;</span>en<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> st<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> en<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        M<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> L<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目4：旗鼓相当的对手"><a href="#题目4：旗鼓相当的对手" class="headerlink" title="题目4：旗鼓相当的对手"></a>题目4：旗鼓相当的对手</h2><p>我这里使用的是结构体，也可以使用二维数组，然后遍历就行了</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> student <span class="token punctuation">{</span>    <span class="token keyword">int</span> Chinese<span class="token punctuation">,</span> Math<span class="token punctuation">,</span> English<span class="token punctuation">,</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span>student<span class="token punctuation">;</span>student memo<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> x <span class="token punctuation">:</span> <span class="token operator">-</span>x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Chinese <span class="token operator">-</span> memo<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Chinese<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Math <span class="token operator">-</span> memo<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Math<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>English <span class="token operator">-</span> memo<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>English<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">-</span> memo<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Chinese<span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Math<span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>English<span class="token punctuation">)</span><span class="token punctuation">;</span>        memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Chinese <span class="token operator">+</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Math <span class="token operator">+</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>English<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>             ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目5：工艺品制作"><a href="#题目5：工艺品制作" class="headerlink" title="题目5：工艺品制作"></a>题目5：工艺品制作</h2><p>需要使用标记数组book确定这部分切割的地方有没有“蒸发”，然后模拟即可。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token keyword">int</span> book<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> w<span class="token punctuation">,</span> x<span class="token punctuation">,</span> h<span class="token punctuation">,</span> q<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> z1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> z2<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>z1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>z2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> x1<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> x2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> y1<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> y2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> z1<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> z2<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> w<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> x<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> h<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目6：彩票摇奖"><a href="#题目6：彩票摇奖" class="headerlink" title="题目6：彩票摇奖"></a>题目6：彩票摇奖</h2><p>采用一个数组来确定哪些号码已经被选取，这样在后续可以直接用输入得到的号码当做索引来查看是否买了这个数。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span><span class="token keyword">int</span> book<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目7：幻方"><a href="#题目7：幻方" class="headerlink" title="题目7：幻方"></a>题目7：幻方</h2><p>注意通过取模来达到循环的技巧也是经常使用的（尤其在字符串和循环队列中），其余按照题目一个一个写就行了。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//取模，此代码来自洛谷的HsKr </span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">%</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> y <span class="token operator">%</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> x <span class="token operator">=</span> x <span class="token operator">%</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//非取模</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> ans<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">!=</span> n<span class="token punctuation">)</span> x <span class="token operator">=</span> n<span class="token punctuation">,</span> y<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> n<span class="token punctuation">)</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> x<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> n<span class="token punctuation">)</span> y <span class="token operator">=</span> n<span class="token punctuation">,</span> x<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> x<span class="token operator">--</span><span class="token punctuation">,</span> y<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> x<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目8：显示屏"><a href="#题目8：显示屏" class="headerlink" title="题目8：显示屏"></a>题目8：显示屏</h2><p>打表题，可以提前将对应的存在一个string<string>（或者string的二维数组）里，然后输入的字符串读一位输出一位，中间加列点。<br>这道例题不放代码，因为打表题代码都是大同小异。</string></p><h2 id="题目9：梦中的统计"><a href="#题目9：梦中的统计" class="headerlink" title="题目9：梦中的统计"></a>题目9：梦中的统计</h2><p>输入开始和结束的数字，遍历一遍并在book数组里面统计对应出现的数即可。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> book<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>start<span class="token punctuation">,</span> <span class="token operator">&amp;</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span> temp <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> temp <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>            book<span class="token punctuation">[</span>temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目10：珠心算测验"><a href="#题目10：珠心算测验" class="headerlink" title="题目10：珠心算测验"></a>题目10：珠心算测验</h2><p>这里有个坑，注意要防止存在重复的（例如1+7=8，2+6=8，3+5=8都是重复的），因此最后的比较只看他是不是为0而不是简单粗暴的加起来。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXN 20005</span><span class="token keyword">int</span> answer<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>book<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>store<span class="token punctuation">[</span><span class="token number">105</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        book<span class="token punctuation">[</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            answer<span class="token punctuation">[</span>store<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> store<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAXN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> answer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目11：爱与愁的心痛"><a href="#题目11：爱与愁的心痛" class="headerlink" title="题目11：爱与愁的心痛"></a>题目11：爱与愁的心痛</h2><p>就按照题目要求直接写就行了，我这里相当于构造了一个滑动窗口。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">3050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">></span> y <span class="token operator">?</span> y <span class="token punctuation">:</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"a.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"a.out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> mmin <span class="token operator">=</span> <span class="token number">1e9</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> sum <span class="token operator">+</span><span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span>m<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    mmin <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mmin<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">=</span> sum <span class="token operator">-</span> memo<span class="token punctuation">[</span>i <span class="token operator">-</span> m<span class="token punctuation">]</span> <span class="token operator">+</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        mmin <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mmin<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> mmin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目12：Bovine-Bones-G"><a href="#题目12：Bovine-Bones-G" class="headerlink" title="题目12：Bovine Bones G"></a>题目12：Bovine Bones G</h2><p>简单的骰子模拟题，直接暴力就行了（数据范围很小，n^3也能接受的）。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> book<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> s3<span class="token punctuation">,</span> K <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mmax <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> s1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> s2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> s3<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                 book<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> s1 <span class="token operator">+</span> s2 <span class="token operator">+</span> s3<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>mmax <span class="token operator">&lt;</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> K <span class="token operator">=</span> i<span class="token punctuation">,</span> mmax <span class="token operator">=</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> K<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目13：开灯"><a href="#题目13：开灯" class="headerlink" title="题目13：开灯"></a>题目13：开灯</h2><p>这里我们可以将题目视作，寻找数组仅出现过奇数次的题目。由于aXORa=0，开关灯相当于是有两个a，则所有数据异或后只有一个数字就是这个开灯的编号。<br>网络上关于位运算的题目有很多，后续有机会写个blog。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> book<span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"a.in"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"a.out"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>t<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> a<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> ans <span class="token operator">^</span><span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>j <span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目14：蛇形方阵"><a href="#题目14：蛇形方阵" class="headerlink" title="题目14：蛇形方阵"></a>题目14：蛇形方阵</h2><p>这是《算法竞赛入门经典》的最开始的几道例题，十分简单，但是方法有很多，注意天杀的输出格式。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> num <span class="token operator">&lt;=</span> n <span class="token operator">*</span> n<span class="token punctuation">;</span> num<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        memo<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> x <span class="token operator">+</span> dx<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> a <span class="token operator">>=</span> n <span class="token operator">||</span> b <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> b <span class="token operator">>=</span> n <span class="token operator">||</span> memo<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//换方向了</span>            d <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> x <span class="token operator">+</span> dx<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        x <span class="token operator">=</span> a<span class="token punctuation">,</span> y <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目15：杨辉三角"><a href="#题目15：杨辉三角" class="headerlink" title="题目15：杨辉三角"></a>题目15：杨辉三角</h2><p>基础递推题，在后面求组合数十分有用。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目16：插火把"><a href="#题目16：插火把" class="headerlink" title="题目16：插火把"></a>题目16：插火把</h2><p>具体就按照题目来，十字遍历和方形遍历，最后遍历整个二维数组就可以那些地方会刷怪。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span> </span><span class="token keyword">int</span> map<span class="token punctuation">[</span><span class="token number">5005</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> x <span class="token punctuation">:</span> <span class="token operator">-</span>x<span class="token punctuation">;</span> <span class="token punctuation">}</span>bool <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> x <span class="token operator">></span> n <span class="token operator">||</span> y <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> ans<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m <span class="token operator">+</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">></span> m <span class="token operator">||</span> <span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>x <span class="token operator">+</span> a<span class="token punctuation">,</span> b <span class="token operator">+</span> y<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//i>m就说明是萤石</span>                    map<span class="token punctuation">[</span>x <span class="token operator">+</span> a<span class="token punctuation">]</span><span class="token punctuation">[</span>b <span class="token operator">+</span> y<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目17：压缩技术"><a href="#题目17：压缩技术" class="headerlink" title="题目17：压缩技术"></a>题目17：压缩技术</h2><p>按照题目要求暴力做就行了，直接按照一维方式来做，二维反而更麻烦。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> book<span class="token punctuation">[</span><span class="token number">42000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> bit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">>></span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> cur<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cur <span class="token operator">+</span> temp<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> bit<span class="token punctuation">;</span>        cur <span class="token operator">=</span> i<span class="token punctuation">;</span>        bit <span class="token operator">=</span> <span class="token operator">!</span>bit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            cout <span class="token operator">&lt;&lt;</span> book<span class="token punctuation">[</span>cur<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目18：压缩技术（续集版）"><a href="#题目18：压缩技术（续集版）" class="headerlink" title="题目18：压缩技术（续集版）"></a>题目18：压缩技术（续集版）</h2><p>存在一个string数组里面，这样就不需要后面求个平方根了，然后遍历每一个string，注意不要在循环内使用局部变量，因为其换行不影响cnt的累计。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span>string memo<span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">char</span> bit <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> memo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> memo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cin <span class="token operator">>></span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> memo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> memo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> memo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> bit<span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                bit <span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>                cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目19：方块转换"><a href="#题目19：方块转换" class="headerlink" title="题目19：方块转换"></a>题目19：方块转换</h2><p>最后一道可以说是一个搜索，亦可以说是一个模拟，由于代码长度过长，建议直接看洛谷的题解。</p><h3 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h3><p>首先对于模拟，只需要对1-7的所有内容写一个接口，然后依次调用，一旦在某个地方返回了true/1就可立即输出这个接口对应的数字。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>如果是用搜索的方式，建议学会剪枝后再继续向下看：<br>1.首先整个数字的变换实际上是不需要完全变换的，我们以1作为例子，在（1）中，（1,1）的位置会变换（1,3），在进行比对的时候如果发现两者不等，直接进入下个接口，不浪费时间。<br>2.同时，我们只需要存储开始和结束，然后使用常数的空间就可以检验是否能够匹配成功。<br>也就是说，搜索可以整个过程减少时空开销，但是，极端情况下，我们是不能减少时间的（由于空间从n^2变为了常数，所以一定是减少的），因为假设都在最后一步才能判断是否正确变换的情况下，那么时间和模拟是一样的。</p><p>以上就这个题单的全部内容啦，突然难度开始微微上调做题速度都慢了不少，明天一定早起早点把新的题单刷完。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法和程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程算法题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷官方题单——循环结构题解（水题警告）</title>
      <link href="/2020/04/13/luo-gu-guan-fang-ti-dan-xun-huan-jie-gou-ti-jie-shui-ti-jing-gao/"/>
      <url>/2020/04/13/luo-gu-guan-fang-ti-dan-xun-huan-jie-gou-ti-jie-shui-ti-jing-gao/</url>
      
        <content type="html"><![CDATA[<p>今天虽然还是水题，但是实际上已经有部分需要一定的基础才能做出来。下面是代码和部分解释。</p><h2 id="题目0：找最小值"><a href="#题目0：找最小值" class="headerlink" title="题目0：找最小值"></a>题目0：找最小值</h2><p>这个地方方法很多，主要是因为n太小了导致了其随意做，但是我个人倾向于使用一边读入一边寻找最小值的方法，代码如下。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">int</span> num<span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">,</span>temp<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目1：分类平均"><a href="#题目1：分类平均" class="headerlink" title="题目1：分类平均"></a>题目1：分类平均</h2><p>我们只需要一边读入数据，一边判断他们是否能够满足被k整除，分别记录总和和个数即可，注意输出格式。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>ks<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>kcnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>nks<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>nkcnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> ks<span class="token operator">+</span><span class="token operator">=</span>i<span class="token punctuation">,</span>kcnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> nks<span class="token operator">+</span><span class="token operator">=</span>i<span class="token punctuation">,</span>nkcnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1f %.1f"</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token operator">*</span>ks<span class="token operator">/</span>kcnt<span class="token punctuation">,</span><span class="token number">1.0</span><span class="token operator">*</span>nks<span class="token operator">/</span>nkcnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目2：一尺之锤"><a href="#题目2：一尺之锤" class="headerlink" title="题目2：一尺之锤"></a>题目2：一尺之锤</h2><p>按照题目的要求，一边除二一边计算日期就行了。（习惯用位运算，左移一位为除2，右移则为乘2）</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">int</span> n<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">,</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目3：数字直角三角形"><a href="#题目3：数字直角三角形" class="headerlink" title="题目3：数字直角三角形"></a>题目3：数字直角三角形</h2><p>主要是对输出格式的处理，这里有有个小技巧，使用printf函数的时候采用%0xd的时候，可以在前面补0，x为位数。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d"</span><span class="token punctuation">,</span>cnt<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目4：阶乘的和"><a href="#题目4：阶乘的和" class="headerlink" title="题目4：阶乘的和"></a>题目4：阶乘的和</h2><p>高精度警告，因此这里的难度体现在用C/C++上，各位java选手和python选手请忽略</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> first<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">[</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> pos<span class="token punctuation">;</span>        pos <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b <span class="token operator">+</span> pos<span class="token punctuation">;</span>        pos <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    first<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Factorial</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//求阶乘</span>        <span class="token function">Add</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从第一个数加到ans里面</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目5：计数问题"><a href="#题目5：计数问题" class="headerlink" title="题目5：计数问题"></a>题目5：计数问题</h2><p>算是比较基础的问题，求位数，当然也可以存到一个string数组里面，然后每个都是string，然后直接遍历变求string.strlen()之和。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">Count</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%ld%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>        count <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">Count</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目6：级数求和"><a href="#题目6：级数求和" class="headerlink" title="题目6：级数求和"></a>题目6：级数求和</h2><p>如果你知道级数求和公式，那么没必要一步一步的来，但是如果你不知道直接循环即可。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span> sum <span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    sum <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//由于i从1开始取，由种树定理可知最后要-1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目7：金币"><a href="#题目7：金币" class="headerlink" title="题目7：金币"></a>题目7：金币</h2><p>简单的按照题目的要求即可。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property"># <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">-</span>n<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">-</span><span class="token operator">=</span>n<span class="token punctuation">)</span>              cnt<span class="token operator">+</span><span class="token operator">=</span>n<span class="token operator">*</span>n<span class="token punctuation">,</span>n<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>cnt<span class="token operator">+</span>k<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为循环结束条件为k-n>=0,当k-n小于0的时候，</span>    <span class="token comment" spellcheck="true">//说明还留了一部分，所以需要加，当  k-n恰好等于0的时候，经过一轮循环以后，k直</span>    <span class="token comment" spellcheck="true">//接变为了0，这个部分就没了。</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然也可以按照数列求和地方法，高中老师告诉我们：1^2+2^2…+n^2=n(n+1)(2n+1)/6，1+2+3+…+n=n(n+1)/2。通过这两个就可以反解需要多少天才能达到之后超过，之前不够的天数，最后根据是否满足直接补上就行了，代码这里就不贴了，有兴趣的自己算一下。</p><h2 id="题目8：数列求和"><a href="#题目8：数列求和" class="headerlink" title="题目8：数列求和"></a>题目8：数列求和</h2><p>这上面这么多循环的数列求和了，这里最简单的数列求和就没有讲解必要了吧，题目不允许使用等差数列，那么，我们就选择使用他啦。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>n<span class="token operator">*</span><span class="token operator">-</span><span class="token operator">~</span>n<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里牵扯到C语言比较细节的地方——计算优先级和位运算，看不懂还是老老实实写n*(n+1)/2吧</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="题目9：质数口袋"><a href="#题目9：质数口袋" class="headerlink" title="题目9：质数口袋"></a>题目9：质数口袋</h2><p>题目要求求出最多的质数个数以及求和要在给定的范围以内，所以我们只需要贪心从小到大直接选就vans了。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">*</span>i<span class="token operator">&lt;=</span>y<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里牵扯到质数的性质，只需要判断小于其自身算数平方根的范围就行了，证明略</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>x<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2\n1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">+</span>i<span class="token operator">></span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPrime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum<span class="token operator">+</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            x<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目10：回文质数"><a href="#题目10：回文质数" class="headerlink" title="题目10：回文质数"></a>题目10：回文质数</h2><p>按照题目要求，只需要从给定数字最近的一个质数开始就行了。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">pragma</span> warning(disable:4996)</span><span class="token comment" spellcheck="true">//这个是在VS下不适用scanf_s的时候需要增加的宏定义，一般来说交题可以删掉，我忘了</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span>bool book<span class="token punctuation">[</span><span class="token number">10000050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//标记即可</span><span class="token keyword">void</span> <span class="token function">Is_Prime</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span>book<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> true<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000048</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> b <span class="token operator">/</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> book<span class="token punctuation">[</span>i <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">Is_Palindromes</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> num<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> temp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> temp <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans <span class="token operator">==</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">>=</span> <span class="token number">10000000</span><span class="token punctuation">)</span> b <span class="token operator">=</span> <span class="token number">9999999</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里的原因是，牛逼“网友”证明得到，没有九位数的回文质数</span>    <span class="token function">Is_Prime</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> a<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这里的原因是因为，除了2，质数都不是偶数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Is_Palindromes</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目11：小玉在游泳"><a href="#题目11：小玉在游泳" class="headerlink" title="题目11：小玉在游泳"></a>题目11：小玉在游泳</h2><p>注意数据输入，计算过程和输出的要求格式。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> x<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>sum<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> sum<span class="token operator">+</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">0.98</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目12：数字反转（弱小版本）"><a href="#题目12：数字反转（弱小版本）" class="headerlink" title="题目12：数字反转（弱小版本）"></a>题目12：数字反转（弱小版本）</h2><p>有弱小必有加强，后面是有一个加强版本的，这里只需要注意前导0的存在就行了。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span>num <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目13：月落乌啼算钱"><a href="#题目13：月落乌啼算钱" class="headerlink" title="题目13：月落乌啼算钱"></a>题目13：月落乌啼算钱</h2><p>如果你熟悉斐波那契数列，那么对于其解析式一定特别的熟悉，这道题的题干也给了很多的提示，同时fib数列也是理解和深入dp的一个重要入门手段。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld.00"</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//题目毕竟要保证这个式子不能让人一下看出来就是整数嘛</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目14：求极差"><a href="#题目14：求极差" class="headerlink" title="题目14：求极差"></a>题目14：求极差</h2><p>一边输入一边保存最大最小值即可。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> min<span class="token operator">=</span><span class="token number">99999</span><span class="token punctuation">,</span>max<span class="token operator">=</span><span class="token operator">-</span><span class="token number">999999</span><span class="token punctuation">,</span>num<span class="token punctuation">,</span>temp<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        max<span class="token operator">=</span><span class="token punctuation">(</span>max<span class="token operator">></span>temp<span class="token operator">?</span>max<span class="token punctuation">:</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        min<span class="token operator">=</span><span class="token punctuation">(</span>min<span class="token operator">&lt;</span>temp<span class="token operator">?</span>min<span class="token punctuation">:</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>max<span class="token operator">-</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目15：最长连号"><a href="#题目15：最长连号" class="headerlink" title="题目15：最长连号"></a>题目15：最长连号</h2><p>我这里嫌一边输入一边记录麻烦，所以直接采用的是先全部存下来，然后直接进行遍历。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">15000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> temp_ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> memo<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> temp_ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> temp_ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">></span> temp_ans <span class="token operator">?</span> ans <span class="token punctuation">:</span> temp_ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目16：质因数分解"><a href="#题目16：质因数分解" class="headerlink" title="题目16：质因数分解"></a>题目16：质因数分解</h2><p>由唯一分解定理可知：一个数能且仅能分解为一组若干质数的乘积，这里给出来的数据是一定是两个质数的乘积，只需要从小到大依次除，当能够除尽的时候，直接输出另一个数就行了</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> num <span class="token operator">/</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="题目17：求三角形"><a href="#题目17：求三角形" class="headerlink" title="题目17：求三角形"></a>题目17：求三角形</h2><p>输入输出题，前导0的补充方式在前面有，这里不赘述。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d"</span><span class="token punctuation">,</span> start<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02d"</span><span class="token punctuation">,</span> sstart<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目18：打分"><a href="#题目18：打分" class="headerlink" title="题目18：打分"></a>题目18：打分</h2><p>求最低最高，在数据比较多的情况可以使用极差那道题的方式，但是这里我采用的是使用sort函数，虽然会慢一些，但是代码更加精简。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">int</span> memo<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sort</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span> memo <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//你也可以在前面使用名称空间</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> sum <span class="token operator">+</span><span class="token operator">=</span> memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf\n"</span><span class="token punctuation">,</span> sum <span class="token operator">*</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目19：Davor"><a href="#题目19：Davor" class="headerlink" title="题目19：Davor"></a>题目19：Davor</h2><p>因为每个周一到周日所筹集的钱是一样的，所以把钱的总额直接就加起来就行了。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>x<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">21</span> <span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">52</span> <span class="token operator">==</span> n<span class="token punctuation">)</span>                 <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n%d\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目20：津津的储蓄计划"><a href="#题目20：津津的储蓄计划" class="headerlink" title="题目20：津津的储蓄计划"></a>题目20：津津的储蓄计划</h2><p>实际上按照题目要求从1月到12月遍历一次即可。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>re <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>c<span class="token punctuation">,</span>st <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//re即remain剩余，st即store存储，c为consume消耗后还有的整百部分</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        c <span class="token operator">=</span> <span class="token punctuation">(</span>re <span class="token operator">+</span> <span class="token number">300</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>        re <span class="token operator">=</span> re <span class="token operator">+</span> <span class="token number">300</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> c <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>        st <span class="token operator">=</span>st<span class="token operator">+</span> c <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>re<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这里说明剩下的钱不够了</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>re<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> st<span class="token operator">*</span><span class="token number">120</span><span class="token operator">/</span><span class="token number">100</span> <span class="token operator">+</span> re<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是本篇的全部内容啦，如果有问题的话可直接联系我的QQ（在下方可以加）。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法和程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程算法题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷官方题单——分支结构题解（水题警告）</title>
      <link href="/2020/04/11/luo-gu-guan-fang-ti-dan-fen-zhi-jie-gou-ti-jie-shui-ti-jing-gao/"/>
      <url>/2020/04/11/luo-gu-guan-fang-ti-dan-fen-zhi-jie-gou-ti-jie-shui-ti-jing-gao/</url>
      
        <content type="html"><![CDATA[<p>依旧水题警告，不多BB，直接上。</p><h2 id="题目0：数的性质"><a href="#题目0：数的性质" class="headerlink" title="题目0：数的性质"></a>题目0：数的性质</h2><p>实际上就是简单的与（&amp;），或（|）以及条件复合的基本用法。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    bool a <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//a表示题目性质1，b表示题目性质2</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d"</span><span class="token punctuation">,</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">,</span> a <span class="token operator">|</span> b<span class="token punctuation">,</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>b <span class="token operator">||</span> b <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">!</span>a <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="题目1：闰年判断"><a href="#题目1：闰年判断" class="headerlink" title="题目1：闰年判断"></a>题目1：闰年判断</h2><p>实际上注意整百年的情况，整百年的情况下必须是400的倍数才可以。原因自行百度嗷。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>n<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="题目2：Apples"><a href="#题目2：Apples" class="headerlink" title="题目2：Apples"></a>题目2：Apples</h2><p>简单的输入输出，只要你具备基本的英语知识（apple的复数形式为apples）</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Today, I ate %d apple."</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Today, I ate %d apples."</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="题目3：洛谷团队系统"><a href="#题目3：洛谷团队系统" class="headerlink" title="题目3：洛谷团队系统"></a>题目3：洛谷团队系统</h2><p>设题目为n，则本地配置需要5n，而上传则为3n+11，令5n&gt;3n+11有n&gt;5.5，因此直接判断</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">5.5</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Luogu\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Local\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="题目4：肥胖问题"><a href="#题目4：肥胖问题" class="headerlink" title="题目4：肥胖问题"></a>题目4：肥胖问题</h2><p>即BMI的计算方法- -，顺带一提，疫情过后各位的BMI怎么样了鸭（滑稽），另外由于题目要求有效数字，所以最好是采用cout输出。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">double</span> m<span class="token punctuation">,</span> h<span class="token punctuation">,</span> bmi<span class="token punctuation">;</span>    cin <span class="token operator">>></span> m <span class="token operator">>></span> h<span class="token punctuation">;</span>    bmi <span class="token operator">=</span> m <span class="token operator">/</span> <span class="token punctuation">(</span>h <span class="token operator">*</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bmi <span class="token operator">&lt;</span> <span class="token number">18.5</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Underweight"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bmi <span class="token operator">>=</span> <span class="token number">18.5</span> <span class="token operator">&amp;&amp;</span> bmi <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Normal"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bmi <span class="token operator">>=</span> <span class="token number">24</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> bmi <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">"Overweight"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目5：三位数排序"><a href="#题目5：三位数排序" class="headerlink" title="题目5：三位数排序"></a>题目5：三位数排序</h2><p>这里我用的std::sort，没啥技术含量，直接略过。</p><h2 id="题目6：月份天数"><a href="#题目6：月份天数" class="headerlink" title="题目6：月份天数"></a>题目6：月份天数</h2><p>运用的打表的方法，对于大部分人来说都是基操。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> M<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//提前打个表</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> year<span class="token punctuation">,</span>month<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>year<span class="token punctuation">,</span><span class="token operator">&amp;</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>year<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> M<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">29</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>M<span class="token punctuation">[</span>month<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目7：不高兴的津津"><a href="#题目7：不高兴的津津" class="headerlink" title="题目7：不高兴的津津"></a>题目7：不高兴的津津</h2><p>直接边读边比较就行了，这道题过水。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">></span>max<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>s<span class="token operator">></span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> max<span class="token operator">=</span>s<span class="token punctuation">,</span>day<span class="token operator">=</span>i    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目8：买铅笔"><a href="#题目8：买铅笔" class="headerlink" title="题目8：买铅笔"></a>题目8：买铅笔</h2><p>表示这道题是我早期做的一道题了，题解看看就完事。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> n<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> n3<span class="token punctuation">,</span> p3<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">,</span> fir<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> sec<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> thi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token operator">&amp;</span> n1<span class="token punctuation">,</span><span class="token operator">&amp;</span>p1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p2<span class="token punctuation">,</span><span class="token operator">&amp;</span> n3<span class="token punctuation">,</span><span class="token operator">&amp;</span> p3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//早期写法这样太蠢了，不适合拓展</span>   a1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> n1<span class="token punctuation">)</span> <span class="token operator">/</span> n1<span class="token punctuation">)</span><span class="token operator">*</span>p1<span class="token punctuation">,</span> a2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> n2<span class="token punctuation">)</span> <span class="token operator">/</span> n2<span class="token punctuation">)</span><span class="token operator">*</span>p2<span class="token punctuation">,</span> a3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> n3<span class="token punctuation">)</span> <span class="token operator">/</span> n3<span class="token punctuation">)</span><span class="token operator">*</span>p3<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>a1 <span class="token operator">></span> a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>a1 <span class="token operator">></span> a3<span class="token punctuation">)</span><span class="token punctuation">{</span>         fir <span class="token operator">=</span> a1<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>a2 <span class="token operator">></span> a3<span class="token punctuation">)</span> sec <span class="token operator">=</span> a2<span class="token punctuation">,</span>thi <span class="token operator">=</span> a3<span class="token punctuation">;</span>         <span class="token keyword">else</span> sec <span class="token operator">=</span> a3<span class="token punctuation">,</span>thi <span class="token operator">=</span> a2<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> fir <span class="token operator">=</span> a3<span class="token punctuation">,</span>sec <span class="token operator">=</span> a1<span class="token punctuation">,</span>thi <span class="token operator">=</span> a2<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>a2 <span class="token operator">></span> a3<span class="token punctuation">)</span><span class="token punctuation">{</span>             fir <span class="token operator">=</span> a2<span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>a1 <span class="token operator">></span> a3<span class="token punctuation">)</span> sec <span class="token operator">=</span> a1<span class="token punctuation">,</span>thi <span class="token operator">=</span> a3<span class="token punctuation">;</span>             <span class="token keyword">else</span> sec <span class="token operator">=</span> a3<span class="token punctuation">,</span>thi <span class="token operator">=</span> a1<span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token keyword">else</span> fir <span class="token operator">=</span> a3<span class="token punctuation">,</span>sec <span class="token operator">=</span> a2<span class="token punctuation">,</span> thi <span class="token operator">=</span> a1<span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> thi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目9：ISBN"><a href="#题目9：ISBN" class="headerlink" title="题目9：ISBN"></a>题目9：ISBN</h2><p>比较暴力的方法，详见代码。</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span>    <span class="token keyword">int</span> check<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c-%c%c%c-%c%c%c%c%c-%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> check<span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//题解一里面有相关的解释</span>    t2<span class="token operator">=</span>check<span class="token operator">%</span><span class="token number">11</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t2<span class="token operator">==</span><span class="token string">'0'</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span> t2<span class="token operator">=</span><span class="token string">'X'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t1<span class="token operator">==</span>t2<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Right"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c-%c%c%c-%c%c%c%c%c-%c"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目10：电费"><a href="#题目10：电费" class="headerlink" title="题目10：电费"></a>题目10：电费</h2><p>就是简单粗暴的分段函数desu。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">&lt;=</span><span class="token number">150</span><span class="token punctuation">)</span> y<span class="token operator">=</span><span class="token number">0.4463</span><span class="token operator">*</span>d<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token operator">></span><span class="token number">150</span><span class="token operator">&amp;&amp;</span>d<span class="token operator">&lt;=</span><span class="token number">400</span><span class="token punctuation">)</span> y<span class="token operator">=</span><span class="token number">0.4463</span><span class="token operator">*</span><span class="token number">150</span><span class="token operator">+</span><span class="token number">0.4663</span><span class="token operator">*</span><span class="token punctuation">(</span>d<span class="token number">-150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> y<span class="token operator">=</span><span class="token number">0.4463</span><span class="token operator">*</span><span class="token number">150</span><span class="token operator">+</span><span class="token number">0.4663</span><span class="token operator">*</span><span class="token number">250</span><span class="token operator">+</span><span class="token punctuation">(</span>d<span class="token number">-400</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5663</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1lf"</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一位小数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目11：小鱼的航程"><a href="#题目11：小鱼的航程" class="headerlink" title="题目11：小鱼的航程"></a>题目11：小鱼的航程</h2><p>具体的变量含义见注释。</p><pre class="line-numbers language-c"><code class="language-c">   <span class="token keyword">int</span> x<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span>   <span class="token keyword">long</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">;</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%ld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   b <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计算要多少个整周</span>   a <span class="token operator">=</span> b <span class="token operator">*</span> <span class="token number">250</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a表示的是答案，整周直接提前计算</span>   c <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">7</span> <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//还剩下了几天</span>   d <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从周几开始天开始</span>   <span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span> d <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加入这周是周天，那么我们直接让他下一天变为周一</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span> d<span class="token operator">++</span><span class="token punctuation">,</span> a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">250</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//工作日，给我游</span>      <span class="token keyword">else</span> d<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//表示周六的时候，不游</span>      c<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//剩余日期减1</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%ld"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目12-：三角函数"><a href="#题目12-：三角函数" class="headerlink" title="题目12 ：三角函数"></a>题目12 ：三角函数</h2><p>由于是勾股数，故两个角都是锐角，正弦函数在(0,pi/2)的范围内随角度增加而增加，故较小锐角的正弦值为最小值/最大值，因此难点变为了约分，这里通过gcd来求解。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> cin<span class="token operator">>></span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token function">__gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">'/'</span><span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token function">__gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目13：淘淘摘苹果"><a href="#题目13：淘淘摘苹果" class="headerlink" title="题目13：淘淘摘苹果"></a>题目13：淘淘摘苹果</h2><p>提前存好遍历一遍就行了，主要是因为高度在最后才输入，因此不能边输入边cnt++。</p><pre class="line-numbers language-c"><code class="language-c">   <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> heigh<span class="token punctuation">,</span>can<span class="token punctuation">,</span>count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>heigh<span class="token punctuation">)</span><span class="token punctuation">;</span>   can <span class="token operator">=</span> heigh <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> can<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目14：三角形分类"><a href="#题目14：三角形分类" class="headerlink" title="题目14：三角形分类"></a>题目14：三角形分类</h2><p>直接就是三角形判断。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> d<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接放在scanf输入也可以的，这里是懒= =</span>    <span class="token function">sort</span><span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> d <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Not triangle\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Right triangle\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">></span> d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Acute triangle\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Obtuse triangle\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b <span class="token operator">||</span> b <span class="token operator">==</span> c <span class="token operator">||</span> a <span class="token operator">==</span> c<span class="token punctuation">)</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Isosceles triangle\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> c<span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Equilateral triangle\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目15：ABC"><a href="#题目15：ABC" class="headerlink" title="题目15：ABC"></a>题目15：ABC</h2><p>按照规定的顺序输出三个数字，具体代码见下。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> A<span class="token punctuation">,</span>B<span class="token punctuation">,</span>C<span class="token punctuation">;</span>    cin<span class="token operator">>></span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>A<span class="token operator">>></span>B<span class="token operator">>></span>C<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>A<span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>B<span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>C<span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过求差来保证ABC的输出顺序</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>水题基本上没了，后面的题开始会有一点点难度了，欢乐水题就此结束。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法和程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程算法题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷官方题单——顺序结构题解（超级水题警告）</title>
      <link href="/2020/04/10/luo-gu-guan-fang-ti-dan-shun-xu-jie-gou-ti-jie-chao-ji-shui-jing-gao/"/>
      <url>/2020/04/10/luo-gu-guan-fang-ti-dan-shun-xu-jie-gou-ti-jie-chao-ji-shui-jing-gao/</url>
      
        <content type="html"><![CDATA[<p>最近洛谷直接更新之前的试炼场模式，现在直接就采用题单了，虽然题目多了不少，但是实际上就是把类似于EX之类的放在了一起，虽然题目多，但是感觉在后面可能会导致一个题单难度会存在飞跃。<br>这是第一期水题集锦，我尽量一日到两日更。另外我记得某本书告诉我们，没有循环的题目实际上某种意义上不适合作为计算机程序，这些题基本上都是这种情况。</p><h2 id="题目0：P1001-A-B"><a href="#题目0：P1001-A-B" class="headerlink" title="题目0：P1001 A+B"></a>题目0：P1001 A+B</h2><p>题解花里胡哨过于多，我也不玩那些了。</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="题目1：P1000"><a href="#题目1：P1000" class="headerlink" title="题目1：P1000"></a>题目1：P1000</h2><p>输入输出题目，复制粘贴即可，略过</p><h2 id="题目2：苹果采购"><a href="#题目2：苹果采购" class="headerlink" title="题目2：苹果采购"></a>题目2：苹果采购</h2><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="题目3：大小写转换"><a href="#题目3：大小写转换" class="headerlink" title="题目3：大小写转换"></a>题目3：大小写转换</h2><p>这算是一个技巧了，而且后面字符串也有类似的操作的</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span>a<span class="token operator">-</span><span class="token string">'a'</span><span class="token operator">+</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="题目4：数字反转"><a href="#题目4：数字反转" class="headerlink" title="题目4：数字反转"></a>题目4：数字反转</h2><p>通过string方式反向输出即可，反正不会像一些题一样跑出来前导0。（也可以用栈）</p><pre class="line-numbers language-c"><code class="language-c">    string s<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>s<span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> ans<span class="token operator">+</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目5：再分肥宅水"><a href="#题目5：再分肥宅水" class="headerlink" title="题目5：再分肥宅水"></a>题目5：再分肥宅水</h2><p>注意输出格式<br>这里是3位小数，而且有这种情况下的要求，建议都用printf</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3lf\n%d"</span><span class="token punctuation">,</span>t<span class="token operator">/</span>n<span class="token punctuation">,</span>n<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="题目6：小鱼游泳时间"><a href="#题目6：小鱼游泳时间" class="headerlink" title="题目6：小鱼游泳时间"></a>题目6：小鱼游泳时间</h2><p>实际上就是种树问题放在时间上，n段路需要n+1的树，这里计算的时候也要注意；<br>然后分钟可以参考补码的计算方式。补码的情况就是在最大的时候变为最小，所以d+60-b</p><pre class="line-numbers language-c"><code class="language-c">    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span>c <span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里都是题目上的字母，不再阐述</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> d <span class="token operator">-</span> b <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> e <span class="token operator">=</span> c <span class="token operator">-</span> a <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">,</span>f <span class="token operator">=</span> d <span class="token operator">+</span> <span class="token number">60</span> <span class="token operator">-</span>b<span class="token punctuation">;</span>    <span class="token keyword">else</span> e<span class="token operator">=</span> c <span class="token operator">-</span> a<span class="token punctuation">,</span> f <span class="token operator">=</span> d <span class="token operator">-</span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">*</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span> <span class="token punctuation">,</span> e<span class="token punctuation">,</span> f <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目7：n合1"><a href="#题目7：n合1" class="headerlink" title="题目7：n合1"></a>题目7：n合1</h2><p>第三题：注意有效数字和小数，cout的方式这样（一般别这么玩）；<br>第五题：行程问题（来自于某小学奥数老师的科普）：相遇问题：路程和=时间×速度和， 火车过桥问题：总路程=车长+桥长，代入公式计算就是15啦<br>第六题：勾股定理（这个大家都不会不知道吧，不会吧不会吧）<br>第九题：这个题就是还原的过程<br>第十题：牛吃草问题（一片草原P，每天增长Q：X牛吃Y天，Z牛吃W天）：在这道题对应之后带进去就可以得到以下方程（我latex还不怎么会用在这里，后期再改）<br>P+30Q=30（即Y）×8（即X）<br>P+6Q=6（即W）×10（即Z）<br>接下来P=15，Q=7.5，即P=P/10（十分钟）+Q=9，即得到了答案（小学生太难了）；<br>第11题：追及问题（依旧来自于某小学奥数老师）：路程变化量：速度变化量=需要的时间</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I love Luogu!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span><span class="token number">12</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3lf\n"</span><span class="token punctuation">,</span><span class="token number">500.0</span><span class="token operator">/</span><span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//不嫌麻烦可以 cout&lt;&lt;fixed&lt;&lt;setprecision(3)&lt;&lt;1.0*500/3;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token number">15</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">9</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token number">110</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span><span class="token number">90</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> <span class="token keyword">const</span> pi<span class="token operator">=</span><span class="token number">3.141593</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> <span class="token keyword">const</span> r<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>pi<span class="token operator">*</span>r<span class="token operator">*</span><span class="token number">2</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>pi<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span><span class="token number">4.0</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span>pi<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token number">22</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token number">9</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token number">100.0</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token number">13</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span><span class="token string">"R"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> <span class="token keyword">const</span> pi<span class="token operator">=</span><span class="token number">3.141593</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> V<span class="token operator">=</span>pi<span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">+</span>pi<span class="token operator">*</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span>V<span class="token punctuation">,</span><span class="token number">1.0</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token number">50</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目8：三角形面积"><a href="#题目8：三角形面积" class="headerlink" title="题目8：三角形面积"></a>题目8：三角形面积</h2><p>海伦公式建议加入模板</p><pre class="line-numbers language-c"><code class="language-c">    ans<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>p<span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">-</span>a<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">-</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.1lf\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="题目9：买铅笔"><a href="#题目9：买铅笔" class="headerlink" title="题目9：买铅笔"></a>题目9：买铅笔</h2><p>这个，转成整数就好了</p><pre class="line-numbers language-c"><code class="language-c">  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a元b角</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="题目10：还有几个苹果"><a href="#题目10：还有几个苹果" class="headerlink" title="题目10：还有几个苹果"></a>题目10：还有几个苹果</h2><p>坑有点恶心（也不是恶心，需要考虑下日常），半个不是一个，负数不存在最小为0</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span>t<span class="token punctuation">,</span>s<span class="token punctuation">,</span>ans<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字母和题目一个要求</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ans<span class="token operator">=</span>m<span class="token operator">-</span>s<span class="token operator">/</span>t<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">%</span>t<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目11：对角线"><a href="#题目11：对角线" class="headerlink" title="题目11：对角线"></a>题目11：对角线</h2><p>说实话我也不知道这道题怎么（哭哭），所以直接抄了官方的题解，代码如下，于是也加入死记硬背套餐了对于我，后续有正式属于我的题解我会更新（咕咕咕）。</p><pre class="line-numbers language-c"><code class="language-c">    ans<span class="token operator">=</span>n<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token number">-3</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token operator">*</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上结束。（评论区我还没搞出来23333，虽然我觉得也人会回复我的弱智水题）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法和程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程算法题解 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的开始</title>
      <link href="/2020/04/07/xin-de-kai-shi/"/>
      <url>/2020/04/07/xin-de-kai-shi/</url>
      
        <content type="html"><![CDATA[<p>欢迎来到我的blog，这是我的第一篇博客，这里进行下自己的规划以及本博客主要分享的东西。</p><h2 id="接下来对自己的规划"><a href="#接下来对自己的规划" class="headerlink" title="接下来对自己的规划"></a>接下来对自己的规划</h2><h3 id="数学方面"><a href="#数学方面" class="headerlink" title="数学方面"></a>数学方面</h3><p>自己的数学还是太差了些，由于自己想要走计算机图形学，因此打算主要学习一下的东西：</p><ol><li>数学分析：作为其他数学学科的基础，而且由于我考研只考了数学二，对数学一中的空间解析几何，曲线曲面积分，旋度梯度啥的都需要认真“复习”一次，也会分享在这个博客中；</li><li>线性代数：线性代数在计算机中实在是过于重要，所以我需要系统的不站在考试角度上学习一次线性代数；</li><li>概率和统计：这个还是需要好好复习一遍的，计算机中概率和统计在相当多的方向中有着重要的左右；</li><li>拓扑学，微分几何等之类的更难的课程。</li></ol><h3 id="计算机方面"><a href="#计算机方面" class="headerlink" title="计算机方面"></a>计算机方面</h3><p>计算机的相关知识也会放在这里，主要有：</p><ol><li>算法题：虽然是个跨考，但是我还是会经常刷算法题练练脑子，当然前期的情况下我可能会放一些水题，后期会删掉，同时会有自己关于算法的学习过程；</li><li>408四门基础课：大家都懂；</li><li>数据库：属于一个计算机工程师必须的理论基础；</li><li>计算机图形学相关内容和文献阅读读后感：毕竟想走的方向在这里。<br>以上的学习内容后期也会逐渐丰富起来，这毕竟只是自己的第一个文章。</li></ol><h3 id="blog优化方面"><a href="#blog优化方面" class="headerlink" title="blog优化方面"></a>blog优化方面</h3><p>现在用的是一个开源的theme，后期还是会进行更多的更改甚至更换，主要是很多bug现在的我无法解决，并且也牵扯到一些底层的问题，后期再慢慢改（画）。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 哔哔叨 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
